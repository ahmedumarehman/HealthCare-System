{"ast":null,"code":"var _PDFService;\nimport jsPDF from 'jspdf';\nimport { EncryptionService } from './encryption';\nexport class PDFService {\n  constructor() {\n    this.encryptionService = void 0;\n    this.encryptionService = new EncryptionService();\n  }\n  static getInstance() {\n    if (!PDFService.instance) {\n      PDFService.instance = new PDFService();\n    }\n    return PDFService.instance;\n  }\n  async generateMedicalRecordPDF(record, patient, options = {}) {\n    const {\n      includeWatermark = true,\n      isEncrypted = false,\n      password\n    } = options;\n\n    // Create new PDF document\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n\n    // Add CONFIDENTIAL watermark at the top\n    if (includeWatermark) {\n      pdf.setFontSize(24);\n      pdf.setTextColor(220, 53, 69); // Red color\n      pdf.setFont('helvetica', 'bold');\n\n      // Center the watermark at the top\n      const watermarkText = 'CONFIDENTIAL';\n      const textWidth = pdf.getTextWidth(watermarkText);\n      const xPosition = (pageWidth - textWidth) / 2;\n      pdf.text(watermarkText, xPosition, 20);\n\n      // Add a line under the watermark\n      pdf.setDrawColor(220, 53, 69);\n      pdf.setLineWidth(2);\n      pdf.line(20, 25, pageWidth - 20, 25);\n    }\n\n    // Reset text color to black for content\n    pdf.setTextColor(0, 0, 0);\n    pdf.setFont('helvetica', 'normal');\n\n    // Header\n    let yPosition = includeWatermark ? 40 : 20;\n    pdf.setFontSize(18);\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Medical Record', 20, yPosition);\n    yPosition += 15;\n    pdf.setFontSize(12);\n    pdf.setFont('helvetica', 'normal');\n\n    // Patient Information\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Patient Information:', 20, yPosition);\n    yPosition += 8;\n    pdf.setFont('helvetica', 'normal');\n    const patientInfo = [`Name: ${patient.name}`, `Email: ${patient.email}`, `Date of Birth: ${patient.dateOfBirth}`, `Phone: ${patient.phoneNumber}`, `Address: ${patient.address}`, `Emergency Contact: ${patient.emergencyContact}`, `Insurance: ${patient.insuranceProvider}`, `Policy Number: ${patient.insurancePolicyNumber}`];\n    patientInfo.forEach(info => {\n      pdf.text(info, 20, yPosition);\n      yPosition += 6;\n    });\n    yPosition += 10;\n\n    // Medical Record Details\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Medical Record Details:', 20, yPosition);\n    yPosition += 8;\n    pdf.setFont('helvetica', 'normal');\n\n    // Prepare record content (encrypt if needed)\n    let recordContent = {\n      title: record.title,\n      description: record.description,\n      diagnosis: record.diagnosis,\n      prescription: record.prescription\n    };\n    if (isEncrypted && password) {\n      try {\n        // Use password-based encryption\n        recordContent = {\n          title: this.encryptionService.encryptData(record.title),\n          description: this.encryptionService.encryptData(record.description),\n          diagnosis: this.encryptionService.encryptData(record.diagnosis),\n          prescription: this.encryptionService.encryptData(record.prescription)\n        };\n      } catch (error) {\n        console.error('Encryption failed:', error);\n        // Fall back to unencrypted content\n      }\n    }\n    const recordDetails = [`Record ID: ${record.id}`, `Date: ${record.date}`, `Doctor ID: ${record.doctorId}`, `Title: ${recordContent.title}`, ``, `Description:`, recordContent.description, ``, `Diagnosis:`, recordContent.diagnosis, ``, `Prescription:`, recordContent.prescription];\n    recordDetails.forEach(detail => {\n      if (detail === '') {\n        yPosition += 4;\n        return;\n      }\n\n      // Handle long text by wrapping\n      const lines = pdf.splitTextToSize(detail, pageWidth - 40);\n      lines.forEach(line => {\n        if (yPosition > pageHeight - 20) {\n          pdf.addPage();\n          yPosition = 20;\n\n          // Add watermark to new page if enabled\n          if (includeWatermark) {\n            pdf.setFontSize(24);\n            pdf.setTextColor(220, 53, 69);\n            pdf.setFont('helvetica', 'bold');\n            const watermarkText = 'CONFIDENTIAL';\n            const textWidth = pdf.getTextWidth(watermarkText);\n            const xPosition = (pageWidth - textWidth) / 2;\n            pdf.text(watermarkText, xPosition, 20);\n            pdf.setDrawColor(220, 53, 69);\n            pdf.setLineWidth(2);\n            pdf.line(20, 25, pageWidth - 20, 25);\n            pdf.setTextColor(0, 0, 0);\n            pdf.setFont('helvetica', 'normal');\n            pdf.setFontSize(12);\n            yPosition = 40;\n          }\n        }\n        pdf.text(line, 20, yPosition);\n        yPosition += 6;\n      });\n    });\n    yPosition += 15;\n\n    // Blockchain & Security Information\n    if (yPosition > pageHeight - 40) {\n      pdf.addPage();\n      yPosition = includeWatermark ? 40 : 20;\n    }\n    pdf.setFont('helvetica', 'bold');\n    pdf.text('Blockchain & Security Information:', 20, yPosition);\n    yPosition += 8;\n    pdf.setFont('helvetica', 'normal');\n    const securityInfo = [`Blockchain Hash: ${record.blockchainHash}`, `IPFS Hash: ${record.ipfsHash}`, `NFT Token ID: ${record.nftTokenId}`, `Verified: ${record.isVerified ? 'Yes' : 'No'}`, `Encrypted: ${record.isEncrypted ? 'Yes' : 'No'}`, `Access Permissions: ${record.accessPermissions.join(', ')}`];\n    securityInfo.forEach(info => {\n      const lines = pdf.splitTextToSize(info, pageWidth - 40);\n      lines.forEach(line => {\n        pdf.text(line, 20, yPosition);\n        yPosition += 6;\n      });\n    });\n\n    // Footer\n    yPosition = pageHeight - 30;\n    pdf.setFontSize(10);\n    pdf.setTextColor(128, 128, 128);\n    pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPosition);\n    if (isEncrypted) {\n      pdf.text('This document contains encrypted medical information.', 20, yPosition + 6);\n    }\n\n    // Convert to blob\n    const pdfBlob = pdf.output('blob');\n    return pdfBlob;\n  }\n  async downloadMedicalRecordPDF(record, patient, options = {}) {\n    try {\n      const pdfBlob = await this.generateMedicalRecordPDF(record, patient, options);\n\n      // Create download link\n      const url = URL.createObjectURL(pdfBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      const encryptionSuffix = options.isEncrypted ? '_encrypted' : '';\n      const filename = `medical_record_${record.id}_${patient.name.replace(/\\s+/g, '_')}${encryptionSuffix}.pdf`;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Clean up\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      throw new Error('Failed to generate PDF document');\n    }\n  }\n  async generateBatchPDF(records, patients, options = {}) {\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n\n    // Add CONFIDENTIAL watermark at the top\n    if (options.includeWatermark !== false) {\n      pdf.setFontSize(24);\n      pdf.setTextColor(220, 53, 69);\n      pdf.setFont('helvetica', 'bold');\n      const watermarkText = 'CONFIDENTIAL - BATCH MEDICAL RECORDS';\n      const textWidth = pdf.getTextWidth(watermarkText);\n      const xPosition = Math.max(10, (pageWidth - textWidth) / 2);\n      pdf.text(watermarkText, xPosition, 20);\n      pdf.setDrawColor(220, 53, 69);\n      pdf.setLineWidth(2);\n      pdf.line(20, 25, pageWidth - 20, 25);\n    }\n\n    // Process each record\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      const patient = patients.find(p => p.id === record.patientId);\n      if (!patient) continue;\n      if (i > 0) {\n        pdf.addPage();\n      }\n\n      // Generate individual record content\n      await this.addRecordToPDF(pdf, record, patient, options);\n    }\n    return pdf.output('blob');\n  }\n  async addRecordToPDF(pdf, record, patient, options) {\n    let yPosition = options.includeWatermark !== false ? 40 : 20;\n\n    // Record header\n    pdf.setFontSize(16);\n    pdf.setFont('helvetica', 'bold');\n    pdf.setTextColor(0, 0, 0);\n    pdf.text(`Medical Record - ${patient.name}`, 20, yPosition);\n    yPosition += 15;\n\n    // Add record content similar to the main method\n    // (Implementation details similar to generateMedicalRecordPDF)\n  }\n}\n_PDFService = PDFService;\nPDFService.instance = void 0;\nexport const pdfService = PDFService.getInstance();","map":{"version":3,"names":["jsPDF","EncryptionService","PDFService","constructor","encryptionService","getInstance","instance","generateMedicalRecordPDF","record","patient","options","includeWatermark","isEncrypted","password","pdf","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","setFontSize","setTextColor","setFont","watermarkText","textWidth","getTextWidth","xPosition","text","setDrawColor","setLineWidth","line","yPosition","patientInfo","name","email","dateOfBirth","phoneNumber","address","emergencyContact","insuranceProvider","insurancePolicyNumber","forEach","info","recordContent","title","description","diagnosis","prescription","encryptData","error","console","recordDetails","id","date","doctorId","detail","lines","splitTextToSize","addPage","securityInfo","blockchainHash","ipfsHash","nftTokenId","isVerified","accessPermissions","join","Date","toLocaleString","pdfBlob","output","downloadMedicalRecordPDF","url","URL","createObjectURL","link","document","createElement","href","encryptionSuffix","filename","replace","download","body","appendChild","click","removeChild","revokeObjectURL","Error","generateBatchPDF","records","patients","Math","max","i","length","find","p","patientId","addRecordToPDF","_PDFService","pdfService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/pdfService.ts"],"sourcesContent":["import jsPDF from 'jspdf';\r\nimport { MedicalRecord, Patient } from '../types';\r\nimport { EncryptionService } from './encryption';\r\n\r\nexport class PDFService {\r\n    private static instance: PDFService;\r\n    private encryptionService: EncryptionService;\r\n\r\n    private constructor() {\r\n        this.encryptionService = new EncryptionService();\r\n    }\r\n\r\n    static getInstance(): PDFService {\r\n        if (!PDFService.instance) {\r\n            PDFService.instance = new PDFService();\r\n        }\r\n        return PDFService.instance;\r\n    }\r\n\r\n    async generateMedicalRecordPDF(\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<Blob> {\r\n        const { includeWatermark = true, isEncrypted = false, password } = options;\r\n\r\n        // Create new PDF document\r\n        const pdf = new jsPDF();\r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n        const pageHeight = pdf.internal.pageSize.getHeight();\r\n\r\n        // Add CONFIDENTIAL watermark at the top\r\n        if (includeWatermark) {\r\n            pdf.setFontSize(24);\r\n            pdf.setTextColor(220, 53, 69); // Red color\r\n            pdf.setFont('helvetica', 'bold');\r\n\r\n            // Center the watermark at the top\r\n            const watermarkText = 'CONFIDENTIAL';\r\n            const textWidth = pdf.getTextWidth(watermarkText);\r\n            const xPosition = (pageWidth - textWidth) / 2;\r\n\r\n            pdf.text(watermarkText, xPosition, 20);\r\n\r\n            // Add a line under the watermark\r\n            pdf.setDrawColor(220, 53, 69);\r\n            pdf.setLineWidth(2);\r\n            pdf.line(20, 25, pageWidth - 20, 25);\r\n        }\r\n\r\n        // Reset text color to black for content\r\n        pdf.setTextColor(0, 0, 0);\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Header\r\n        let yPosition = includeWatermark ? 40 : 20;\r\n        pdf.setFontSize(18);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Medical Record', 20, yPosition);\r\n\r\n        yPosition += 15;\r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Patient Information\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Patient Information:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        const patientInfo = [\r\n            `Name: ${patient.name}`,\r\n            `Email: ${patient.email}`,\r\n            `Date of Birth: ${patient.dateOfBirth}`,\r\n            `Phone: ${patient.phoneNumber}`,\r\n            `Address: ${patient.address}`,\r\n            `Emergency Contact: ${patient.emergencyContact}`,\r\n            `Insurance: ${patient.insuranceProvider}`,\r\n            `Policy Number: ${patient.insurancePolicyNumber}`\r\n        ];\r\n\r\n        patientInfo.forEach(info => {\r\n            pdf.text(info, 20, yPosition);\r\n            yPosition += 6;\r\n        });\r\n\r\n        yPosition += 10;\r\n\r\n        // Medical Record Details\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Medical Record Details:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Prepare record content (encrypt if needed)\r\n        let recordContent = {\r\n            title: record.title,\r\n            description: record.description,\r\n            diagnosis: record.diagnosis,\r\n            prescription: record.prescription\r\n        };\r\n\r\n        if (isEncrypted && password) {\r\n            try {\r\n                // Use password-based encryption\r\n                recordContent = {\r\n                    title: this.encryptionService.encryptData(record.title),\r\n                    description: this.encryptionService.encryptData(record.description),\r\n                    diagnosis: this.encryptionService.encryptData(record.diagnosis),\r\n                    prescription: this.encryptionService.encryptData(record.prescription)\r\n                };\r\n            } catch (error) {\r\n                console.error('Encryption failed:', error);\r\n                // Fall back to unencrypted content\r\n            }\r\n        }\r\n\r\n        const recordDetails = [\r\n            `Record ID: ${record.id}`,\r\n            `Date: ${record.date}`,\r\n            `Doctor ID: ${record.doctorId}`,\r\n            `Title: ${recordContent.title}`,\r\n            ``,\r\n            `Description:`,\r\n            recordContent.description,\r\n            ``,\r\n            `Diagnosis:`,\r\n            recordContent.diagnosis,\r\n            ``,\r\n            `Prescription:`,\r\n            recordContent.prescription\r\n        ];\r\n\r\n        recordDetails.forEach(detail => {\r\n            if (detail === '') {\r\n                yPosition += 4;\r\n                return;\r\n            }\r\n\r\n            // Handle long text by wrapping\r\n            const lines = pdf.splitTextToSize(detail, pageWidth - 40);\r\n            lines.forEach((line: string) => {\r\n                if (yPosition > pageHeight - 20) {\r\n                    pdf.addPage();\r\n                    yPosition = 20;\r\n\r\n                    // Add watermark to new page if enabled\r\n                    if (includeWatermark) {\r\n                        pdf.setFontSize(24);\r\n                        pdf.setTextColor(220, 53, 69);\r\n                        pdf.setFont('helvetica', 'bold');\r\n                        const watermarkText = 'CONFIDENTIAL';\r\n                        const textWidth = pdf.getTextWidth(watermarkText);\r\n                        const xPosition = (pageWidth - textWidth) / 2;\r\n                        pdf.text(watermarkText, xPosition, 20);\r\n                        pdf.setDrawColor(220, 53, 69);\r\n                        pdf.setLineWidth(2);\r\n                        pdf.line(20, 25, pageWidth - 20, 25);\r\n                        pdf.setTextColor(0, 0, 0);\r\n                        pdf.setFont('helvetica', 'normal');\r\n                        pdf.setFontSize(12);\r\n                        yPosition = 40;\r\n                    }\r\n                }\r\n\r\n                pdf.text(line, 20, yPosition);\r\n                yPosition += 6;\r\n            });\r\n        });\r\n\r\n        yPosition += 15;\r\n\r\n        // Blockchain & Security Information\r\n        if (yPosition > pageHeight - 40) {\r\n            pdf.addPage();\r\n            yPosition = includeWatermark ? 40 : 20;\r\n        }\r\n\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Blockchain & Security Information:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        const securityInfo = [\r\n            `Blockchain Hash: ${record.blockchainHash}`,\r\n            `IPFS Hash: ${record.ipfsHash}`,\r\n            `NFT Token ID: ${record.nftTokenId}`,\r\n            `Verified: ${record.isVerified ? 'Yes' : 'No'}`,\r\n            `Encrypted: ${record.isEncrypted ? 'Yes' : 'No'}`,\r\n            `Access Permissions: ${record.accessPermissions.join(', ')}`\r\n        ];\r\n\r\n        securityInfo.forEach(info => {\r\n            const lines = pdf.splitTextToSize(info, pageWidth - 40);\r\n            lines.forEach((line: string) => {\r\n                pdf.text(line, 20, yPosition);\r\n                yPosition += 6;\r\n            });\r\n        });\r\n\r\n        // Footer\r\n        yPosition = pageHeight - 30;\r\n        pdf.setFontSize(10);\r\n        pdf.setTextColor(128, 128, 128);\r\n        pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPosition);\r\n        if (isEncrypted) {\r\n            pdf.text('This document contains encrypted medical information.', 20, yPosition + 6);\r\n        }\r\n\r\n        // Convert to blob\r\n        const pdfBlob = pdf.output('blob');\r\n        return pdfBlob;\r\n    }\r\n\r\n    async downloadMedicalRecordPDF(\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<void> {\r\n        try {\r\n            const pdfBlob = await this.generateMedicalRecordPDF(record, patient, options);\r\n\r\n            // Create download link\r\n            const url = URL.createObjectURL(pdfBlob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n\r\n            const encryptionSuffix = options.isEncrypted ? '_encrypted' : '';\r\n            const filename = `medical_record_${record.id}_${patient.name.replace(/\\s+/g, '_')}${encryptionSuffix}.pdf`;\r\n            link.download = filename;\r\n\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            // Clean up\r\n            URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            console.error('Error generating PDF:', error);\r\n            throw new Error('Failed to generate PDF document');\r\n        }\r\n    }\r\n\r\n    async generateBatchPDF(\r\n        records: MedicalRecord[],\r\n        patients: Patient[],\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<Blob> {\r\n        const pdf = new jsPDF();\r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n\r\n        // Add CONFIDENTIAL watermark at the top\r\n        if (options.includeWatermark !== false) {\r\n            pdf.setFontSize(24);\r\n            pdf.setTextColor(220, 53, 69);\r\n            pdf.setFont('helvetica', 'bold');\r\n            const watermarkText = 'CONFIDENTIAL - BATCH MEDICAL RECORDS';\r\n            const textWidth = pdf.getTextWidth(watermarkText);\r\n            const xPosition = Math.max(10, (pageWidth - textWidth) / 2);\r\n            pdf.text(watermarkText, xPosition, 20);\r\n            pdf.setDrawColor(220, 53, 69);\r\n            pdf.setLineWidth(2);\r\n            pdf.line(20, 25, pageWidth - 20, 25);\r\n        }\r\n\r\n        // Process each record\r\n        for (let i = 0; i < records.length; i++) {\r\n            const record = records[i];\r\n            const patient = patients.find(p => p.id === record.patientId);\r\n\r\n            if (!patient) continue;\r\n\r\n            if (i > 0) {\r\n                pdf.addPage();\r\n            }\r\n\r\n            // Generate individual record content\r\n            await this.addRecordToPDF(pdf, record, patient, options);\r\n        }\r\n\r\n        return pdf.output('blob');\r\n    }\r\n\r\n    private async addRecordToPDF(\r\n        pdf: jsPDF,\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: { includeWatermark?: boolean; isEncrypted?: boolean; password?: string }\r\n    ): Promise<void> {\r\n        let yPosition = options.includeWatermark !== false ? 40 : 20;\r\n\r\n        // Record header\r\n        pdf.setFontSize(16);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.setTextColor(0, 0, 0);\r\n        pdf.text(`Medical Record - ${patient.name}`, 20, yPosition);\r\n        yPosition += 15;\r\n\r\n        // Add record content similar to the main method\r\n        // (Implementation details similar to generateMedicalRecordPDF)\r\n    }\r\n}\r\n\r\nexport const pdfService = PDFService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}