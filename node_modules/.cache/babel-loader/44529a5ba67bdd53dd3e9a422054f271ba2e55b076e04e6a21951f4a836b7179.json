{"ast":null,"code":"import CryptoJS from'crypto-js';class EncryptionService{constructor(){this.jobs=[];}// Simulate PBKDF2 key derivation (similar to Python version)\nderiveKey(password,salt){return CryptoJS.PBKDF2(password,salt,{keySize:256/32,iterations:100000}).toString();}// Encrypt file content\nasync encryptData(data,password){try{const salt=CryptoJS.lib.WordArray.random(128/8).toString();const key=this.deriveKey(password,salt);const encrypted=CryptoJS.AES.encrypt(data,key).toString();return{encrypted,salt};}catch(error){throw new Error(\"Encryption failed: \".concat(error));}}// Decrypt file content\nasync decryptData(encryptedData,password,salt){try{const key=this.deriveKey(password,salt);const bytes=CryptoJS.AES.decrypt(encryptedData,key);const decrypted=bytes.toString(CryptoJS.enc.Utf8);if(!decrypted){throw new Error('Invalid password or corrupted data');}return decrypted;}catch(error){throw new Error(\"Decryption failed: \".concat(error));}}// Handle file encryption (browser-based)\nasync encryptFile(file,password){const jobId=\"enc_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));const job={id:jobId,fileName:file.name,operation:'encrypt',status:'processing',timestamp:new Date().toISOString()};this.jobs.push(job);try{const text=await file.text();const{encrypted,salt}=await this.encryptData(text,password);// Create download blob\nconst encryptedFile=new Blob([JSON.stringify({encrypted,salt,originalName:file.name})],{type:'application/json'});const url=URL.createObjectURL(encryptedFile);job.status='completed';job.outputPath=url;return job;}catch(error){job.status='failed';job.error=error instanceof Error?error.message:'Unknown error';throw error;}}// Handle file decryption (browser-based)\nasync decryptFile(file,password){const jobId=\"dec_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9));const job={id:jobId,fileName:file.name,operation:'decrypt',status:'processing',timestamp:new Date().toISOString()};this.jobs.push(job);try{const text=await file.text();const{encrypted,salt,originalName}=JSON.parse(text);const decrypted=await this.decryptData(encrypted,password,salt);// Create download blob\nconst decryptedFile=new Blob([decrypted],{type:'text/plain'});const url=URL.createObjectURL(decryptedFile);job.status='completed';job.outputPath=url;job.fileName=originalName||'decrypted_file.txt';return job;}catch(error){job.status='failed';job.error=error instanceof Error?error.message:'Unknown error';throw error;}}// Get all encryption jobs\ngetJobs(){return this.jobs;}// Clear completed jobs\nclearCompletedJobs(){this.jobs=this.jobs.filter(job=>job.status==='processing');}// Generate secure random password\ngenerateSecurePassword(){let length=arguments.length>0&&arguments[0]!==undefined?arguments[0]:16;const charset='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';let password='';for(let i=0;i<length;i++){password+=charset.charAt(Math.floor(Math.random()*charset.length));}return password;}// Hash data for integrity verification\nhashData(data){return CryptoJS.SHA256(data).toString();}}export const encryptionService=new EncryptionService();","map":{"version":3,"names":["CryptoJS","EncryptionService","constructor","jobs","deriveKey","password","salt","PBKDF2","keySize","iterations","toString","encryptData","data","lib","WordArray","random","key","encrypted","AES","encrypt","error","Error","concat","decryptData","encryptedData","bytes","decrypt","decrypted","enc","Utf8","encryptFile","file","jobId","Date","now","Math","substr","job","id","fileName","name","operation","status","timestamp","toISOString","push","text","encryptedFile","Blob","JSON","stringify","originalName","type","url","URL","createObjectURL","outputPath","message","decryptFile","parse","decryptedFile","getJobs","clearCompletedJobs","filter","generateSecurePassword","length","arguments","undefined","charset","i","charAt","floor","hashData","SHA256","encryptionService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/encryptionService.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\nimport { EncryptionJob } from '../types';\r\n\r\nclass EncryptionService {\r\n    private jobs: EncryptionJob[] = [];\r\n\r\n    // Simulate PBKDF2 key derivation (similar to Python version)\r\n    private deriveKey(password: string, salt: string): string {\r\n        return CryptoJS.PBKDF2(password, salt, {\r\n            keySize: 256 / 32,\r\n            iterations: 100000\r\n        }).toString();\r\n    }\r\n\r\n    // Encrypt file content\r\n    async encryptData(data: string, password: string): Promise<{ encrypted: string; salt: string }> {\r\n        try {\r\n            const salt = CryptoJS.lib.WordArray.random(128 / 8).toString();\r\n            const key = this.deriveKey(password, salt);\r\n            const encrypted = CryptoJS.AES.encrypt(data, key).toString();\r\n\r\n            return { encrypted, salt };\r\n        } catch (error) {\r\n            throw new Error(`Encryption failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Decrypt file content\r\n    async decryptData(encryptedData: string, password: string, salt: string): Promise<string> {\r\n        try {\r\n            const key = this.deriveKey(password, salt);\r\n            const bytes = CryptoJS.AES.decrypt(encryptedData, key);\r\n            const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n            if (!decrypted) {\r\n                throw new Error('Invalid password or corrupted data');\r\n            }\r\n\r\n            return decrypted;\r\n        } catch (error) {\r\n            throw new Error(`Decryption failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Handle file encryption (browser-based)\r\n    async encryptFile(file: File, password: string): Promise<EncryptionJob> {\r\n        const jobId = `enc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n        const job: EncryptionJob = {\r\n            id: jobId,\r\n            fileName: file.name,\r\n            operation: 'encrypt',\r\n            status: 'processing',\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        this.jobs.push(job);\r\n\r\n        try {\r\n            const text = await file.text();\r\n            const { encrypted, salt } = await this.encryptData(text, password);\r\n\r\n            // Create download blob\r\n            const encryptedFile = new Blob([JSON.stringify({ encrypted, salt, originalName: file.name })], {\r\n                type: 'application/json'\r\n            });\r\n\r\n            const url = URL.createObjectURL(encryptedFile);\r\n\r\n            job.status = 'completed';\r\n            job.outputPath = url;\r\n\r\n            return job;\r\n        } catch (error) {\r\n            job.status = 'failed';\r\n            job.error = error instanceof Error ? error.message : 'Unknown error';\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Handle file decryption (browser-based)\r\n    async decryptFile(file: File, password: string): Promise<EncryptionJob> {\r\n        const jobId = `dec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n        const job: EncryptionJob = {\r\n            id: jobId,\r\n            fileName: file.name,\r\n            operation: 'decrypt',\r\n            status: 'processing',\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        this.jobs.push(job);\r\n\r\n        try {\r\n            const text = await file.text();\r\n            const { encrypted, salt, originalName } = JSON.parse(text);\r\n\r\n            const decrypted = await this.decryptData(encrypted, password, salt);\r\n\r\n            // Create download blob\r\n            const decryptedFile = new Blob([decrypted], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(decryptedFile);\r\n\r\n            job.status = 'completed';\r\n            job.outputPath = url;\r\n            job.fileName = originalName || 'decrypted_file.txt';\r\n\r\n            return job;\r\n        } catch (error) {\r\n            job.status = 'failed';\r\n            job.error = error instanceof Error ? error.message : 'Unknown error';\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Get all encryption jobs\r\n    getJobs(): EncryptionJob[] {\r\n        return this.jobs;\r\n    }\r\n\r\n    // Clear completed jobs\r\n    clearCompletedJobs(): void {\r\n        this.jobs = this.jobs.filter(job => job.status === 'processing');\r\n    }\r\n\r\n    // Generate secure random password\r\n    generateSecurePassword(length: number = 16): string {\r\n        const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r\n        let password = '';\r\n        for (let i = 0; i < length; i++) {\r\n            password += charset.charAt(Math.floor(Math.random() * charset.length));\r\n        }\r\n        return password;\r\n    }\r\n\r\n    // Hash data for integrity verification\r\n    hashData(data: string): string {\r\n        return CryptoJS.SHA256(data).toString();\r\n    }\r\n}\r\n\r\nexport const encryptionService = new EncryptionService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}