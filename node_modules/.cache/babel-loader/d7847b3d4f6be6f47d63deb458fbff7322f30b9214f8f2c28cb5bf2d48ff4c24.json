{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";class ClipboardMonitorService{constructor(){this.monitor={isActive:false,detectedAddresses:[],alertCount:0,lastCheck:new Date().toISOString()};this.listeners=[];this.intervalId=null;this.lastClipboardContent='';// Ethereum address pattern\nthis.ETH_ADDRESS_PATTERN=/^0x[a-fA-F0-9]{40}$/;// Healthcare record ID pattern (custom for your system)\nthis.HEALTH_RECORD_PATTERN=/^HR-[A-Z0-9]{8}-[A-Z0-9]{4}$/;// Bitcoin address pattern\nthis.BTC_ADDRESS_PATTERN=/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/;}// Start monitoring clipboard\nasync startMonitoring(){if(this.monitor.isActive)return;try{// Check if clipboard API is available\nif(!navigator.clipboard||!navigator.clipboard.readText){throw new Error('Clipboard API not available in this browser');}this.monitor.isActive=true;this.monitor.lastCheck=new Date().toISOString();// Start monitoring every 2 seconds\nthis.intervalId=setInterval(()=>{this.checkClipboard();},2000);console.log('Clipboard monitoring started');}catch(error){this.monitor.isActive=false;throw new Error(\"Failed to start clipboard monitoring: \".concat(error));}}// Stop monitoring clipboard\nstopMonitoring(){if(this.intervalId){clearInterval(this.intervalId);this.intervalId=null;}this.monitor.isActive=false;console.log('Clipboard monitoring stopped');}// Check clipboard content\nasync checkClipboard(){try{const clipboardText=await navigator.clipboard.readText();if(clipboardText!==this.lastClipboardContent&&clipboardText.trim()){this.lastClipboardContent=clipboardText;this.monitor.lastCheck=new Date().toISOString();await this.analyzeClipboardContent(clipboardText);}}catch(error){// Handle clipboard access errors silently (user may have denied permission)\nconsole.warn('Clipboard access denied or failed:',error);}}// Analyze clipboard content for sensitive data\nasync analyzeClipboardContent(content){const trimmedContent=content.trim();// Check for Ethereum addresses\nif(this.ETH_ADDRESS_PATTERN.test(trimmedContent)){await this.handleSensitiveData('ethereum_address',trimmedContent);}// Check for Bitcoin addresses\nelse if(this.BTC_ADDRESS_PATTERN.test(trimmedContent)){await this.handleSensitiveData('bitcoin_address',trimmedContent);}// Check for health record IDs\nelse if(this.HEALTH_RECORD_PATTERN.test(trimmedContent)){await this.handleSensitiveData('health_record_id',trimmedContent);}// Check for potential private keys (long hex strings)\nelse if(this.isPotentialPrivateKey(trimmedContent)){await this.handleSensitiveData('potential_private_key','***REDACTED***');}// Check for potential seed phrases\nelse if(this.isPotentialSeedPhrase(trimmedContent)){await this.handleSensitiveData('potential_seed_phrase','***REDACTED***');}}// Handle detection of sensitive data\nasync handleSensitiveData(type,content){// Set safe address if this is the first crypto address detected\nif((type==='ethereum_address'||type==='bitcoin_address')&&!this.monitor.safeAddress){this.monitor.safeAddress=content;return;// Don't alert for the first address\n}// Check if this is a different address than the safe one\nif((type==='ethereum_address'||type==='bitcoin_address')&&this.monitor.safeAddress&&content!==this.monitor.safeAddress){await this.triggerSecurityAlert({type:'clipboard_hijack',description:\"Potential clipboard hijacking detected: \".concat(type,\" changed from safe address\"),content:content,originalType:type});}// Alert for private keys and seed phrases\nif(type==='potential_private_key'||type==='potential_seed_phrase'){await this.triggerSecurityAlert({type:'clipboard_hijack',description:\"Sensitive data detected in clipboard: \".concat(type),content:content,originalType:type});}// Store detected address\nif(type==='ethereum_address'||type==='bitcoin_address'){this.monitor.detectedAddresses.push(content);// Keep only last 10 addresses\nif(this.monitor.detectedAddresses.length>10){this.monitor.detectedAddresses=this.monitor.detectedAddresses.slice(-10);}}}// Check if content looks like a private key\nisPotentialPrivateKey(content){// 64 character hex string (typical private key)\nreturn /^[a-fA-F0-9]{64}$/.test(content);}// Check if content looks like a seed phrase\nisPotentialSeedPhrase(content){const words=content.toLowerCase().split(/\\s+/);return words.length>=12&&words.length<=24&&words.every(word=>/^[a-z]+$/.test(word));}// Trigger security alert\nasync triggerSecurityAlert(details){this.monitor.alertCount++;const securityEvent={id:\"clip_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9)),type:'clipboard_hijack',description:details.description,severity:details.originalType.includes('private_key')||details.originalType.includes('seed_phrase')?'critical':'high',timestamp:new Date().toISOString(),resolved:false,metadata:{detectedType:details.originalType,contentPreview:details.content.length>10?details.content.substring(0,10)+'...':details.content}};// Notify all listeners\nthis.listeners.forEach(listener=>listener(securityEvent));// Browser notification if permission granted\nif(Notification.permission==='granted'){new Notification('Security Alert - EMRChains',{body:details.description,icon:'/favicon.ico',tag:'clipboard-security'});}// Audio alert\nthis.playAlertSound();}// Play alert sound\nplayAlertSound(){try{const audioContext=new(window.AudioContext||window.webkitAudioContext)();const oscillator=audioContext.createOscillator();const gainNode=audioContext.createGain();oscillator.connect(gainNode);gainNode.connect(audioContext.destination);oscillator.frequency.setValueAtTime(800,audioContext.currentTime);gainNode.gain.setValueAtTime(0.1,audioContext.currentTime);oscillator.start();oscillator.stop(audioContext.currentTime+0.5);}catch(error){console.warn('Could not play alert sound:',error);}}// Subscribe to security events\nsubscribe(listener){this.listeners.push(listener);return()=>{this.listeners=this.listeners.filter(l=>l!==listener);};}// Get current monitor status\ngetStatus(){return _objectSpread({},this.monitor);}// Clear detected addresses\nclearDetectedAddresses(){this.monitor.detectedAddresses=[];this.monitor.alertCount=0;}// Set safe address manually\nsetSafeAddress(address){this.monitor.safeAddress=address;}// Request notification permission\nasync requestNotificationPermission(){if('Notification'in window){const permission=await Notification.requestPermission();return permission==='granted';}return false;}}export const clipboardMonitorService=new ClipboardMonitorService();","map":{"version":3,"names":["ClipboardMonitorService","constructor","monitor","isActive","detectedAddresses","alertCount","lastCheck","Date","toISOString","listeners","intervalId","lastClipboardContent","ETH_ADDRESS_PATTERN","HEALTH_RECORD_PATTERN","BTC_ADDRESS_PATTERN","startMonitoring","navigator","clipboard","readText","Error","setInterval","checkClipboard","console","log","error","concat","stopMonitoring","clearInterval","clipboardText","trim","analyzeClipboardContent","warn","content","trimmedContent","test","handleSensitiveData","isPotentialPrivateKey","isPotentialSeedPhrase","type","safeAddress","triggerSecurityAlert","description","originalType","push","length","slice","words","toLowerCase","split","every","word","details","securityEvent","id","now","Math","random","toString","substr","severity","includes","timestamp","resolved","metadata","detectedType","contentPreview","substring","forEach","listener","Notification","permission","body","icon","tag","playAlertSound","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","setValueAtTime","currentTime","gain","start","stop","subscribe","filter","l","getStatus","_objectSpread","clearDetectedAddresses","setSafeAddress","address","requestNotificationPermission","requestPermission","clipboardMonitorService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/clipboardMonitorService.ts"],"sourcesContent":["import { ClipboardMonitor, SecurityEvent } from '../types';\r\n\r\nclass ClipboardMonitorService {\r\n    private monitor: ClipboardMonitor = {\r\n        isActive: false,\r\n        detectedAddresses: [],\r\n        alertCount: 0,\r\n        lastCheck: new Date().toISOString()\r\n    };\r\n\r\n    private listeners: ((event: SecurityEvent) => void)[] = [];\r\n    private intervalId: NodeJS.Timeout | null = null;\r\n    private lastClipboardContent = '';\r\n\r\n    // Ethereum address pattern\r\n    private readonly ETH_ADDRESS_PATTERN = /^0x[a-fA-F0-9]{40}$/;\r\n\r\n    // Healthcare record ID pattern (custom for your system)\r\n    private readonly HEALTH_RECORD_PATTERN = /^HR-[A-Z0-9]{8}-[A-Z0-9]{4}$/;\r\n\r\n    // Bitcoin address pattern\r\n    private readonly BTC_ADDRESS_PATTERN = /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/;\r\n\r\n    // Start monitoring clipboard\r\n    async startMonitoring(): Promise<void> {\r\n        if (this.monitor.isActive) return;\r\n\r\n        try {\r\n            // Check if clipboard API is available\r\n            if (!navigator.clipboard || !navigator.clipboard.readText) {\r\n                throw new Error('Clipboard API not available in this browser');\r\n            }\r\n\r\n            this.monitor.isActive = true;\r\n            this.monitor.lastCheck = new Date().toISOString();\r\n\r\n            // Start monitoring every 2 seconds\r\n            this.intervalId = setInterval(() => {\r\n                this.checkClipboard();\r\n            }, 2000);\r\n\r\n            console.log('Clipboard monitoring started');\r\n        } catch (error) {\r\n            this.monitor.isActive = false;\r\n            throw new Error(`Failed to start clipboard monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Stop monitoring clipboard\r\n    stopMonitoring(): void {\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n\r\n        this.monitor.isActive = false;\r\n        console.log('Clipboard monitoring stopped');\r\n    }\r\n\r\n    // Check clipboard content\r\n    private async checkClipboard(): Promise<void> {\r\n        try {\r\n            const clipboardText = await navigator.clipboard.readText();\r\n\r\n            if (clipboardText !== this.lastClipboardContent && clipboardText.trim()) {\r\n                this.lastClipboardContent = clipboardText;\r\n                this.monitor.lastCheck = new Date().toISOString();\r\n\r\n                await this.analyzeClipboardContent(clipboardText);\r\n            }\r\n        } catch (error) {\r\n            // Handle clipboard access errors silently (user may have denied permission)\r\n            console.warn('Clipboard access denied or failed:', error);\r\n        }\r\n    }\r\n\r\n    // Analyze clipboard content for sensitive data\r\n    private async analyzeClipboardContent(content: string): Promise<void> {\r\n        const trimmedContent = content.trim();\r\n\r\n        // Check for Ethereum addresses\r\n        if (this.ETH_ADDRESS_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('ethereum_address', trimmedContent);\r\n        }\r\n\r\n        // Check for Bitcoin addresses\r\n        else if (this.BTC_ADDRESS_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('bitcoin_address', trimmedContent);\r\n        }\r\n\r\n        // Check for health record IDs\r\n        else if (this.HEALTH_RECORD_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('health_record_id', trimmedContent);\r\n        }\r\n\r\n        // Check for potential private keys (long hex strings)\r\n        else if (this.isPotentialPrivateKey(trimmedContent)) {\r\n            await this.handleSensitiveData('potential_private_key', '***REDACTED***');\r\n        }\r\n\r\n        // Check for potential seed phrases\r\n        else if (this.isPotentialSeedPhrase(trimmedContent)) {\r\n            await this.handleSensitiveData('potential_seed_phrase', '***REDACTED***');\r\n        }\r\n    }\r\n\r\n    // Handle detection of sensitive data\r\n    private async handleSensitiveData(type: string, content: string): Promise<void> {\r\n        // Set safe address if this is the first crypto address detected\r\n        if ((type === 'ethereum_address' || type === 'bitcoin_address') && !this.monitor.safeAddress) {\r\n            this.monitor.safeAddress = content;\r\n            return; // Don't alert for the first address\r\n        }\r\n\r\n        // Check if this is a different address than the safe one\r\n        if ((type === 'ethereum_address' || type === 'bitcoin_address') &&\r\n            this.monitor.safeAddress && content !== this.monitor.safeAddress) {\r\n\r\n            await this.triggerSecurityAlert({\r\n                type: 'clipboard_hijack',\r\n                description: `Potential clipboard hijacking detected: ${type} changed from safe address`,\r\n                content: content,\r\n                originalType: type\r\n            });\r\n        }\r\n\r\n        // Alert for private keys and seed phrases\r\n        if (type === 'potential_private_key' || type === 'potential_seed_phrase') {\r\n            await this.triggerSecurityAlert({\r\n                type: 'clipboard_hijack',\r\n                description: `Sensitive data detected in clipboard: ${type}`,\r\n                content: content,\r\n                originalType: type\r\n            });\r\n        }\r\n\r\n        // Store detected address\r\n        if (type === 'ethereum_address' || type === 'bitcoin_address') {\r\n            this.monitor.detectedAddresses.push(content);\r\n            // Keep only last 10 addresses\r\n            if (this.monitor.detectedAddresses.length > 10) {\r\n                this.monitor.detectedAddresses = this.monitor.detectedAddresses.slice(-10);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check if content looks like a private key\r\n    private isPotentialPrivateKey(content: string): boolean {\r\n        // 64 character hex string (typical private key)\r\n        return /^[a-fA-F0-9]{64}$/.test(content);\r\n    }\r\n\r\n    // Check if content looks like a seed phrase\r\n    private isPotentialSeedPhrase(content: string): boolean {\r\n        const words = content.toLowerCase().split(/\\s+/);\r\n        return words.length >= 12 && words.length <= 24 &&\r\n            words.every(word => /^[a-z]+$/.test(word));\r\n    }\r\n\r\n    // Trigger security alert\r\n    private async triggerSecurityAlert(details: {\r\n        type: string;\r\n        description: string;\r\n        content: string;\r\n        originalType: string;\r\n    }): Promise<void> {\r\n        this.monitor.alertCount++;\r\n\r\n        const securityEvent: SecurityEvent = {\r\n            id: `clip_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            type: 'clipboard_hijack',\r\n            description: details.description,\r\n            severity: details.originalType.includes('private_key') || details.originalType.includes('seed_phrase')\r\n                ? 'critical' : 'high',\r\n            timestamp: new Date().toISOString(),\r\n            resolved: false,\r\n            metadata: {\r\n                detectedType: details.originalType,\r\n                contentPreview: details.content.length > 10 ?\r\n                    details.content.substring(0, 10) + '...' : details.content\r\n            }\r\n        };\r\n\r\n        // Notify all listeners\r\n        this.listeners.forEach(listener => listener(securityEvent));\r\n\r\n        // Browser notification if permission granted\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Security Alert - EMRChains', {\r\n                body: details.description,\r\n                icon: '/favicon.ico',\r\n                tag: 'clipboard-security'\r\n            });\r\n        }\r\n\r\n        // Audio alert\r\n        this.playAlertSound();\r\n    }\r\n\r\n    // Play alert sound\r\n    private playAlertSound(): void {\r\n        try {\r\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n            const oscillator = audioContext.createOscillator();\r\n            const gainNode = audioContext.createGain();\r\n\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(audioContext.destination);\r\n\r\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\r\n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\r\n\r\n            oscillator.start();\r\n            oscillator.stop(audioContext.currentTime + 0.5);\r\n        } catch (error) {\r\n            console.warn('Could not play alert sound:', error);\r\n        }\r\n    }\r\n\r\n    // Subscribe to security events\r\n    subscribe(listener: (event: SecurityEvent) => void): () => void {\r\n        this.listeners.push(listener);\r\n        return () => {\r\n            this.listeners = this.listeners.filter(l => l !== listener);\r\n        };\r\n    }\r\n\r\n    // Get current monitor status\r\n    getStatus(): ClipboardMonitor {\r\n        return { ...this.monitor };\r\n    }\r\n\r\n    // Clear detected addresses\r\n    clearDetectedAddresses(): void {\r\n        this.monitor.detectedAddresses = [];\r\n        this.monitor.alertCount = 0;\r\n    }\r\n\r\n    // Set safe address manually\r\n    setSafeAddress(address: string): void {\r\n        this.monitor.safeAddress = address;\r\n    }\r\n\r\n    // Request notification permission\r\n    async requestNotificationPermission(): Promise<boolean> {\r\n        if ('Notification' in window) {\r\n            const permission = await Notification.requestPermission();\r\n            return permission === 'granted';\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const clipboardMonitorService = new ClipboardMonitorService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}