{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";export class EnhancedBlockchainService{constructor(){this.contractAddresses={healthRecords:'0x1234567890abcdef1234567890abcdef12345678',nftContract:'0x9876543210fedcba9876543210fedcba98765432',insurance:'0xabcdef1234567890abcdef1234567890abcdef12',dataAccess:'0x5555666677778888999900001111222233334444'};this.networkConfig={name:'Ethereum Mainnet',chainId:1,rpcUrl:'https://mainnet.infura.io/v3/your-project-id',blockExplorer:'https://etherscan.io'};this.isConnected=false;this.currentAccount=null;}// Connect to wallet\nasync connectWallet(){try{if(typeof window.ethereum!=='undefined'){const accounts=await window.ethereum.request({method:'eth_requestAccounts'});this.currentAccount=accounts[0];this.isConnected=true;return{success:true,account:accounts[0]};}else{// Simulate wallet connection for demo\nthis.currentAccount='0x742d35cc6cc25532ecd8c2dd1e26d6a78e24b4d4';this.isConnected=true;return{success:true,account:this.currentAccount};}}catch(error){return{success:false,error:error instanceof Error?error.message:'Unknown error'};}}// Upload file to IPFS (simulated)\nasync uploadToIPFS(file){return new Promise(resolve=>{setTimeout(()=>{const mockHash=\"Qm\".concat(Math.random().toString(36).substring(2,34));resolve({hash:mockHash,url:\"https://ipfs.io/ipfs/\".concat(mockHash),size:file.size,type:file.type});},2000);});}// Store medical record on blockchain\nasync storeHealthRecord(record){if(!this.isConnected){throw new Error('Wallet not connected');}// Simulate blockchain transaction\nreturn new Promise(resolve=>{setTimeout(()=>{const txHash=\"0x\".concat(Math.random().toString(16).substring(2,66));resolve({hash:txHash,from:this.currentAccount,to:this.contractAddresses.healthRecords,value:'0',gasUsed:'21000',gasPrice:'20000000000',blockNumber:Math.floor(Math.random()*1000000)+18000000,timestamp:new Date().toISOString(),status:'confirmed'});},3000);});}// Mint NFT for health record\nasync mintHealthNFT(record,metadata){if(!this.isConnected){throw new Error('Wallet not connected');}return new Promise(resolve=>{setTimeout(()=>{const tokenId=\"HEALTH-NFT-\".concat(Date.now());const nft={id:\"nft-\".concat(Date.now()),tokenId,patientId:record.patientId,recordId:record.id,name:\"\".concat(record.title,\" - NFT\"),description:\"Blockchain-verified health record: \".concat(record.description),imageUrl:\"https://via.placeholder.com/400x400/4F46E5/FFFFFF?text=\".concat(tokenId),metadataUri:\"ipfs://Qm\".concat(Math.random().toString(36).substring(2,34)),contractAddress:this.contractAddresses.nftContract,blockchainNetwork:'Ethereum',mintDate:new Date().toISOString(),currentOwner:record.patientId,isTransferable:false,accessLevel:'patient_doctor'};resolve(nft);},4000);});}// Create smart contract for data access\nasync createDataAccessContract(patientId,doctorId,recordIds,expiryDate){if(!this.isConnected){throw new Error('Wallet not connected');}return new Promise(resolve=>{setTimeout(()=>{const contract={id:\"contract-\".concat(Date.now()),address:\"0x\".concat(Math.random().toString(16).substring(2,42)),type:'data_access',creator:patientId,participants:[patientId,doctorId],terms:{accessScope:recordIds,expiryDate,purpose:'Medical consultation and treatment'},status:'active',createdAt:new Date().toISOString(),blockchainTxId:\"0x\".concat(Math.random().toString(16).substring(2,66)),isExecuted:false};resolve(contract);},2500);});}// Process insurance claim on blockchain\nasync processInsuranceClaim(claim){if(!this.isConnected){throw new Error('Wallet not connected');}return new Promise(resolve=>{setTimeout(()=>{const txHash=\"0x\".concat(Math.random().toString(16).substring(2,66));resolve({hash:txHash,from:this.currentAccount,to:this.contractAddresses.insurance,value:claim.amount.toString(),gasUsed:'45000',gasPrice:'25000000000',blockNumber:Math.floor(Math.random()*1000000)+18000000,timestamp:new Date().toISOString(),status:'confirmed'});},3500);});}// Verify record integrity\nasync verifyRecordIntegrity(record){return new Promise(resolve=>{setTimeout(()=>{// Simulate verification process\nconst isValid=Math.random()>0.1;// 90% success rate\nresolve({isValid,details:isValid?'Record hash matches blockchain data. Integrity verified.':'Warning: Record hash mismatch detected. Data may have been tampered with.'});},1500);});}// Get transaction details\nasync getTransactionDetails(txHash){return new Promise(resolve=>{setTimeout(()=>{if(Math.random()>0.2){// 80% success rate\nresolve({hash:txHash,from:'0x1234567890abcdef1234567890abcdef12345678',to:'0x9876543210fedcba9876543210fedcba98765432',value:'0',gasUsed:'21000',gasPrice:'20000000000',blockNumber:Math.floor(Math.random()*1000000)+18000000,timestamp:new Date().toISOString(),status:'confirmed'});}else{resolve(null);}},1000);});}// Grant/revoke data access\nasync updateDataAccess(patientId,providerId,recordIds,action){if(!this.isConnected){throw new Error('Wallet not connected');}return new Promise(resolve=>{setTimeout(()=>{const txHash=\"0x\".concat(Math.random().toString(16).substring(2,66));resolve({hash:txHash,from:this.currentAccount,to:this.contractAddresses.dataAccess,value:'0',gasUsed:'35000',gasPrice:'22000000000',blockNumber:Math.floor(Math.random()*1000000)+18000000,timestamp:new Date().toISOString(),status:'confirmed'});},2000);});}// Get NFT metadata\nasync getNFTMetadata(tokenId){return new Promise(resolve=>{setTimeout(()=>{resolve({name:\"Health Record NFT #\".concat(tokenId),description:'Blockchain-verified medical record',image:\"https://via.placeholder.com/400x400/4F46E5/FFFFFF?text=\".concat(tokenId),attributes:[{trait_type:'Record Type',value:'Medical Examination'},{trait_type:'Verification',value:'Blockchain Verified'},{trait_type:'Privacy',value:'HIPAA Compliant'},{trait_type:'Network',value:'Ethereum'}],properties:{date:new Date().toISOString(),encrypted:true,transferable:false}});},1000);});}// Get network stats\ngetNetworkInfo(){return _objectSpread(_objectSpread({},this.networkConfig),{},{isConnected:this.isConnected,currentAccount:this.currentAccount,contractAddresses:this.contractAddresses});}// Estimate gas for transaction\nasync estimateGas(operation){const gasEstimates={store_record:{gasLimit:'21000',gasPrice:'20000000000'},mint_nft:{gasLimit:'85000',gasPrice:'25000000000'},access_grant:{gasLimit:'35000',gasPrice:'22000000000'},insurance_claim:{gasLimit:'45000',gasPrice:'25000000000'}};const estimate=gasEstimates[operation];const costInWei=BigInt(estimate.gasLimit)*BigInt(estimate.gasPrice);const costInEth=(Number(costInWei)/1e18).toFixed(6);return _objectSpread(_objectSpread({},estimate),{},{estimatedCost:\"\".concat(costInEth,\" ETH\")});}// Disconnect wallet\ndisconnect(){this.isConnected=false;this.currentAccount=null;}}export default EnhancedBlockchainService;","map":{"version":3,"names":["EnhancedBlockchainService","constructor","contractAddresses","healthRecords","nftContract","insurance","dataAccess","networkConfig","name","chainId","rpcUrl","blockExplorer","isConnected","currentAccount","connectWallet","window","ethereum","accounts","request","method","success","account","error","Error","message","uploadToIPFS","file","Promise","resolve","setTimeout","mockHash","concat","Math","random","toString","substring","hash","url","size","type","storeHealthRecord","record","txHash","from","to","value","gasUsed","gasPrice","blockNumber","floor","timestamp","Date","toISOString","status","mintHealthNFT","metadata","tokenId","now","nft","id","patientId","recordId","title","description","imageUrl","metadataUri","contractAddress","blockchainNetwork","mintDate","currentOwner","isTransferable","accessLevel","createDataAccessContract","doctorId","recordIds","expiryDate","contract","address","creator","participants","terms","accessScope","purpose","createdAt","blockchainTxId","isExecuted","processInsuranceClaim","claim","amount","verifyRecordIntegrity","isValid","details","getTransactionDetails","updateDataAccess","providerId","action","getNFTMetadata","image","attributes","trait_type","properties","date","encrypted","transferable","getNetworkInfo","_objectSpread","estimateGas","operation","gasEstimates","store_record","gasLimit","mint_nft","access_grant","insurance_claim","estimate","costInWei","BigInt","costInEth","Number","toFixed","estimatedCost","disconnect"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/enhancedBlockchain.ts"],"sourcesContent":["import { User, MedicalRecord, NFTHealthRecord, InsuranceClaim, SmartContract } from '../types';\r\n\r\nexport interface BlockchainTransaction {\r\n    hash: string;\r\n    from: string;\r\n    to: string;\r\n    value: string;\r\n    gasUsed: string;\r\n    gasPrice: string;\r\n    blockNumber: number;\r\n    timestamp: string;\r\n    status: 'pending' | 'confirmed' | 'failed';\r\n}\r\n\r\nexport interface IPFSUploadResult {\r\n    hash: string;\r\n    url: string;\r\n    size: number;\r\n    type: string;\r\n}\r\n\r\nexport class EnhancedBlockchainService {\r\n    private readonly contractAddresses = {\r\n        healthRecords: '0x1234567890abcdef1234567890abcdef12345678',\r\n        nftContract: '0x9876543210fedcba9876543210fedcba98765432',\r\n        insurance: '0xabcdef1234567890abcdef1234567890abcdef12',\r\n        dataAccess: '0x5555666677778888999900001111222233334444'\r\n    };\r\n\r\n    private readonly networkConfig = {\r\n        name: 'Ethereum Mainnet',\r\n        chainId: 1,\r\n        rpcUrl: 'https://mainnet.infura.io/v3/your-project-id',\r\n        blockExplorer: 'https://etherscan.io'\r\n    };\r\n\r\n    private isConnected = false;\r\n    private currentAccount: string | null = null;\r\n\r\n    // Connect to wallet\r\n    async connectWallet(): Promise<{ success: boolean; account?: string; error?: string }> {\r\n        try {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                this.currentAccount = accounts[0];\r\n                this.isConnected = true;\r\n                return { success: true, account: accounts[0] };\r\n            } else {\r\n                // Simulate wallet connection for demo\r\n                this.currentAccount = '0x742d35cc6cc25532ecd8c2dd1e26d6a78e24b4d4';\r\n                this.isConnected = true;\r\n                return { success: true, account: this.currentAccount };\r\n            }\r\n        } catch (error) {\r\n            return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\r\n        }\r\n    }\r\n\r\n    // Upload file to IPFS (simulated)\r\n    async uploadToIPFS(file: File): Promise<IPFSUploadResult> {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const mockHash = `Qm${Math.random().toString(36).substring(2, 34)}`;\r\n                resolve({\r\n                    hash: mockHash,\r\n                    url: `https://ipfs.io/ipfs/${mockHash}`,\r\n                    size: file.size,\r\n                    type: file.type\r\n                });\r\n            }, 2000);\r\n        });\r\n    }\r\n\r\n    // Store medical record on blockchain\r\n    async storeHealthRecord(record: MedicalRecord): Promise<BlockchainTransaction> {\r\n        if (!this.isConnected) {\r\n            throw new Error('Wallet not connected');\r\n        }\r\n\r\n        // Simulate blockchain transaction\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;\r\n                resolve({\r\n                    hash: txHash,\r\n                    from: this.currentAccount!,\r\n                    to: this.contractAddresses.healthRecords,\r\n                    value: '0',\r\n                    gasUsed: '21000',\r\n                    gasPrice: '20000000000',\r\n                    blockNumber: Math.floor(Math.random() * 1000000) + 18000000,\r\n                    timestamp: new Date().toISOString(),\r\n                    status: 'confirmed'\r\n                });\r\n            }, 3000);\r\n        });\r\n    }\r\n\r\n    // Mint NFT for health record\r\n    async mintHealthNFT(record: MedicalRecord, metadata: any): Promise<NFTHealthRecord> {\r\n        if (!this.isConnected) {\r\n            throw new Error('Wallet not connected');\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const tokenId = `HEALTH-NFT-${Date.now()}`;\r\n                const nft: NFTHealthRecord = {\r\n                    id: `nft-${Date.now()}`,\r\n                    tokenId,\r\n                    patientId: record.patientId,\r\n                    recordId: record.id,\r\n                    name: `${record.title} - NFT`,\r\n                    description: `Blockchain-verified health record: ${record.description}`,\r\n                    imageUrl: `https://via.placeholder.com/400x400/4F46E5/FFFFFF?text=${tokenId}`,\r\n                    metadataUri: `ipfs://Qm${Math.random().toString(36).substring(2, 34)}`,\r\n                    contractAddress: this.contractAddresses.nftContract,\r\n                    blockchainNetwork: 'Ethereum',\r\n                    mintDate: new Date().toISOString(),\r\n                    currentOwner: record.patientId,\r\n                    isTransferable: false,\r\n                    accessLevel: 'patient_doctor'\r\n                };\r\n                resolve(nft);\r\n            }, 4000);\r\n        });\r\n    }\r\n\r\n    // Create smart contract for data access\r\n    async createDataAccessContract(\r\n        patientId: string,\r\n        doctorId: string,\r\n        recordIds: string[],\r\n        expiryDate: string\r\n    ): Promise<SmartContract> {\r\n        if (!this.isConnected) {\r\n            throw new Error('Wallet not connected');\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const contract: SmartContract = {\r\n                    id: `contract-${Date.now()}`,\r\n                    address: `0x${Math.random().toString(16).substring(2, 42)}`,\r\n                    type: 'data_access',\r\n                    creator: patientId,\r\n                    participants: [patientId, doctorId],\r\n                    terms: {\r\n                        accessScope: recordIds,\r\n                        expiryDate,\r\n                        purpose: 'Medical consultation and treatment'\r\n                    },\r\n                    status: 'active',\r\n                    createdAt: new Date().toISOString(),\r\n                    blockchainTxId: `0x${Math.random().toString(16).substring(2, 66)}`,\r\n                    isExecuted: false\r\n                };\r\n                resolve(contract);\r\n            }, 2500);\r\n        });\r\n    }\r\n\r\n    // Process insurance claim on blockchain\r\n    async processInsuranceClaim(claim: InsuranceClaim): Promise<BlockchainTransaction> {\r\n        if (!this.isConnected) {\r\n            throw new Error('Wallet not connected');\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;\r\n                resolve({\r\n                    hash: txHash,\r\n                    from: this.currentAccount!,\r\n                    to: this.contractAddresses.insurance,\r\n                    value: claim.amount.toString(),\r\n                    gasUsed: '45000',\r\n                    gasPrice: '25000000000',\r\n                    blockNumber: Math.floor(Math.random() * 1000000) + 18000000,\r\n                    timestamp: new Date().toISOString(),\r\n                    status: 'confirmed'\r\n                });\r\n            }, 3500);\r\n        });\r\n    }\r\n\r\n    // Verify record integrity\r\n    async verifyRecordIntegrity(record: MedicalRecord): Promise<{ isValid: boolean; details: string }> {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                // Simulate verification process\r\n                const isValid = Math.random() > 0.1; // 90% success rate\r\n                resolve({\r\n                    isValid,\r\n                    details: isValid\r\n                        ? 'Record hash matches blockchain data. Integrity verified.'\r\n                        : 'Warning: Record hash mismatch detected. Data may have been tampered with.'\r\n                });\r\n            }, 1500);\r\n        });\r\n    }\r\n\r\n    // Get transaction details\r\n    async getTransactionDetails(txHash: string): Promise<BlockchainTransaction | null> {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                if (Math.random() > 0.2) { // 80% success rate\r\n                    resolve({\r\n                        hash: txHash,\r\n                        from: '0x1234567890abcdef1234567890abcdef12345678',\r\n                        to: '0x9876543210fedcba9876543210fedcba98765432',\r\n                        value: '0',\r\n                        gasUsed: '21000',\r\n                        gasPrice: '20000000000',\r\n                        blockNumber: Math.floor(Math.random() * 1000000) + 18000000,\r\n                        timestamp: new Date().toISOString(),\r\n                        status: 'confirmed'\r\n                    });\r\n                } else {\r\n                    resolve(null);\r\n                }\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    // Grant/revoke data access\r\n    async updateDataAccess(\r\n        patientId: string,\r\n        providerId: string,\r\n        recordIds: string[],\r\n        action: 'grant' | 'revoke'\r\n    ): Promise<BlockchainTransaction> {\r\n        if (!this.isConnected) {\r\n            throw new Error('Wallet not connected');\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const txHash = `0x${Math.random().toString(16).substring(2, 66)}`;\r\n                resolve({\r\n                    hash: txHash,\r\n                    from: this.currentAccount!,\r\n                    to: this.contractAddresses.dataAccess,\r\n                    value: '0',\r\n                    gasUsed: '35000',\r\n                    gasPrice: '22000000000',\r\n                    blockNumber: Math.floor(Math.random() * 1000000) + 18000000,\r\n                    timestamp: new Date().toISOString(),\r\n                    status: 'confirmed'\r\n                });\r\n            }, 2000);\r\n        });\r\n    }\r\n\r\n    // Get NFT metadata\r\n    async getNFTMetadata(tokenId: string): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve({\r\n                    name: `Health Record NFT #${tokenId}`,\r\n                    description: 'Blockchain-verified medical record',\r\n                    image: `https://via.placeholder.com/400x400/4F46E5/FFFFFF?text=${tokenId}`,\r\n                    attributes: [\r\n                        { trait_type: 'Record Type', value: 'Medical Examination' },\r\n                        { trait_type: 'Verification', value: 'Blockchain Verified' },\r\n                        { trait_type: 'Privacy', value: 'HIPAA Compliant' },\r\n                        { trait_type: 'Network', value: 'Ethereum' }\r\n                    ],\r\n                    properties: {\r\n                        date: new Date().toISOString(),\r\n                        encrypted: true,\r\n                        transferable: false\r\n                    }\r\n                });\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    // Get network stats\r\n    getNetworkInfo() {\r\n        return {\r\n            ...this.networkConfig,\r\n            isConnected: this.isConnected,\r\n            currentAccount: this.currentAccount,\r\n            contractAddresses: this.contractAddresses\r\n        };\r\n    }\r\n\r\n    // Estimate gas for transaction\r\n    async estimateGas(operation: 'store_record' | 'mint_nft' | 'access_grant' | 'insurance_claim'): Promise<{\r\n        gasLimit: string;\r\n        gasPrice: string;\r\n        estimatedCost: string;\r\n    }> {\r\n        const gasEstimates = {\r\n            store_record: { gasLimit: '21000', gasPrice: '20000000000' },\r\n            mint_nft: { gasLimit: '85000', gasPrice: '25000000000' },\r\n            access_grant: { gasLimit: '35000', gasPrice: '22000000000' },\r\n            insurance_claim: { gasLimit: '45000', gasPrice: '25000000000' }\r\n        };\r\n\r\n        const estimate = gasEstimates[operation];\r\n        const costInWei = BigInt(estimate.gasLimit) * BigInt(estimate.gasPrice);\r\n        const costInEth = (Number(costInWei) / 1e18).toFixed(6);\r\n\r\n        return {\r\n            ...estimate,\r\n            estimatedCost: `${costInEth} ETH`\r\n        };\r\n    }\r\n\r\n    // Disconnect wallet\r\n    disconnect() {\r\n        this.isConnected = false;\r\n        this.currentAccount = null;\r\n    }\r\n}\r\n\r\nexport default EnhancedBlockchainService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}