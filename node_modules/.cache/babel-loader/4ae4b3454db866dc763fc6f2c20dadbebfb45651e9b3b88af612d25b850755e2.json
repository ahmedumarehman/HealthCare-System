{"ast":null,"code":"// Known suspicious/hacked wallet addresses (in a real app, this would be fetched from a security API)\nconst SUSPICIOUS_ADDRESSES = ['0x1234567890abcdef1234567890abcdef12345678',\n// Example fake address\n'0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',\n// Example malicious address\n'0x0000000000000000000000000000000000000000',\n// Null address\n'0xffffffffffffffffffffffffffffffffffffffff' // Max address (suspicious)\n// Add more known suspicious addresses here\n];\n\n// Common patterns for suspicious addresses\nconst SUSPICIOUS_PATTERNS = [/^0x0+$/,\n// All zeros\n/^0xf+$/i,\n// All Fs\n/^0x(dead|beef|cafe|babe|face)/i,\n// Common test/fake patterns\n/^0x1234567890abcdef/i // Sequential pattern\n];\nexport class ClipboardMonitoringService {\n  constructor() {\n    this.isMonitoring = false;\n    this.intervalId = null;\n    this.lastClipboardContent = '';\n    this.alertSound = null;\n    this.onSuspiciousAddressCallback = void 0;\n    // Create alert sound\n    this.alertSound = new Audio();\n    this.alertSound.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFA==';\n    this.alertSound.volume = 0.5;\n  }\n  startMonitoring(onSuspiciousAddress) {\n    if (this.isMonitoring) {\n      return false;\n    }\n    this.onSuspiciousAddressCallback = onSuspiciousAddress;\n\n    // Check if clipboard API is available\n    if (!navigator.clipboard || !navigator.clipboard.readText) {\n      console.warn('Clipboard API not available');\n      return false;\n    }\n    this.isMonitoring = true;\n    this.intervalId = setInterval(() => {\n      this.checkClipboard();\n    }, 1000); // Check every second\n\n    console.log('Clipboard monitoring started');\n    return true;\n  }\n  stopMonitoring() {\n    if (!this.isMonitoring) {\n      return;\n    }\n    this.isMonitoring = false;\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    console.log('Clipboard monitoring stopped');\n  }\n  isActive() {\n    return this.isMonitoring;\n  }\n  async checkClipboard() {\n    try {\n      const clipboardText = await navigator.clipboard.readText();\n\n      // Only check if clipboard content has changed\n      if (clipboardText !== this.lastClipboardContent) {\n        this.lastClipboardContent = clipboardText;\n\n        // Check for wallet addresses\n        const walletAddresses = this.extractWalletAddresses(clipboardText);\n        for (const address of walletAddresses) {\n          if (this.isSuspiciousAddress(address)) {\n            this.alertSuspiciousAddress(address);\n          }\n        }\n      }\n    } catch (error) {\n      // Clipboard access might be denied or not available\n      console.warn('Could not access clipboard:', error);\n    }\n  }\n  extractWalletAddresses(text) {\n    // Ethereum address pattern (0x followed by 40 hex characters)\n    const ethPattern = /0x[a-fA-F0-9]{40}/g;\n\n    // Bitcoin address patterns\n    const btcLegacyPattern = /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g;\n    const btcSegwitPattern = /bc1[a-z0-9]{39,59}/g;\n    const addresses = [];\n\n    // Extract Ethereum addresses\n    const ethMatches = text.match(ethPattern);\n    if (ethMatches) {\n      addresses.push(...ethMatches);\n    }\n\n    // Extract Bitcoin addresses (basic validation)\n    const btcLegacyMatches = text.match(btcLegacyPattern);\n    if (btcLegacyMatches) {\n      addresses.push(...btcLegacyMatches.filter(addr => this.isValidBitcoinAddress(addr)));\n    }\n    const btcSegwitMatches = text.match(btcSegwitPattern);\n    if (btcSegwitMatches) {\n      addresses.push(...btcSegwitMatches);\n    }\n    return addresses;\n  }\n  isValidBitcoinAddress(address) {\n    // Basic Bitcoin address validation (simplified)\n    if (address.length < 26 || address.length > 35) {\n      return false;\n    }\n\n    // Check if it starts with valid characters\n    if (!/^[13]/.test(address)) {\n      return false;\n    }\n\n    // Check for invalid characters\n    if (/[0OIl]/.test(address)) {\n      return false;\n    }\n    return true;\n  }\n  isSuspiciousAddress(address) {\n    // Check against known suspicious addresses\n    if (SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\n      return true;\n    }\n\n    // Check against suspicious patterns\n    for (const pattern of SUSPICIOUS_PATTERNS) {\n      if (pattern.test(address)) {\n        return true;\n      }\n    }\n\n    // Additional heuristics for suspicious addresses\n\n    // Check for repeated characters (might indicate test/fake address)\n    const hexPart = address.startsWith('0x') ? address.slice(2) : address;\n    const charCounts = {};\n    for (const char of hexPart) {\n      charCounts[char] = (charCounts[char] || 0) + 1;\n    }\n\n    // If any character appears more than 60% of the time, it's suspicious\n    const maxCount = Math.max(...Object.values(charCounts));\n    if (maxCount > hexPart.length * 0.6) {\n      return true;\n    }\n\n    // Check for sequential patterns\n    if (this.hasSequentialPattern(hexPart)) {\n      return true;\n    }\n    return false;\n  }\n  hasSequentialPattern(hex) {\n    let sequentialCount = 0;\n    for (let i = 1; i < hex.length; i++) {\n      const prev = parseInt(hex[i - 1], 16);\n      const curr = parseInt(hex[i], 16);\n      if (!isNaN(prev) && !isNaN(curr)) {\n        if (Math.abs(curr - prev) === 1) {\n          sequentialCount++;\n          if (sequentialCount >= 4) {\n            // 5 consecutive sequential characters\n            return true;\n          }\n        } else {\n          sequentialCount = 0;\n        }\n      }\n    }\n    return false;\n  }\n  alertSuspiciousAddress(address) {\n    console.warn('ðŸš¨ SUSPICIOUS WALLET ADDRESS DETECTED:', address);\n\n    // Play alert sound\n    if (this.alertSound) {\n      this.alertSound.currentTime = 0;\n      this.alertSound.play().catch(error => {\n        console.warn('Could not play alert sound:', error);\n      });\n    }\n\n    // Call the callback if provided\n    if (this.onSuspiciousAddressCallback) {\n      this.onSuspiciousAddressCallback(address);\n    }\n  }\n\n  // Method to add suspicious addresses dynamically\n  addSuspiciousAddress(address) {\n    if (!SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\n      SUSPICIOUS_ADDRESSES.push(address.toLowerCase());\n    }\n  }\n\n  // Method to get current suspicious addresses (for testing/debugging)\n  getSuspiciousAddresses() {\n    return [...SUSPICIOUS_ADDRESSES];\n  }\n}\n\n// Singleton instance\nexport const clipboardMonitoringService = new ClipboardMonitoringService();","map":{"version":3,"names":["SUSPICIOUS_ADDRESSES","SUSPICIOUS_PATTERNS","ClipboardMonitoringService","constructor","isMonitoring","intervalId","lastClipboardContent","alertSound","onSuspiciousAddressCallback","Audio","src","volume","startMonitoring","onSuspiciousAddress","navigator","clipboard","readText","console","warn","setInterval","checkClipboard","log","stopMonitoring","clearInterval","isActive","clipboardText","walletAddresses","extractWalletAddresses","address","isSuspiciousAddress","alertSuspiciousAddress","error","text","ethPattern","btcLegacyPattern","btcSegwitPattern","addresses","ethMatches","match","push","btcLegacyMatches","filter","addr","isValidBitcoinAddress","btcSegwitMatches","length","test","includes","toLowerCase","pattern","hexPart","startsWith","slice","charCounts","char","maxCount","Math","max","Object","values","hasSequentialPattern","hex","sequentialCount","i","prev","parseInt","curr","isNaN","abs","currentTime","play","catch","addSuspiciousAddress","getSuspiciousAddresses","clipboardMonitoringService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/clipboardMonitoring.ts"],"sourcesContent":["// Known suspicious/hacked wallet addresses (in a real app, this would be fetched from a security API)\r\nconst SUSPICIOUS_ADDRESSES = [\r\n    '0x1234567890abcdef1234567890abcdef12345678', // Example fake address\r\n    '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', // Example malicious address\r\n    '0x0000000000000000000000000000000000000000', // Null address\r\n    '0xffffffffffffffffffffffffffffffffffffffff', // Max address (suspicious)\r\n    // Add more known suspicious addresses here\r\n];\r\n\r\n// Common patterns for suspicious addresses\r\nconst SUSPICIOUS_PATTERNS = [\r\n    /^0x0+$/, // All zeros\r\n    /^0xf+$/i, // All Fs\r\n    /^0x(dead|beef|cafe|babe|face)/i, // Common test/fake patterns\r\n    /^0x1234567890abcdef/i, // Sequential pattern\r\n];\r\n\r\nexport class ClipboardMonitoringService {\r\n    private isMonitoring = false;\r\n    private intervalId: NodeJS.Timeout | null = null;\r\n    private lastClipboardContent = '';\r\n    private alertSound: HTMLAudioElement | null = null;\r\n    private onSuspiciousAddressCallback?: (address: string) => void;\r\n\r\n    constructor() {\r\n        // Create alert sound\r\n        this.alertSound = new Audio();\r\n        this.alertSound.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFA==';\r\n        this.alertSound.volume = 0.5;\r\n    }\r\n\r\n    startMonitoring(onSuspiciousAddress?: (address: string) => void): boolean {\r\n        if (this.isMonitoring) {\r\n            return false;\r\n        }\r\n\r\n        this.onSuspiciousAddressCallback = onSuspiciousAddress;\r\n\r\n        // Check if clipboard API is available\r\n        if (!navigator.clipboard || !navigator.clipboard.readText) {\r\n            console.warn('Clipboard API not available');\r\n            return false;\r\n        }\r\n\r\n        this.isMonitoring = true;\r\n        this.intervalId = setInterval(() => {\r\n            this.checkClipboard();\r\n        }, 1000); // Check every second\r\n\r\n        console.log('Clipboard monitoring started');\r\n        return true;\r\n    }\r\n\r\n    stopMonitoring(): void {\r\n        if (!this.isMonitoring) {\r\n            return;\r\n        }\r\n\r\n        this.isMonitoring = false;\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n\r\n        console.log('Clipboard monitoring stopped');\r\n    }\r\n\r\n    isActive(): boolean {\r\n        return this.isMonitoring;\r\n    }\r\n\r\n    private async checkClipboard(): Promise<void> {\r\n        try {\r\n            const clipboardText = await navigator.clipboard.readText();\r\n\r\n            // Only check if clipboard content has changed\r\n            if (clipboardText !== this.lastClipboardContent) {\r\n                this.lastClipboardContent = clipboardText;\r\n\r\n                // Check for wallet addresses\r\n                const walletAddresses = this.extractWalletAddresses(clipboardText);\r\n\r\n                for (const address of walletAddresses) {\r\n                    if (this.isSuspiciousAddress(address)) {\r\n                        this.alertSuspiciousAddress(address);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // Clipboard access might be denied or not available\r\n            console.warn('Could not access clipboard:', error);\r\n        }\r\n    }\r\n\r\n    private extractWalletAddresses(text: string): string[] {\r\n        // Ethereum address pattern (0x followed by 40 hex characters)\r\n        const ethPattern = /0x[a-fA-F0-9]{40}/g;\r\n\r\n        // Bitcoin address patterns\r\n        const btcLegacyPattern = /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g;\r\n        const btcSegwitPattern = /bc1[a-z0-9]{39,59}/g;\r\n\r\n        const addresses: string[] = [];\r\n\r\n        // Extract Ethereum addresses\r\n        const ethMatches = text.match(ethPattern);\r\n        if (ethMatches) {\r\n            addresses.push(...ethMatches);\r\n        }\r\n\r\n        // Extract Bitcoin addresses (basic validation)\r\n        const btcLegacyMatches = text.match(btcLegacyPattern);\r\n        if (btcLegacyMatches) {\r\n            addresses.push(...btcLegacyMatches.filter(addr => this.isValidBitcoinAddress(addr)));\r\n        }\r\n\r\n        const btcSegwitMatches = text.match(btcSegwitPattern);\r\n        if (btcSegwitMatches) {\r\n            addresses.push(...btcSegwitMatches);\r\n        }\r\n\r\n        return addresses;\r\n    }\r\n\r\n    private isValidBitcoinAddress(address: string): boolean {\r\n        // Basic Bitcoin address validation (simplified)\r\n        if (address.length < 26 || address.length > 35) {\r\n            return false;\r\n        }\r\n\r\n        // Check if it starts with valid characters\r\n        if (!/^[13]/.test(address)) {\r\n            return false;\r\n        }\r\n\r\n        // Check for invalid characters\r\n        if (/[0OIl]/.test(address)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private isSuspiciousAddress(address: string): boolean {\r\n        // Check against known suspicious addresses\r\n        if (SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\r\n            return true;\r\n        }\r\n\r\n        // Check against suspicious patterns\r\n        for (const pattern of SUSPICIOUS_PATTERNS) {\r\n            if (pattern.test(address)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Additional heuristics for suspicious addresses\r\n\r\n        // Check for repeated characters (might indicate test/fake address)\r\n        const hexPart = address.startsWith('0x') ? address.slice(2) : address;\r\n        const charCounts: { [key: string]: number } = {};\r\n        for (const char of hexPart) {\r\n            charCounts[char] = (charCounts[char] || 0) + 1;\r\n        }\r\n\r\n        // If any character appears more than 60% of the time, it's suspicious\r\n        const maxCount = Math.max(...Object.values(charCounts) as number[]);\r\n        if (maxCount > hexPart.length * 0.6) {\r\n            return true;\r\n        }\r\n\r\n        // Check for sequential patterns\r\n        if (this.hasSequentialPattern(hexPart)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private hasSequentialPattern(hex: string): boolean {\r\n        let sequentialCount = 0;\r\n        for (let i = 1; i < hex.length; i++) {\r\n            const prev = parseInt(hex[i - 1], 16);\r\n            const curr = parseInt(hex[i], 16);\r\n\r\n            if (!isNaN(prev) && !isNaN(curr)) {\r\n                if (Math.abs(curr - prev) === 1) {\r\n                    sequentialCount++;\r\n                    if (sequentialCount >= 4) { // 5 consecutive sequential characters\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    sequentialCount = 0;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private alertSuspiciousAddress(address: string): void {\r\n        console.warn('ðŸš¨ SUSPICIOUS WALLET ADDRESS DETECTED:', address);\r\n\r\n        // Play alert sound\r\n        if (this.alertSound) {\r\n            this.alertSound.currentTime = 0;\r\n            this.alertSound.play().catch(error => {\r\n                console.warn('Could not play alert sound:', error);\r\n            });\r\n        }\r\n\r\n        // Call the callback if provided\r\n        if (this.onSuspiciousAddressCallback) {\r\n            this.onSuspiciousAddressCallback(address);\r\n        }\r\n    }\r\n\r\n    // Method to add suspicious addresses dynamically\r\n    addSuspiciousAddress(address: string): void {\r\n        if (!SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\r\n            SUSPICIOUS_ADDRESSES.push(address.toLowerCase());\r\n        }\r\n    }\r\n\r\n    // Method to get current suspicious addresses (for testing/debugging)\r\n    getSuspiciousAddresses(): string[] {\r\n        return [...SUSPICIOUS_ADDRESSES];\r\n    }\r\n}\r\n\r\n// Singleton instance\r\nexport const clipboardMonitoringService = new ClipboardMonitoringService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}