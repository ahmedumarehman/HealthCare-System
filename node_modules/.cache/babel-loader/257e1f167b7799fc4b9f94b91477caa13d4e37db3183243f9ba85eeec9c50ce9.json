{"ast":null,"code":"class ClipboardMonitorService {\n  constructor() {\n    this.monitor = {\n      isActive: false,\n      detectedAddresses: [],\n      alertCount: 0,\n      lastCheck: new Date().toISOString()\n    };\n    this.listeners = [];\n    this.intervalId = null;\n    this.lastClipboardContent = '';\n    // Ethereum address pattern\n    this.ETH_ADDRESS_PATTERN = /^0x[a-fA-F0-9]{40}$/;\n    // Healthcare record ID pattern (custom for your system)\n    this.HEALTH_RECORD_PATTERN = /^HR-[A-Z0-9]{8}-[A-Z0-9]{4}$/;\n    // Bitcoin address pattern\n    this.BTC_ADDRESS_PATTERN = /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/;\n  }\n  // Start monitoring clipboard\n  async startMonitoring() {\n    if (this.monitor.isActive) return;\n    try {\n      // Check if clipboard API is available\n      if (!navigator.clipboard || !navigator.clipboard.readText) {\n        throw new Error('Clipboard API not available in this browser');\n      }\n      this.monitor.isActive = true;\n      this.monitor.lastCheck = new Date().toISOString();\n\n      // Start monitoring every 2 seconds\n      this.intervalId = setInterval(() => {\n        this.checkClipboard();\n      }, 2000);\n      console.log('Clipboard monitoring started');\n    } catch (error) {\n      this.monitor.isActive = false;\n      throw new Error(`Failed to start clipboard monitoring: ${error}`);\n    }\n  }\n\n  // Stop monitoring clipboard\n  stopMonitoring() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    this.monitor.isActive = false;\n    console.log('Clipboard monitoring stopped');\n  }\n\n  // Check clipboard content\n  async checkClipboard() {\n    try {\n      const clipboardText = await navigator.clipboard.readText();\n      if (clipboardText !== this.lastClipboardContent && clipboardText.trim()) {\n        this.lastClipboardContent = clipboardText;\n        this.monitor.lastCheck = new Date().toISOString();\n        await this.analyzeClipboardContent(clipboardText);\n      }\n    } catch (error) {\n      // Handle clipboard access errors silently (user may have denied permission)\n      console.warn('Clipboard access denied or failed:', error);\n    }\n  }\n\n  // Analyze clipboard content for sensitive data\n  async analyzeClipboardContent(content) {\n    const trimmedContent = content.trim();\n\n    // Check for Ethereum addresses\n    if (this.ETH_ADDRESS_PATTERN.test(trimmedContent)) {\n      await this.handleSensitiveData('ethereum_address', trimmedContent);\n    }\n\n    // Check for Bitcoin addresses\n    else if (this.BTC_ADDRESS_PATTERN.test(trimmedContent)) {\n      await this.handleSensitiveData('bitcoin_address', trimmedContent);\n    }\n\n    // Check for health record IDs\n    else if (this.HEALTH_RECORD_PATTERN.test(trimmedContent)) {\n      await this.handleSensitiveData('health_record_id', trimmedContent);\n    }\n\n    // Check for potential private keys (long hex strings)\n    else if (this.isPotentialPrivateKey(trimmedContent)) {\n      await this.handleSensitiveData('potential_private_key', '***REDACTED***');\n    }\n\n    // Check for potential seed phrases\n    else if (this.isPotentialSeedPhrase(trimmedContent)) {\n      await this.handleSensitiveData('potential_seed_phrase', '***REDACTED***');\n    }\n  }\n\n  // Handle detection of sensitive data\n  async handleSensitiveData(type, content) {\n    // Set safe address if this is the first crypto address detected\n    if ((type === 'ethereum_address' || type === 'bitcoin_address') && !this.monitor.safeAddress) {\n      this.monitor.safeAddress = content;\n      return; // Don't alert for the first address\n    }\n\n    // Check if this is a different address than the safe one\n    if ((type === 'ethereum_address' || type === 'bitcoin_address') && this.monitor.safeAddress && content !== this.monitor.safeAddress) {\n      await this.triggerSecurityAlert({\n        type: 'clipboard_hijack',\n        description: `Potential clipboard hijacking detected: ${type} changed from safe address`,\n        content: content,\n        originalType: type\n      });\n    }\n\n    // Alert for private keys and seed phrases\n    if (type === 'potential_private_key' || type === 'potential_seed_phrase') {\n      await this.triggerSecurityAlert({\n        type: 'clipboard_hijack',\n        description: `Sensitive data detected in clipboard: ${type}`,\n        content: content,\n        originalType: type\n      });\n    }\n\n    // Store detected address\n    if (type === 'ethereum_address' || type === 'bitcoin_address') {\n      this.monitor.detectedAddresses.push(content);\n      // Keep only last 10 addresses\n      if (this.monitor.detectedAddresses.length > 10) {\n        this.monitor.detectedAddresses = this.monitor.detectedAddresses.slice(-10);\n      }\n    }\n  }\n\n  // Check if content looks like a private key\n  isPotentialPrivateKey(content) {\n    // 64 character hex string (typical private key)\n    return /^[a-fA-F0-9]{64}$/.test(content);\n  }\n\n  // Check if content looks like a seed phrase\n  isPotentialSeedPhrase(content) {\n    const words = content.toLowerCase().split(/\\s+/);\n    return words.length >= 12 && words.length <= 24 && words.every(word => /^[a-z]+$/.test(word));\n  }\n\n  // Trigger security alert\n  async triggerSecurityAlert(details) {\n    this.monitor.alertCount++;\n    const securityEvent = {\n      id: `clip_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: 'clipboard_hijack',\n      description: details.description,\n      severity: details.originalType.includes('private_key') || details.originalType.includes('seed_phrase') ? 'critical' : 'high',\n      timestamp: new Date().toISOString(),\n      resolved: false,\n      metadata: {\n        detectedType: details.originalType,\n        contentPreview: details.content.length > 10 ? details.content.substring(0, 10) + '...' : details.content\n      }\n    };\n\n    // Notify all listeners\n    this.listeners.forEach(listener => listener(securityEvent));\n\n    // Browser notification if permission granted\n    if (Notification.permission === 'granted') {\n      new Notification('Security Alert - EMRChains', {\n        body: details.description,\n        icon: '/favicon.ico',\n        tag: 'clipboard-security'\n      });\n    }\n\n    // Audio alert\n    this.playAlertSound();\n  }\n\n  // Play alert sound\n  playAlertSound() {\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      oscillator.start();\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } catch (error) {\n      console.warn('Could not play alert sound:', error);\n    }\n  }\n\n  // Subscribe to security events\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  // Get current monitor status\n  getStatus() {\n    return {\n      ...this.monitor\n    };\n  }\n\n  // Clear detected addresses\n  clearDetectedAddresses() {\n    this.monitor.detectedAddresses = [];\n    this.monitor.alertCount = 0;\n  }\n\n  // Set safe address manually\n  setSafeAddress(address) {\n    this.monitor.safeAddress = address;\n  }\n\n  // Request notification permission\n  async requestNotificationPermission() {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  }\n}\nexport const clipboardMonitorService = new ClipboardMonitorService();","map":{"version":3,"names":["ClipboardMonitorService","constructor","monitor","isActive","detectedAddresses","alertCount","lastCheck","Date","toISOString","listeners","intervalId","lastClipboardContent","ETH_ADDRESS_PATTERN","HEALTH_RECORD_PATTERN","BTC_ADDRESS_PATTERN","startMonitoring","navigator","clipboard","readText","Error","setInterval","checkClipboard","console","log","error","stopMonitoring","clearInterval","clipboardText","trim","analyzeClipboardContent","warn","content","trimmedContent","test","handleSensitiveData","isPotentialPrivateKey","isPotentialSeedPhrase","type","safeAddress","triggerSecurityAlert","description","originalType","push","length","slice","words","toLowerCase","split","every","word","details","securityEvent","id","now","Math","random","toString","substr","severity","includes","timestamp","resolved","metadata","detectedType","contentPreview","substring","forEach","listener","Notification","permission","body","icon","tag","playAlertSound","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","setValueAtTime","currentTime","gain","start","stop","subscribe","filter","l","getStatus","clearDetectedAddresses","setSafeAddress","address","requestNotificationPermission","requestPermission","clipboardMonitorService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/clipboardMonitorService.ts"],"sourcesContent":["import { ClipboardMonitor, SecurityEvent } from '../types';\r\n\r\nclass ClipboardMonitorService {\r\n    private monitor: ClipboardMonitor = {\r\n        isActive: false,\r\n        detectedAddresses: [],\r\n        alertCount: 0,\r\n        lastCheck: new Date().toISOString()\r\n    };\r\n\r\n    private listeners: ((event: SecurityEvent) => void)[] = [];\r\n    private intervalId: NodeJS.Timeout | null = null;\r\n    private lastClipboardContent = '';\r\n\r\n    // Ethereum address pattern\r\n    private readonly ETH_ADDRESS_PATTERN = /^0x[a-fA-F0-9]{40}$/;\r\n\r\n    // Healthcare record ID pattern (custom for your system)\r\n    private readonly HEALTH_RECORD_PATTERN = /^HR-[A-Z0-9]{8}-[A-Z0-9]{4}$/;\r\n\r\n    // Bitcoin address pattern\r\n    private readonly BTC_ADDRESS_PATTERN = /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$/;\r\n\r\n    // Start monitoring clipboard\r\n    async startMonitoring(): Promise<void> {\r\n        if (this.monitor.isActive) return;\r\n\r\n        try {\r\n            // Check if clipboard API is available\r\n            if (!navigator.clipboard || !navigator.clipboard.readText) {\r\n                throw new Error('Clipboard API not available in this browser');\r\n            }\r\n\r\n            this.monitor.isActive = true;\r\n            this.monitor.lastCheck = new Date().toISOString();\r\n\r\n            // Start monitoring every 2 seconds\r\n            this.intervalId = setInterval(() => {\r\n                this.checkClipboard();\r\n            }, 2000);\r\n\r\n            console.log('Clipboard monitoring started');\r\n        } catch (error) {\r\n            this.monitor.isActive = false;\r\n            throw new Error(`Failed to start clipboard monitoring: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Stop monitoring clipboard\r\n    stopMonitoring(): void {\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n\r\n        this.monitor.isActive = false;\r\n        console.log('Clipboard monitoring stopped');\r\n    }\r\n\r\n    // Check clipboard content\r\n    private async checkClipboard(): Promise<void> {\r\n        try {\r\n            const clipboardText = await navigator.clipboard.readText();\r\n\r\n            if (clipboardText !== this.lastClipboardContent && clipboardText.trim()) {\r\n                this.lastClipboardContent = clipboardText;\r\n                this.monitor.lastCheck = new Date().toISOString();\r\n\r\n                await this.analyzeClipboardContent(clipboardText);\r\n            }\r\n        } catch (error) {\r\n            // Handle clipboard access errors silently (user may have denied permission)\r\n            console.warn('Clipboard access denied or failed:', error);\r\n        }\r\n    }\r\n\r\n    // Analyze clipboard content for sensitive data\r\n    private async analyzeClipboardContent(content: string): Promise<void> {\r\n        const trimmedContent = content.trim();\r\n\r\n        // Check for Ethereum addresses\r\n        if (this.ETH_ADDRESS_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('ethereum_address', trimmedContent);\r\n        }\r\n\r\n        // Check for Bitcoin addresses\r\n        else if (this.BTC_ADDRESS_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('bitcoin_address', trimmedContent);\r\n        }\r\n\r\n        // Check for health record IDs\r\n        else if (this.HEALTH_RECORD_PATTERN.test(trimmedContent)) {\r\n            await this.handleSensitiveData('health_record_id', trimmedContent);\r\n        }\r\n\r\n        // Check for potential private keys (long hex strings)\r\n        else if (this.isPotentialPrivateKey(trimmedContent)) {\r\n            await this.handleSensitiveData('potential_private_key', '***REDACTED***');\r\n        }\r\n\r\n        // Check for potential seed phrases\r\n        else if (this.isPotentialSeedPhrase(trimmedContent)) {\r\n            await this.handleSensitiveData('potential_seed_phrase', '***REDACTED***');\r\n        }\r\n    }\r\n\r\n    // Handle detection of sensitive data\r\n    private async handleSensitiveData(type: string, content: string): Promise<void> {\r\n        // Set safe address if this is the first crypto address detected\r\n        if ((type === 'ethereum_address' || type === 'bitcoin_address') && !this.monitor.safeAddress) {\r\n            this.monitor.safeAddress = content;\r\n            return; // Don't alert for the first address\r\n        }\r\n\r\n        // Check if this is a different address than the safe one\r\n        if ((type === 'ethereum_address' || type === 'bitcoin_address') &&\r\n            this.monitor.safeAddress && content !== this.monitor.safeAddress) {\r\n\r\n            await this.triggerSecurityAlert({\r\n                type: 'clipboard_hijack',\r\n                description: `Potential clipboard hijacking detected: ${type} changed from safe address`,\r\n                content: content,\r\n                originalType: type\r\n            });\r\n        }\r\n\r\n        // Alert for private keys and seed phrases\r\n        if (type === 'potential_private_key' || type === 'potential_seed_phrase') {\r\n            await this.triggerSecurityAlert({\r\n                type: 'clipboard_hijack',\r\n                description: `Sensitive data detected in clipboard: ${type}`,\r\n                content: content,\r\n                originalType: type\r\n            });\r\n        }\r\n\r\n        // Store detected address\r\n        if (type === 'ethereum_address' || type === 'bitcoin_address') {\r\n            this.monitor.detectedAddresses.push(content);\r\n            // Keep only last 10 addresses\r\n            if (this.monitor.detectedAddresses.length > 10) {\r\n                this.monitor.detectedAddresses = this.monitor.detectedAddresses.slice(-10);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check if content looks like a private key\r\n    private isPotentialPrivateKey(content: string): boolean {\r\n        // 64 character hex string (typical private key)\r\n        return /^[a-fA-F0-9]{64}$/.test(content);\r\n    }\r\n\r\n    // Check if content looks like a seed phrase\r\n    private isPotentialSeedPhrase(content: string): boolean {\r\n        const words = content.toLowerCase().split(/\\s+/);\r\n        return words.length >= 12 && words.length <= 24 &&\r\n            words.every(word => /^[a-z]+$/.test(word));\r\n    }\r\n\r\n    // Trigger security alert\r\n    private async triggerSecurityAlert(details: {\r\n        type: string;\r\n        description: string;\r\n        content: string;\r\n        originalType: string;\r\n    }): Promise<void> {\r\n        this.monitor.alertCount++;\r\n\r\n        const securityEvent: SecurityEvent = {\r\n            id: `clip_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n            type: 'clipboard_hijack',\r\n            description: details.description,\r\n            severity: details.originalType.includes('private_key') || details.originalType.includes('seed_phrase')\r\n                ? 'critical' : 'high',\r\n            timestamp: new Date().toISOString(),\r\n            resolved: false,\r\n            metadata: {\r\n                detectedType: details.originalType,\r\n                contentPreview: details.content.length > 10 ?\r\n                    details.content.substring(0, 10) + '...' : details.content\r\n            }\r\n        };\r\n\r\n        // Notify all listeners\r\n        this.listeners.forEach(listener => listener(securityEvent));\r\n\r\n        // Browser notification if permission granted\r\n        if (Notification.permission === 'granted') {\r\n            new Notification('Security Alert - EMRChains', {\r\n                body: details.description,\r\n                icon: '/favicon.ico',\r\n                tag: 'clipboard-security'\r\n            });\r\n        }\r\n\r\n        // Audio alert\r\n        this.playAlertSound();\r\n    }\r\n\r\n    // Play alert sound\r\n    private playAlertSound(): void {\r\n        try {\r\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n            const oscillator = audioContext.createOscillator();\r\n            const gainNode = audioContext.createGain();\r\n\r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(audioContext.destination);\r\n\r\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\r\n            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\r\n\r\n            oscillator.start();\r\n            oscillator.stop(audioContext.currentTime + 0.5);\r\n        } catch (error) {\r\n            console.warn('Could not play alert sound:', error);\r\n        }\r\n    }\r\n\r\n    // Subscribe to security events\r\n    subscribe(listener: (event: SecurityEvent) => void): () => void {\r\n        this.listeners.push(listener);\r\n        return () => {\r\n            this.listeners = this.listeners.filter(l => l !== listener);\r\n        };\r\n    }\r\n\r\n    // Get current monitor status\r\n    getStatus(): ClipboardMonitor {\r\n        return { ...this.monitor };\r\n    }\r\n\r\n    // Clear detected addresses\r\n    clearDetectedAddresses(): void {\r\n        this.monitor.detectedAddresses = [];\r\n        this.monitor.alertCount = 0;\r\n    }\r\n\r\n    // Set safe address manually\r\n    setSafeAddress(address: string): void {\r\n        this.monitor.safeAddress = address;\r\n    }\r\n\r\n    // Request notification permission\r\n    async requestNotificationPermission(): Promise<boolean> {\r\n        if ('Notification' in window) {\r\n            const permission = await Notification.requestPermission();\r\n            return permission === 'granted';\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const clipboardMonitorService = new ClipboardMonitorService();\r\n"],"mappings":"AAEA,MAAMA,uBAAuB,CAAC;EAAAC,YAAA;IAAA,KAClBC,OAAO,GAAqB;MAChCC,QAAQ,EAAE,KAAK;MACfC,iBAAiB,EAAE,EAAE;MACrBC,UAAU,EAAE,CAAC;MACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACtC,CAAC;IAAA,KAEOC,SAAS,GAAuC,EAAE;IAAA,KAClDC,UAAU,GAA0B,IAAI;IAAA,KACxCC,oBAAoB,GAAG,EAAE;IAEjC;IAAA,KACiBC,mBAAmB,GAAG,qBAAqB;IAE5D;IAAA,KACiBC,qBAAqB,GAAG,8BAA8B;IAEvE;IAAA,KACiBC,mBAAmB,GAAG,mCAAmC;EAAA;EAE1E;EACA,MAAMC,eAAeA,CAAA,EAAkB;IACnC,IAAI,IAAI,CAACb,OAAO,CAACC,QAAQ,EAAE;IAE3B,IAAI;MACA;MACA,IAAI,CAACa,SAAS,CAACC,SAAS,IAAI,CAACD,SAAS,CAACC,SAAS,CAACC,QAAQ,EAAE;QACvD,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;MAClE;MAEA,IAAI,CAACjB,OAAO,CAACC,QAAQ,GAAG,IAAI;MAC5B,IAAI,CAACD,OAAO,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;MAEjD;MACA,IAAI,CAACE,UAAU,GAAGU,WAAW,CAAC,MAAM;QAChC,IAAI,CAACC,cAAc,CAAC,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC;MAERC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,IAAI,CAACtB,OAAO,CAACC,QAAQ,GAAG,KAAK;MAC7B,MAAM,IAAIgB,KAAK,CAAC,yCAAyCK,KAAK,EAAE,CAAC;IACrE;EACJ;;EAEA;EACAC,cAAcA,CAAA,EAAS;IACnB,IAAI,IAAI,CAACf,UAAU,EAAE;MACjBgB,aAAa,CAAC,IAAI,CAAChB,UAAU,CAAC;MAC9B,IAAI,CAACA,UAAU,GAAG,IAAI;IAC1B;IAEA,IAAI,CAACR,OAAO,CAACC,QAAQ,GAAG,KAAK;IAC7BmB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC/C;;EAEA;EACA,MAAcF,cAAcA,CAAA,EAAkB;IAC1C,IAAI;MACA,MAAMM,aAAa,GAAG,MAAMX,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;MAE1D,IAAIS,aAAa,KAAK,IAAI,CAAChB,oBAAoB,IAAIgB,aAAa,CAACC,IAAI,CAAC,CAAC,EAAE;QACrE,IAAI,CAACjB,oBAAoB,GAAGgB,aAAa;QACzC,IAAI,CAACzB,OAAO,CAACI,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAEjD,MAAM,IAAI,CAACqB,uBAAuB,CAACF,aAAa,CAAC;MACrD;IACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZ;MACAF,OAAO,CAACQ,IAAI,CAAC,oCAAoC,EAAEN,KAAK,CAAC;IAC7D;EACJ;;EAEA;EACA,MAAcK,uBAAuBA,CAACE,OAAe,EAAiB;IAClE,MAAMC,cAAc,GAAGD,OAAO,CAACH,IAAI,CAAC,CAAC;;IAErC;IACA,IAAI,IAAI,CAAChB,mBAAmB,CAACqB,IAAI,CAACD,cAAc,CAAC,EAAE;MAC/C,MAAM,IAAI,CAACE,mBAAmB,CAAC,kBAAkB,EAAEF,cAAc,CAAC;IACtE;;IAEA;IAAA,KACK,IAAI,IAAI,CAAClB,mBAAmB,CAACmB,IAAI,CAACD,cAAc,CAAC,EAAE;MACpD,MAAM,IAAI,CAACE,mBAAmB,CAAC,iBAAiB,EAAEF,cAAc,CAAC;IACrE;;IAEA;IAAA,KACK,IAAI,IAAI,CAACnB,qBAAqB,CAACoB,IAAI,CAACD,cAAc,CAAC,EAAE;MACtD,MAAM,IAAI,CAACE,mBAAmB,CAAC,kBAAkB,EAAEF,cAAc,CAAC;IACtE;;IAEA;IAAA,KACK,IAAI,IAAI,CAACG,qBAAqB,CAACH,cAAc,CAAC,EAAE;MACjD,MAAM,IAAI,CAACE,mBAAmB,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;IAC7E;;IAEA;IAAA,KACK,IAAI,IAAI,CAACE,qBAAqB,CAACJ,cAAc,CAAC,EAAE;MACjD,MAAM,IAAI,CAACE,mBAAmB,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;IAC7E;EACJ;;EAEA;EACA,MAAcA,mBAAmBA,CAACG,IAAY,EAAEN,OAAe,EAAiB;IAC5E;IACA,IAAI,CAACM,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,iBAAiB,KAAK,CAAC,IAAI,CAACnC,OAAO,CAACoC,WAAW,EAAE;MAC1F,IAAI,CAACpC,OAAO,CAACoC,WAAW,GAAGP,OAAO;MAClC,OAAO,CAAC;IACZ;;IAEA;IACA,IAAI,CAACM,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,iBAAiB,KAC1D,IAAI,CAACnC,OAAO,CAACoC,WAAW,IAAIP,OAAO,KAAK,IAAI,CAAC7B,OAAO,CAACoC,WAAW,EAAE;MAElE,MAAM,IAAI,CAACC,oBAAoB,CAAC;QAC5BF,IAAI,EAAE,kBAAkB;QACxBG,WAAW,EAAE,2CAA2CH,IAAI,4BAA4B;QACxFN,OAAO,EAAEA,OAAO;QAChBU,YAAY,EAAEJ;MAClB,CAAC,CAAC;IACN;;IAEA;IACA,IAAIA,IAAI,KAAK,uBAAuB,IAAIA,IAAI,KAAK,uBAAuB,EAAE;MACtE,MAAM,IAAI,CAACE,oBAAoB,CAAC;QAC5BF,IAAI,EAAE,kBAAkB;QACxBG,WAAW,EAAE,yCAAyCH,IAAI,EAAE;QAC5DN,OAAO,EAAEA,OAAO;QAChBU,YAAY,EAAEJ;MAClB,CAAC,CAAC;IACN;;IAEA;IACA,IAAIA,IAAI,KAAK,kBAAkB,IAAIA,IAAI,KAAK,iBAAiB,EAAE;MAC3D,IAAI,CAACnC,OAAO,CAACE,iBAAiB,CAACsC,IAAI,CAACX,OAAO,CAAC;MAC5C;MACA,IAAI,IAAI,CAAC7B,OAAO,CAACE,iBAAiB,CAACuC,MAAM,GAAG,EAAE,EAAE;QAC5C,IAAI,CAACzC,OAAO,CAACE,iBAAiB,GAAG,IAAI,CAACF,OAAO,CAACE,iBAAiB,CAACwC,KAAK,CAAC,CAAC,EAAE,CAAC;MAC9E;IACJ;EACJ;;EAEA;EACQT,qBAAqBA,CAACJ,OAAe,EAAW;IACpD;IACA,OAAO,mBAAmB,CAACE,IAAI,CAACF,OAAO,CAAC;EAC5C;;EAEA;EACQK,qBAAqBA,CAACL,OAAe,EAAW;IACpD,MAAMc,KAAK,GAAGd,OAAO,CAACe,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC;IAChD,OAAOF,KAAK,CAACF,MAAM,IAAI,EAAE,IAAIE,KAAK,CAACF,MAAM,IAAI,EAAE,IAC3CE,KAAK,CAACG,KAAK,CAACC,IAAI,IAAI,UAAU,CAAChB,IAAI,CAACgB,IAAI,CAAC,CAAC;EAClD;;EAEA;EACA,MAAcV,oBAAoBA,CAACW,OAKlC,EAAiB;IACd,IAAI,CAAChD,OAAO,CAACG,UAAU,EAAE;IAEzB,MAAM8C,aAA4B,GAAG;MACjCC,EAAE,EAAE,QAAQ7C,IAAI,CAAC8C,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MACnEpB,IAAI,EAAE,kBAAkB;MACxBG,WAAW,EAAEU,OAAO,CAACV,WAAW;MAChCkB,QAAQ,EAAER,OAAO,CAACT,YAAY,CAACkB,QAAQ,CAAC,aAAa,CAAC,IAAIT,OAAO,CAACT,YAAY,CAACkB,QAAQ,CAAC,aAAa,CAAC,GAChG,UAAU,GAAG,MAAM;MACzBC,SAAS,EAAE,IAAIrD,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCqD,QAAQ,EAAE,KAAK;MACfC,QAAQ,EAAE;QACNC,YAAY,EAAEb,OAAO,CAACT,YAAY;QAClCuB,cAAc,EAAEd,OAAO,CAACnB,OAAO,CAACY,MAAM,GAAG,EAAE,GACvCO,OAAO,CAACnB,OAAO,CAACkC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAGf,OAAO,CAACnB;MAC3D;IACJ,CAAC;;IAED;IACA,IAAI,CAACtB,SAAS,CAACyD,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAChB,aAAa,CAAC,CAAC;;IAE3D;IACA,IAAIiB,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACvC,IAAID,YAAY,CAAC,4BAA4B,EAAE;QAC3CE,IAAI,EAAEpB,OAAO,CAACV,WAAW;QACzB+B,IAAI,EAAE,cAAc;QACpBC,GAAG,EAAE;MACT,CAAC,CAAC;IACN;;IAEA;IACA,IAAI,CAACC,cAAc,CAAC,CAAC;EACzB;;EAEA;EACQA,cAAcA,CAAA,EAAS;IAC3B,IAAI;MACA,MAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;MACtF,MAAMC,UAAU,GAAGJ,YAAY,CAACK,gBAAgB,CAAC,CAAC;MAClD,MAAMC,QAAQ,GAAGN,YAAY,CAACO,UAAU,CAAC,CAAC;MAE1CH,UAAU,CAACI,OAAO,CAACF,QAAQ,CAAC;MAC5BA,QAAQ,CAACE,OAAO,CAACR,YAAY,CAACS,WAAW,CAAC;MAE1CL,UAAU,CAACM,SAAS,CAACC,cAAc,CAAC,GAAG,EAAEX,YAAY,CAACY,WAAW,CAAC;MAClEN,QAAQ,CAACO,IAAI,CAACF,cAAc,CAAC,GAAG,EAAEX,YAAY,CAACY,WAAW,CAAC;MAE3DR,UAAU,CAACU,KAAK,CAAC,CAAC;MAClBV,UAAU,CAACW,IAAI,CAACf,YAAY,CAACY,WAAW,GAAG,GAAG,CAAC;IACnD,CAAC,CAAC,OAAO9D,KAAK,EAAE;MACZF,OAAO,CAACQ,IAAI,CAAC,6BAA6B,EAAEN,KAAK,CAAC;IACtD;EACJ;;EAEA;EACAkE,SAASA,CAACvB,QAAwC,EAAc;IAC5D,IAAI,CAAC1D,SAAS,CAACiC,IAAI,CAACyB,QAAQ,CAAC;IAC7B,OAAO,MAAM;MACT,IAAI,CAAC1D,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkF,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKzB,QAAQ,CAAC;IAC/D,CAAC;EACL;;EAEA;EACA0B,SAASA,CAAA,EAAqB;IAC1B,OAAO;MAAE,GAAG,IAAI,CAAC3F;IAAQ,CAAC;EAC9B;;EAEA;EACA4F,sBAAsBA,CAAA,EAAS;IAC3B,IAAI,CAAC5F,OAAO,CAACE,iBAAiB,GAAG,EAAE;IACnC,IAAI,CAACF,OAAO,CAACG,UAAU,GAAG,CAAC;EAC/B;;EAEA;EACA0F,cAAcA,CAACC,OAAe,EAAQ;IAClC,IAAI,CAAC9F,OAAO,CAACoC,WAAW,GAAG0D,OAAO;EACtC;;EAEA;EACA,MAAMC,6BAA6BA,CAAA,EAAqB;IACpD,IAAI,cAAc,IAAItB,MAAM,EAAE;MAC1B,MAAMN,UAAU,GAAG,MAAMD,YAAY,CAAC8B,iBAAiB,CAAC,CAAC;MACzD,OAAO7B,UAAU,KAAK,SAAS;IACnC;IACA,OAAO,KAAK;EAChB;AACJ;AAEA,OAAO,MAAM8B,uBAAuB,GAAG,IAAInG,uBAAuB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}