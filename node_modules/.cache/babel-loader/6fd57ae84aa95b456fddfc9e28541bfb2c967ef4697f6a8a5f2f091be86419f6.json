{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{initializeApp}from'firebase/app';import{getDatabase,ref,push,onValue,off,set,get}from'firebase/database';// Firebase configuration (replace with your actual config)\nconst firebaseConfig={apiKey:\"demo-api-key\",authDomain:\"healthcare-system-demo.firebaseapp.com\",databaseURL:\"https://healthcare-system-demo-default-rtdb.firebaseio.com\",projectId:\"healthcare-system-demo\",storageBucket:\"healthcare-system-demo.appspot.com\",messagingSenderId:\"123456789\",appId:\"1:123456789:web:abcdef123456\"};// Initialize Firebase\nconst app=initializeApp(firebaseConfig);const database=getDatabase(app);class FirebaseService{constructor(){this.medicalRecordsRef=void 0;this.patientsRef=void 0;this.medicalRecordsRef=ref(database,'medicalRecords');this.patientsRef=ref(database,'patients');}// Medical Records\nasync addMedicalRecord(record){try{const newRecordRef=push(this.medicalRecordsRef);const recordWithId=_objectSpread(_objectSpread({},record),{},{id:newRecordRef.key||\"record-\".concat(Date.now()),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});await set(newRecordRef,recordWithId);return recordWithId.id;}catch(error){console.error('Error adding medical record:',error);throw error;}}async getMedicalRecords(){try{const snapshot=await get(this.medicalRecordsRef);if(snapshot.exists()){const recordsData=snapshot.val();return Object.values(recordsData);}return[];}catch(error){console.error('Error getting medical records:',error);return[];}}onMedicalRecordsChange(callback){const handleValueChange=snapshot=>{if(snapshot.exists()){const recordsData=snapshot.val();const records=Object.values(recordsData);callback(records);}else{callback([]);}};onValue(this.medicalRecordsRef,handleValueChange);// Return unsubscribe function\nreturn()=>{off(this.medicalRecordsRef,'value',handleValueChange);};}// Patients\nasync addPatient(patient){try{const newPatientRef=push(this.patientsRef);const patientWithId=_objectSpread(_objectSpread({},patient),{},{id:newPatientRef.key||\"patient-\".concat(Date.now()),createdAt:new Date().toISOString()});await set(newPatientRef,patientWithId);return patientWithId.id;}catch(error){console.error('Error adding patient:',error);throw error;}}async getPatients(){try{const snapshot=await get(this.patientsRef);if(snapshot.exists()){const patientsData=snapshot.val();return Object.values(patientsData);}return[];}catch(error){console.error('Error getting patients:',error);return[];}}onPatientsChange(callback){const handleValueChange=snapshot=>{if(snapshot.exists()){const patientsData=snapshot.val();const patients=Object.values(patientsData);callback(patients);}else{callback([]);}};onValue(this.patientsRef,handleValueChange);// Return unsubscribe function\nreturn()=>{off(this.patientsRef,'value',handleValueChange);};}// Initialize with sample data if database is empty\nasync initializeSampleData(){try{const[records,patients]=await Promise.all([this.getMedicalRecords(),this.getPatients()]);if(patients.length===0){// Add sample patients\nconst samplePatients=[{name:'John Smith',email:'john.smith@email.com',dateOfBirth:'1985-03-15',phoneNumber:'+1-555-0123',address:'123 Main St, City, State 12345',emergencyContact:'Jane Smith - +1-555-0124 (Spouse)',insuranceProvider:'HealthFirst Insurance',insurancePolicyNumber:'HF123456789',lastVisit:'2024-12-15',upcomingAppointment:'2025-02-15',isActive:true},{name:'Alice Johnson',email:'alice.johnson@email.com',dateOfBirth:'1990-07-22',phoneNumber:'+1-555-0125',address:'456 Oak Ave, City, State 12345',emergencyContact:'Bob Johnson - +1-555-0126 (Father)',insuranceProvider:'MediCare Plus',insurancePolicyNumber:'MC987654321',lastVisit:'2024-11-20',upcomingAppointment:'2025-01-20',isActive:true}];for(const patient of samplePatients){await this.addPatient(patient);}}if(records.length===0){// Add sample records after patients are created\nconst patientsAfterInit=await this.getPatients();if(patientsAfterInit.length>0){const sampleRecords=[{patientId:patientsAfterInit[0].id,doctorId:'doctor-1',title:'Annual Physical Examination',description:'Comprehensive annual health checkup including vital signs, blood work, and general assessment.',date:'2025-01-15',diagnosis:'Patient in good health. Blood pressure slightly elevated.',prescription:'Lisinopril 10mg daily for blood pressure management',isEncrypted:false,isVerified:true,accessPermissions:['doctor-1',patientsAfterInit[0].id],blockchainHash:'',ipfsHash:'',nftTokenId:''}];for(const record of sampleRecords){await this.addMedicalRecord(record);}}}}catch(error){console.error('Error initializing sample data:',error);}}}export const firebaseService=new FirebaseService();","map":{"version":3,"names":["initializeApp","getDatabase","ref","push","onValue","off","set","get","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","database","FirebaseService","constructor","medicalRecordsRef","patientsRef","addMedicalRecord","record","newRecordRef","recordWithId","_objectSpread","id","key","concat","Date","now","createdAt","toISOString","updatedAt","error","console","getMedicalRecords","snapshot","exists","recordsData","val","Object","values","onMedicalRecordsChange","callback","handleValueChange","records","addPatient","patient","newPatientRef","patientWithId","getPatients","patientsData","onPatientsChange","patients","initializeSampleData","Promise","all","length","samplePatients","name","email","dateOfBirth","phoneNumber","address","emergencyContact","insuranceProvider","insurancePolicyNumber","lastVisit","upcomingAppointment","isActive","patientsAfterInit","sampleRecords","patientId","doctorId","title","description","date","diagnosis","prescription","isEncrypted","isVerified","accessPermissions","blockchainHash","ipfsHash","nftTokenId","firebaseService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/firebaseService.ts"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getDatabase, ref, push, onValue, off, DatabaseReference, set, get } from 'firebase/database';\r\nimport { MedicalRecord, Patient } from '../types';\r\n\r\n// Firebase configuration (replace with your actual config)\r\nconst firebaseConfig = {\r\n  apiKey: \"demo-api-key\",\r\n  authDomain: \"healthcare-system-demo.firebaseapp.com\",\r\n  databaseURL: \"https://healthcare-system-demo-default-rtdb.firebaseio.com\",\r\n  projectId: \"healthcare-system-demo\",\r\n  storageBucket: \"healthcare-system-demo.appspot.com\",\r\n  messagingSenderId: \"123456789\",\r\n  appId: \"1:123456789:web:abcdef123456\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst database = getDatabase(app);\r\n\r\nclass FirebaseService {\r\n  private medicalRecordsRef: DatabaseReference;\r\n  private patientsRef: DatabaseReference;\r\n\r\n  constructor() {\r\n    this.medicalRecordsRef = ref(database, 'medicalRecords');\r\n    this.patientsRef = ref(database, 'patients');\r\n  }\r\n\r\n  // Medical Records\r\n  async addMedicalRecord(record: Omit<MedicalRecord, 'id'>): Promise<string> {\r\n    try {\r\n      const newRecordRef = push(this.medicalRecordsRef);\r\n      const recordWithId = {\r\n        ...record,\r\n        id: newRecordRef.key || `record-${Date.now()}`,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      await set(newRecordRef, recordWithId);\r\n      return recordWithId.id;\r\n    } catch (error) {\r\n      console.error('Error adding medical record:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMedicalRecords(): Promise<MedicalRecord[]> {\r\n    try {\r\n      const snapshot = await get(this.medicalRecordsRef);\r\n      if (snapshot.exists()) {\r\n        const recordsData = snapshot.val();\r\n        return Object.values(recordsData) as MedicalRecord[];\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error getting medical records:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  onMedicalRecordsChange(callback: (records: MedicalRecord[]) => void): () => void {\r\n    const handleValueChange = (snapshot: any) => {\r\n      if (snapshot.exists()) {\r\n        const recordsData = snapshot.val();\r\n        const records = Object.values(recordsData) as MedicalRecord[];\r\n        callback(records);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    };\r\n\r\n    onValue(this.medicalRecordsRef, handleValueChange);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      off(this.medicalRecordsRef, 'value', handleValueChange);\r\n    };\r\n  }\r\n\r\n  // Patients\r\n  async addPatient(patient: Omit<Patient, 'id'>): Promise<string> {\r\n    try {\r\n      const newPatientRef = push(this.patientsRef);\r\n      const patientWithId = {\r\n        ...patient,\r\n        id: newPatientRef.key || `patient-${Date.now()}`,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      await set(newPatientRef, patientWithId);\r\n      return patientWithId.id;\r\n    } catch (error) {\r\n      console.error('Error adding patient:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getPatients(): Promise<Patient[]> {\r\n    try {\r\n      const snapshot = await get(this.patientsRef);\r\n      if (snapshot.exists()) {\r\n        const patientsData = snapshot.val();\r\n        return Object.values(patientsData) as Patient[];\r\n      }\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error getting patients:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  onPatientsChange(callback: (patients: Patient[]) => void): () => void {\r\n    const handleValueChange = (snapshot: any) => {\r\n      if (snapshot.exists()) {\r\n        const patientsData = snapshot.val();\r\n        const patients = Object.values(patientsData) as Patient[];\r\n        callback(patients);\r\n      } else {\r\n        callback([]);\r\n      }\r\n    };\r\n\r\n    onValue(this.patientsRef, handleValueChange);\r\n\r\n    // Return unsubscribe function\r\n    return () => {\r\n      off(this.patientsRef, 'value', handleValueChange);\r\n    };\r\n  }\r\n\r\n  // Initialize with sample data if database is empty\r\n  async initializeSampleData() {\r\n    try {\r\n      const [records, patients] = await Promise.all([\r\n        this.getMedicalRecords(),\r\n        this.getPatients()\r\n      ]);\r\n\r\n      if (patients.length === 0) {\r\n        // Add sample patients\r\n        const samplePatients: Omit<Patient, 'id'>[] = [\r\n          {\r\n            name: 'John Smith',\r\n            email: 'john.smith@email.com',\r\n            dateOfBirth: '1985-03-15',\r\n            phoneNumber: '+1-555-0123',\r\n            address: '123 Main St, City, State 12345',\r\n            emergencyContact: 'Jane Smith - +1-555-0124 (Spouse)',\r\n            insuranceProvider: 'HealthFirst Insurance',\r\n            insurancePolicyNumber: 'HF123456789',\r\n            lastVisit: '2024-12-15',\r\n            upcomingAppointment: '2025-02-15',\r\n            isActive: true\r\n          },\r\n          {\r\n            name: 'Alice Johnson',\r\n            email: 'alice.johnson@email.com',\r\n            dateOfBirth: '1990-07-22',\r\n            phoneNumber: '+1-555-0125',\r\n            address: '456 Oak Ave, City, State 12345',\r\n            emergencyContact: 'Bob Johnson - +1-555-0126 (Father)',\r\n            insuranceProvider: 'MediCare Plus',\r\n            insurancePolicyNumber: 'MC987654321',\r\n            lastVisit: '2024-11-20',\r\n            upcomingAppointment: '2025-01-20',\r\n            isActive: true\r\n          }\r\n        ];\r\n\r\n        for (const patient of samplePatients) {\r\n          await this.addPatient(patient);\r\n        }\r\n      }\r\n\r\n      if (records.length === 0) {\r\n        // Add sample records after patients are created\r\n        const patientsAfterInit = await this.getPatients();\r\n        if (patientsAfterInit.length > 0) {\r\n          const sampleRecords: Omit<MedicalRecord, 'id'>[] = [\r\n            {\r\n              patientId: patientsAfterInit[0].id,\r\n              doctorId: 'doctor-1',\r\n              title: 'Annual Physical Examination',\r\n              description: 'Comprehensive annual health checkup including vital signs, blood work, and general assessment.',\r\n              date: '2025-01-15',\r\n              diagnosis: 'Patient in good health. Blood pressure slightly elevated.',\r\n              prescription: 'Lisinopril 10mg daily for blood pressure management',\r\n              isEncrypted: false,\r\n              isVerified: true,\r\n              accessPermissions: ['doctor-1', patientsAfterInit[0].id],\r\n              blockchainHash: '',\r\n              ipfsHash: '',\r\n              nftTokenId: ''\r\n            }\r\n          ];\r\n\r\n          for (const record of sampleRecords) {\r\n            await this.addMedicalRecord(record);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing sample data:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const firebaseService = new FirebaseService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}