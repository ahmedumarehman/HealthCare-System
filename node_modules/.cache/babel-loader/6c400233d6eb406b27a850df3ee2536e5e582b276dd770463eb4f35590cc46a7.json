{"ast":null,"code":"// Known suspicious/hacked wallet addresses (in a real app, this would be fetched from a security API)\nconst SUSPICIOUS_ADDRESSES=['0x1234567890abcdef1234567890abcdef12345678',// Example fake address\n'0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',// Example malicious address\n'0x0000000000000000000000000000000000000000',// Null address\n'0xffffffffffffffffffffffffffffffffffffffff'// Max address (suspicious)\n// Add more known suspicious addresses here\n];// Common patterns for suspicious addresses\nconst SUSPICIOUS_PATTERNS=[/^0x0+$/,// All zeros\n/^0xf+$/i,// All Fs\n/^0x(dead|beef|cafe|babe|face)/i,// Common test/fake patterns\n/^0x1234567890abcdef/i// Sequential pattern\n];export class ClipboardMonitoringService{constructor(){this.isMonitoring=false;this.intervalId=null;this.lastClipboardContent='';this.alertSound=null;this.onSuspiciousAddressCallback=void 0;// Create alert sound\nthis.alertSound=new Audio();this.alertSound.src='data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFA==';this.alertSound.volume=0.5;}startMonitoring(onSuspiciousAddress){if(this.isMonitoring){return false;}this.onSuspiciousAddressCallback=onSuspiciousAddress;// Check if clipboard API is available\nif(!navigator.clipboard||!navigator.clipboard.readText){console.warn('Clipboard API not available');return false;}this.isMonitoring=true;this.intervalId=setInterval(()=>{this.checkClipboard();},1000);// Check every second\nconsole.log('Clipboard monitoring started');return true;}stopMonitoring(){if(!this.isMonitoring){return;}this.isMonitoring=false;if(this.intervalId){clearInterval(this.intervalId);this.intervalId=null;}console.log('Clipboard monitoring stopped');}isActive(){return this.isMonitoring;}async checkClipboard(){try{const clipboardText=await navigator.clipboard.readText();// Only check if clipboard content has changed\nif(clipboardText!==this.lastClipboardContent){this.lastClipboardContent=clipboardText;// Check for wallet addresses\nconst walletAddresses=this.extractWalletAddresses(clipboardText);for(const address of walletAddresses){if(this.isSuspiciousAddress(address)){this.alertSuspiciousAddress(address);}}}}catch(error){// Clipboard access might be denied or not available\nconsole.warn('Could not access clipboard:',error);}}extractWalletAddresses(text){// Ethereum address pattern (0x followed by 40 hex characters)\nconst ethPattern=/0x[a-fA-F0-9]{40}/g;// Bitcoin address patterns\nconst btcLegacyPattern=/[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g;const btcSegwitPattern=/bc1[a-z0-9]{39,59}/g;const addresses=[];// Extract Ethereum addresses\nconst ethMatches=text.match(ethPattern);if(ethMatches){addresses.push(...ethMatches);}// Extract Bitcoin addresses (basic validation)\nconst btcLegacyMatches=text.match(btcLegacyPattern);if(btcLegacyMatches){addresses.push(...btcLegacyMatches.filter(addr=>this.isValidBitcoinAddress(addr)));}const btcSegwitMatches=text.match(btcSegwitPattern);if(btcSegwitMatches){addresses.push(...btcSegwitMatches);}return addresses;}isValidBitcoinAddress(address){// Basic Bitcoin address validation (simplified)\nif(address.length<26||address.length>35){return false;}// Check if it starts with valid characters\nif(!/^[13]/.test(address)){return false;}// Check for invalid characters\nif(/[0OIl]/.test(address)){return false;}return true;}isSuspiciousAddress(address){// Check against known suspicious addresses\nif(SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())){return true;}// Check against suspicious patterns\nfor(const pattern of SUSPICIOUS_PATTERNS){if(pattern.test(address)){return true;}}// Additional heuristics for suspicious addresses\n// Check for repeated characters (might indicate test/fake address)\nconst hexPart=address.startsWith('0x')?address.slice(2):address;const charCounts={};for(const char of hexPart){charCounts[char]=(charCounts[char]||0)+1;}// If any character appears more than 60% of the time, it's suspicious\nconst maxCount=Math.max(...Object.values(charCounts));if(maxCount>hexPart.length*0.6){return true;}// Check for sequential patterns\nif(this.hasSequentialPattern(hexPart)){return true;}return false;}hasSequentialPattern(hex){let sequentialCount=0;for(let i=1;i<hex.length;i++){const prev=parseInt(hex[i-1],16);const curr=parseInt(hex[i],16);if(!isNaN(prev)&&!isNaN(curr)){if(Math.abs(curr-prev)===1){sequentialCount++;if(sequentialCount>=4){// 5 consecutive sequential characters\nreturn true;}}else{sequentialCount=0;}}}return false;}alertSuspiciousAddress(address){console.warn('ðŸš¨ SUSPICIOUS WALLET ADDRESS DETECTED:',address);// Play alert sound\nif(this.alertSound){this.alertSound.currentTime=0;this.alertSound.play().catch(error=>{console.warn('Could not play alert sound:',error);});}// Call the callback if provided\nif(this.onSuspiciousAddressCallback){this.onSuspiciousAddressCallback(address);}}// Method to add suspicious addresses dynamically\naddSuspiciousAddress(address){if(!SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())){SUSPICIOUS_ADDRESSES.push(address.toLowerCase());}}// Method to get current suspicious addresses (for testing/debugging)\ngetSuspiciousAddresses(){return[...SUSPICIOUS_ADDRESSES];}}// Singleton instance\nexport const clipboardMonitoringService=new ClipboardMonitoringService();","map":{"version":3,"names":["SUSPICIOUS_ADDRESSES","SUSPICIOUS_PATTERNS","ClipboardMonitoringService","constructor","isMonitoring","intervalId","lastClipboardContent","alertSound","onSuspiciousAddressCallback","Audio","src","volume","startMonitoring","onSuspiciousAddress","navigator","clipboard","readText","console","warn","setInterval","checkClipboard","log","stopMonitoring","clearInterval","isActive","clipboardText","walletAddresses","extractWalletAddresses","address","isSuspiciousAddress","alertSuspiciousAddress","error","text","ethPattern","btcLegacyPattern","btcSegwitPattern","addresses","ethMatches","match","push","btcLegacyMatches","filter","addr","isValidBitcoinAddress","btcSegwitMatches","length","test","includes","toLowerCase","pattern","hexPart","startsWith","slice","charCounts","char","maxCount","Math","max","Object","values","hasSequentialPattern","hex","sequentialCount","i","prev","parseInt","curr","isNaN","abs","currentTime","play","catch","addSuspiciousAddress","getSuspiciousAddresses","clipboardMonitoringService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/clipboardMonitoring.ts"],"sourcesContent":["// Known suspicious/hacked wallet addresses (in a real app, this would be fetched from a security API)\r\nconst SUSPICIOUS_ADDRESSES = [\r\n    '0x1234567890abcdef1234567890abcdef12345678', // Example fake address\r\n    '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', // Example malicious address\r\n    '0x0000000000000000000000000000000000000000', // Null address\r\n    '0xffffffffffffffffffffffffffffffffffffffff', // Max address (suspicious)\r\n    // Add more known suspicious addresses here\r\n];\r\n\r\n// Common patterns for suspicious addresses\r\nconst SUSPICIOUS_PATTERNS = [\r\n    /^0x0+$/, // All zeros\r\n    /^0xf+$/i, // All Fs\r\n    /^0x(dead|beef|cafe|babe|face)/i, // Common test/fake patterns\r\n    /^0x1234567890abcdef/i, // Sequential pattern\r\n];\r\n\r\nexport class ClipboardMonitoringService {\r\n    private isMonitoring = false;\r\n    private intervalId: NodeJS.Timeout | null = null;\r\n    private lastClipboardContent = '';\r\n    private alertSound: HTMLAudioElement | null = null;\r\n    private onSuspiciousAddressCallback?: (address: string) => void;\r\n\r\n    constructor() {\r\n        // Create alert sound\r\n        this.alertSound = new Audio();\r\n        this.alertSound.src = 'data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFApGn+DyvGUdBzuU2vHNeSsFJHfH8N2QQAoUXrTp66hVFA==';\r\n        this.alertSound.volume = 0.5;\r\n    }\r\n\r\n    startMonitoring(onSuspiciousAddress?: (address: string) => void): boolean {\r\n        if (this.isMonitoring) {\r\n            return false;\r\n        }\r\n\r\n        this.onSuspiciousAddressCallback = onSuspiciousAddress;\r\n\r\n        // Check if clipboard API is available\r\n        if (!navigator.clipboard || !navigator.clipboard.readText) {\r\n            console.warn('Clipboard API not available');\r\n            return false;\r\n        }\r\n\r\n        this.isMonitoring = true;\r\n        this.intervalId = setInterval(() => {\r\n            this.checkClipboard();\r\n        }, 1000); // Check every second\r\n\r\n        console.log('Clipboard monitoring started');\r\n        return true;\r\n    }\r\n\r\n    stopMonitoring(): void {\r\n        if (!this.isMonitoring) {\r\n            return;\r\n        }\r\n\r\n        this.isMonitoring = false;\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n        }\r\n\r\n        console.log('Clipboard monitoring stopped');\r\n    }\r\n\r\n    isActive(): boolean {\r\n        return this.isMonitoring;\r\n    }\r\n\r\n    private async checkClipboard(): Promise<void> {\r\n        try {\r\n            const clipboardText = await navigator.clipboard.readText();\r\n\r\n            // Only check if clipboard content has changed\r\n            if (clipboardText !== this.lastClipboardContent) {\r\n                this.lastClipboardContent = clipboardText;\r\n\r\n                // Check for wallet addresses\r\n                const walletAddresses = this.extractWalletAddresses(clipboardText);\r\n\r\n                for (const address of walletAddresses) {\r\n                    if (this.isSuspiciousAddress(address)) {\r\n                        this.alertSuspiciousAddress(address);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // Clipboard access might be denied or not available\r\n            console.warn('Could not access clipboard:', error);\r\n        }\r\n    }\r\n\r\n    private extractWalletAddresses(text: string): string[] {\r\n        // Ethereum address pattern (0x followed by 40 hex characters)\r\n        const ethPattern = /0x[a-fA-F0-9]{40}/g;\r\n\r\n        // Bitcoin address patterns\r\n        const btcLegacyPattern = /[13][a-km-zA-HJ-NP-Z1-9]{25,34}/g;\r\n        const btcSegwitPattern = /bc1[a-z0-9]{39,59}/g;\r\n\r\n        const addresses: string[] = [];\r\n\r\n        // Extract Ethereum addresses\r\n        const ethMatches = text.match(ethPattern);\r\n        if (ethMatches) {\r\n            addresses.push(...ethMatches);\r\n        }\r\n\r\n        // Extract Bitcoin addresses (basic validation)\r\n        const btcLegacyMatches = text.match(btcLegacyPattern);\r\n        if (btcLegacyMatches) {\r\n            addresses.push(...btcLegacyMatches.filter(addr => this.isValidBitcoinAddress(addr)));\r\n        }\r\n\r\n        const btcSegwitMatches = text.match(btcSegwitPattern);\r\n        if (btcSegwitMatches) {\r\n            addresses.push(...btcSegwitMatches);\r\n        }\r\n\r\n        return addresses;\r\n    }\r\n\r\n    private isValidBitcoinAddress(address: string): boolean {\r\n        // Basic Bitcoin address validation (simplified)\r\n        if (address.length < 26 || address.length > 35) {\r\n            return false;\r\n        }\r\n\r\n        // Check if it starts with valid characters\r\n        if (!/^[13]/.test(address)) {\r\n            return false;\r\n        }\r\n\r\n        // Check for invalid characters\r\n        if (/[0OIl]/.test(address)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private isSuspiciousAddress(address: string): boolean {\r\n        // Check against known suspicious addresses\r\n        if (SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\r\n            return true;\r\n        }\r\n\r\n        // Check against suspicious patterns\r\n        for (const pattern of SUSPICIOUS_PATTERNS) {\r\n            if (pattern.test(address)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // Additional heuristics for suspicious addresses\r\n\r\n        // Check for repeated characters (might indicate test/fake address)\r\n        const hexPart = address.startsWith('0x') ? address.slice(2) : address;\r\n        const charCounts: { [key: string]: number } = {};\r\n        for (const char of hexPart) {\r\n            charCounts[char] = (charCounts[char] || 0) + 1;\r\n        }\r\n\r\n        // If any character appears more than 60% of the time, it's suspicious\r\n        const maxCount = Math.max(...Object.values(charCounts) as number[]);\r\n        if (maxCount > hexPart.length * 0.6) {\r\n            return true;\r\n        }\r\n\r\n        // Check for sequential patterns\r\n        if (this.hasSequentialPattern(hexPart)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private hasSequentialPattern(hex: string): boolean {\r\n        let sequentialCount = 0;\r\n        for (let i = 1; i < hex.length; i++) {\r\n            const prev = parseInt(hex[i - 1], 16);\r\n            const curr = parseInt(hex[i], 16);\r\n\r\n            if (!isNaN(prev) && !isNaN(curr)) {\r\n                if (Math.abs(curr - prev) === 1) {\r\n                    sequentialCount++;\r\n                    if (sequentialCount >= 4) { // 5 consecutive sequential characters\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    sequentialCount = 0;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private alertSuspiciousAddress(address: string): void {\r\n        console.warn('ðŸš¨ SUSPICIOUS WALLET ADDRESS DETECTED:', address);\r\n\r\n        // Play alert sound\r\n        if (this.alertSound) {\r\n            this.alertSound.currentTime = 0;\r\n            this.alertSound.play().catch(error => {\r\n                console.warn('Could not play alert sound:', error);\r\n            });\r\n        }\r\n\r\n        // Call the callback if provided\r\n        if (this.onSuspiciousAddressCallback) {\r\n            this.onSuspiciousAddressCallback(address);\r\n        }\r\n    }\r\n\r\n    // Method to add suspicious addresses dynamically\r\n    addSuspiciousAddress(address: string): void {\r\n        if (!SUSPICIOUS_ADDRESSES.includes(address.toLowerCase())) {\r\n            SUSPICIOUS_ADDRESSES.push(address.toLowerCase());\r\n        }\r\n    }\r\n\r\n    // Method to get current suspicious addresses (for testing/debugging)\r\n    getSuspiciousAddresses(): string[] {\r\n        return [...SUSPICIOUS_ADDRESSES];\r\n    }\r\n}\r\n\r\n// Singleton instance\r\nexport const clipboardMonitoringService = new ClipboardMonitoringService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}