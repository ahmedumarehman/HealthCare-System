{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";export class RoleBasedAccessService{constructor(){this.currentUser=null;// Default permissions for each role\nthis.rolePermissions={admin:[{id:'admin_all',name:'Full System Access',description:'Complete access to all system resources',resource:'*',actions:['create','read','update','delete']},{id:'user_management',name:'User Management',description:'Manage all users and their roles',resource:'users',actions:['create','read','update','delete']},{id:'system_settings',name:'System Settings',description:'Configure system-wide settings',resource:'settings',actions:['create','read','update','delete']}],doctor:[{id:'patient_records_full',name:'Patient Records Management',description:'Full access to patient medical records',resource:'medical_records',actions:['create','read','update','delete']},{id:'prescription_management',name:'Prescription Management',description:'Create and manage prescriptions',resource:'prescriptions',actions:['create','read','update','delete']},{id:'patient_data_read',name:'Patient Data Access',description:'View patient information and history',resource:'patients',actions:['read']},{id:'insurance_claims',name:'Insurance Claims',description:'Submit and manage insurance claims',resource:'insurance',actions:['create','read','update']},{id:'blockchain_signing',name:'Blockchain Signing',description:'Sign smart contracts and blockchain transactions',resource:'blockchain',actions:['create','read']}],patient:[{id:'own_records_read',name:'Own Medical Records',description:'View own medical records and history',resource:'own_medical_records',actions:['read']},{id:'access_control',name:'Data Access Control',description:'Grant/revoke access to personal data',resource:'data_access',actions:['create','read','update','delete']},{id:'appointment_management',name:'Appointment Management',description:'Schedule and manage appointments',resource:'appointments',actions:['create','read','update','delete']},{id:'insurance_view',name:'Insurance Information',description:'View insurance claims and coverage',resource:'insurance',actions:['read']},{id:'consent_management',name:'Consent Management',description:'Manage consent forms and agreements',resource:'consent',actions:['create','read','update']}]};}setCurrentUser(user){this.currentUser=user;}getCurrentUser(){return this.currentUser;}getUserRole(){if(!this.currentUser)return null;return{role:this.currentUser.role,permissions:this.rolePermissions[this.currentUser.role]||[]};}hasPermission(resource,action){const userRole=this.getUserRole();if(!userRole)return false;// Admin has access to everything\nif(userRole.role==='admin')return true;// Check specific permissions\nreturn userRole.permissions.some(permission=>(permission.resource===resource||permission.resource==='*')&&permission.actions.includes(action));}canAccessResource(resource){const userRole=this.getUserRole();if(!userRole)return false;if(userRole.role==='admin')return true;return userRole.permissions.some(permission=>permission.resource===resource||permission.resource==='*');}getAccessibleFeatures(){const userRole=this.getUserRole();if(!userRole)return[];if(userRole.role==='admin'){return['dashboard','patients','doctors','records','prescriptions','insurance','blockchain','settings','users','analytics','audit'];}if(userRole.role==='doctor'){return['dashboard','patients','records','prescriptions','insurance','blockchain','analytics'];}if(userRole.role==='patient'){return['dashboard','my-records','appointments','insurance','consent','access-control'];}return[];}getDashboardConfig(){const userRole=this.getUserRole();if(!userRole)return null;const baseConfig={role:userRole.role,features:this.getAccessibleFeatures(),permissions:userRole.permissions};switch(userRole.role){case'admin':return _objectSpread(_objectSpread({},baseConfig),{},{title:'System Administrator Dashboard',primaryActions:['Manage Users','System Settings','View Analytics','Audit Logs'],widgets:['system-stats','user-activity','security-alerts','blockchain-status']});case'doctor':return _objectSpread(_objectSpread({},baseConfig),{},{title:'Doctor Dashboard',primaryActions:['View Patients','Create Records','Write Prescriptions','Review Claims'],widgets:['patient-list','recent-records','pending-prescriptions','insurance-claims']});case'patient':return _objectSpread(_objectSpread({},baseConfig),{},{title:'Patient Portal',primaryActions:['View My Records','Book Appointment','Manage Access','Insurance Status'],widgets:['my-health-summary','upcoming-appointments','recent-prescriptions','insurance-coverage']});default:return baseConfig;}}// Audit logging for access control\nlogAccess(resource,action,success,metadata){var _this$currentUser,_this$currentUser2;const logEntry={userId:((_this$currentUser=this.currentUser)===null||_this$currentUser===void 0?void 0:_this$currentUser.id)||'anonymous',userRole:((_this$currentUser2=this.currentUser)===null||_this$currentUser2===void 0?void 0:_this$currentUser2.role)||'unknown',resource,action,success,timestamp:new Date().toISOString(),metadata};console.log('Access Log:',logEntry);// In a real application, this would be sent to a logging service\n// You could integrate with your Firebase service or another logging solution\n}// Demo user creation for testing\ncreateDemoUsers(){return[{id:'admin_001',email:'admin@healthcare.com',name:'System Administrator',role:'admin',isVerified:true,twoFactorEnabled:true,walletAddress:'0x742d35Cc6551C0532a0fD0f7a7e2f1B987B5e9c4'},{id:'doctor_001',email:'dr.smith@healthcare.com',name:'Dr. Sarah Smith',role:'doctor',isVerified:true,twoFactorEnabled:true,walletAddress:'0x8Ba1f109551bD432803012645Hac136c22ABB49d'},{id:'patient_001',email:'john.doe@email.com',name:'John Doe',role:'patient',isVerified:true,twoFactorEnabled:false,walletAddress:'0x1234567890abcdef1234567890abcdef12345678'}];}}// Create and export singleton instance\nexport const rbacService=new RoleBasedAccessService();","map":{"version":3,"names":["RoleBasedAccessService","constructor","currentUser","rolePermissions","admin","id","name","description","resource","actions","doctor","patient","setCurrentUser","user","getCurrentUser","getUserRole","role","permissions","hasPermission","action","userRole","some","permission","includes","canAccessResource","getAccessibleFeatures","getDashboardConfig","baseConfig","features","_objectSpread","title","primaryActions","widgets","logAccess","success","metadata","_this$currentUser","_this$currentUser2","logEntry","userId","timestamp","Date","toISOString","console","log","createDemoUsers","email","isVerified","twoFactorEnabled","walletAddress","rbacService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/rbacService.ts"],"sourcesContent":["import { User, UserRole, Permission } from '../types';\r\n\r\nexport class RoleBasedAccessService {\r\n    private currentUser: User | null = null;\r\n\r\n    // Default permissions for each role\r\n    private rolePermissions: Record<string, Permission[]> = {\r\n        admin: [\r\n            {\r\n                id: 'admin_all',\r\n                name: 'Full System Access',\r\n                description: 'Complete access to all system resources',\r\n                resource: '*',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'user_management',\r\n                name: 'User Management',\r\n                description: 'Manage all users and their roles',\r\n                resource: 'users',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'system_settings',\r\n                name: 'System Settings',\r\n                description: 'Configure system-wide settings',\r\n                resource: 'settings',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            }\r\n        ],\r\n        doctor: [\r\n            {\r\n                id: 'patient_records_full',\r\n                name: 'Patient Records Management',\r\n                description: 'Full access to patient medical records',\r\n                resource: 'medical_records',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'prescription_management',\r\n                name: 'Prescription Management',\r\n                description: 'Create and manage prescriptions',\r\n                resource: 'prescriptions',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'patient_data_read',\r\n                name: 'Patient Data Access',\r\n                description: 'View patient information and history',\r\n                resource: 'patients',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'insurance_claims',\r\n                name: 'Insurance Claims',\r\n                description: 'Submit and manage insurance claims',\r\n                resource: 'insurance',\r\n                actions: ['create', 'read', 'update']\r\n            },\r\n            {\r\n                id: 'blockchain_signing',\r\n                name: 'Blockchain Signing',\r\n                description: 'Sign smart contracts and blockchain transactions',\r\n                resource: 'blockchain',\r\n                actions: ['create', 'read']\r\n            }\r\n        ],\r\n        patient: [\r\n            {\r\n                id: 'own_records_read',\r\n                name: 'Own Medical Records',\r\n                description: 'View own medical records and history',\r\n                resource: 'own_medical_records',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'access_control',\r\n                name: 'Data Access Control',\r\n                description: 'Grant/revoke access to personal data',\r\n                resource: 'data_access',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'appointment_management',\r\n                name: 'Appointment Management',\r\n                description: 'Schedule and manage appointments',\r\n                resource: 'appointments',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'insurance_view',\r\n                name: 'Insurance Information',\r\n                description: 'View insurance claims and coverage',\r\n                resource: 'insurance',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'consent_management',\r\n                name: 'Consent Management',\r\n                description: 'Manage consent forms and agreements',\r\n                resource: 'consent',\r\n                actions: ['create', 'read', 'update']\r\n            }\r\n        ]\r\n    };\r\n\r\n    setCurrentUser(user: User) {\r\n        this.currentUser = user;\r\n    }\r\n\r\n    getCurrentUser(): User | null {\r\n        return this.currentUser;\r\n    }\r\n\r\n    getUserRole(): UserRole | null {\r\n        if (!this.currentUser) return null;\r\n        \r\n        return {\r\n            role: this.currentUser.role,\r\n            permissions: this.rolePermissions[this.currentUser.role] || []\r\n        };\r\n    }\r\n\r\n    hasPermission(resource: string, action: 'create' | 'read' | 'update' | 'delete'): boolean {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return false;\r\n\r\n        // Admin has access to everything\r\n        if (userRole.role === 'admin') return true;\r\n\r\n        // Check specific permissions\r\n        return userRole.permissions.some(permission => \r\n            (permission.resource === resource || permission.resource === '*') &&\r\n            permission.actions.includes(action)\r\n        );\r\n    }\r\n\r\n    canAccessResource(resource: string): boolean {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return false;\r\n\r\n        if (userRole.role === 'admin') return true;\r\n\r\n        return userRole.permissions.some(permission => \r\n            permission.resource === resource || permission.resource === '*'\r\n        );\r\n    }\r\n\r\n    getAccessibleFeatures(): string[] {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return [];\r\n\r\n        if (userRole.role === 'admin') {\r\n            return ['dashboard', 'patients', 'doctors', 'records', 'prescriptions', 'insurance', 'blockchain', 'settings', 'users', 'analytics', 'audit'];\r\n        }\r\n\r\n        if (userRole.role === 'doctor') {\r\n            return ['dashboard', 'patients', 'records', 'prescriptions', 'insurance', 'blockchain', 'analytics'];\r\n        }\r\n\r\n        if (userRole.role === 'patient') {\r\n            return ['dashboard', 'my-records', 'appointments', 'insurance', 'consent', 'access-control'];\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    getDashboardConfig() {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return null;\r\n\r\n        const baseConfig = {\r\n            role: userRole.role,\r\n            features: this.getAccessibleFeatures(),\r\n            permissions: userRole.permissions\r\n        };\r\n\r\n        switch (userRole.role) {\r\n            case 'admin':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'System Administrator Dashboard',\r\n                    primaryActions: [\r\n                        'Manage Users',\r\n                        'System Settings',\r\n                        'View Analytics',\r\n                        'Audit Logs'\r\n                    ],\r\n                    widgets: [\r\n                        'system-stats',\r\n                        'user-activity',\r\n                        'security-alerts',\r\n                        'blockchain-status'\r\n                    ]\r\n                };\r\n\r\n            case 'doctor':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'Doctor Dashboard',\r\n                    primaryActions: [\r\n                        'View Patients',\r\n                        'Create Records',\r\n                        'Write Prescriptions',\r\n                        'Review Claims'\r\n                    ],\r\n                    widgets: [\r\n                        'patient-list',\r\n                        'recent-records',\r\n                        'pending-prescriptions',\r\n                        'insurance-claims'\r\n                    ]\r\n                };\r\n\r\n            case 'patient':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'Patient Portal',\r\n                    primaryActions: [\r\n                        'View My Records',\r\n                        'Book Appointment',\r\n                        'Manage Access',\r\n                        'Insurance Status'\r\n                    ],\r\n                    widgets: [\r\n                        'my-health-summary',\r\n                        'upcoming-appointments',\r\n                        'recent-prescriptions',\r\n                        'insurance-coverage'\r\n                    ]\r\n                };\r\n\r\n            default:\r\n                return baseConfig;\r\n        }\r\n    }\r\n\r\n    // Audit logging for access control\r\n    logAccess(resource: string, action: string, success: boolean, metadata?: any) {\r\n        const logEntry = {\r\n            userId: this.currentUser?.id || 'anonymous',\r\n            userRole: this.currentUser?.role || 'unknown',\r\n            resource,\r\n            action,\r\n            success,\r\n            timestamp: new Date().toISOString(),\r\n            metadata\r\n        };\r\n\r\n        console.log('Access Log:', logEntry);\r\n        \r\n        // In a real application, this would be sent to a logging service\r\n        // You could integrate with your Firebase service or another logging solution\r\n    }\r\n\r\n    // Demo user creation for testing\r\n    createDemoUsers(): User[] {\r\n        return [\r\n            {\r\n                id: 'admin_001',\r\n                email: 'admin@healthcare.com',\r\n                name: 'System Administrator',\r\n                role: 'admin',\r\n                isVerified: true,\r\n                twoFactorEnabled: true,\r\n                walletAddress: '0x742d35Cc6551C0532a0fD0f7a7e2f1B987B5e9c4'\r\n            },\r\n            {\r\n                id: 'doctor_001',\r\n                email: 'dr.smith@healthcare.com',\r\n                name: 'Dr. Sarah Smith',\r\n                role: 'doctor',\r\n                isVerified: true,\r\n                twoFactorEnabled: true,\r\n                walletAddress: '0x8Ba1f109551bD432803012645Hac136c22ABB49d'\r\n            },\r\n            {\r\n                id: 'patient_001',\r\n                email: 'john.doe@email.com',\r\n                name: 'John Doe',\r\n                role: 'patient',\r\n                isVerified: true,\r\n                twoFactorEnabled: false,\r\n                walletAddress: '0x1234567890abcdef1234567890abcdef12345678'\r\n            }\r\n        ];\r\n    }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const rbacService = new RoleBasedAccessService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}