{"ast":null,"code":"import CryptoJS from 'crypto-js';\nclass EncryptionService {\n  constructor() {\n    this.jobs = [];\n  }\n  // Simulate PBKDF2 key derivation (similar to Python version)\n  deriveKey(password, salt) {\n    return CryptoJS.PBKDF2(password, salt, {\n      keySize: 256 / 32,\n      iterations: 100000\n    }).toString();\n  }\n\n  // Encrypt file content\n  async encryptData(data, password) {\n    try {\n      const salt = CryptoJS.lib.WordArray.random(128 / 8).toString();\n      const key = this.deriveKey(password, salt);\n      const encrypted = CryptoJS.AES.encrypt(data, key).toString();\n      return {\n        encrypted,\n        salt\n      };\n    } catch (error) {\n      throw new Error(`Encryption failed: ${error}`);\n    }\n  }\n\n  // Decrypt file content\n  async decryptData(encryptedData, password, salt) {\n    try {\n      const key = this.deriveKey(password, salt);\n      const bytes = CryptoJS.AES.decrypt(encryptedData, key);\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n      if (!decrypted) {\n        throw new Error('Invalid password or corrupted data');\n      }\n      return decrypted;\n    } catch (error) {\n      throw new Error(`Decryption failed: ${error}`);\n    }\n  }\n\n  // Handle file encryption (browser-based)\n  async encryptFile(file, password) {\n    const jobId = `enc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const job = {\n      id: jobId,\n      fileName: file.name,\n      operation: 'encrypt',\n      status: 'processing',\n      timestamp: new Date().toISOString()\n    };\n    this.jobs.push(job);\n    try {\n      const text = await file.text();\n      const {\n        encrypted,\n        salt\n      } = await this.encryptData(text, password);\n\n      // Create download blob\n      const encryptedFile = new Blob([JSON.stringify({\n        encrypted,\n        salt,\n        originalName: file.name\n      })], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(encryptedFile);\n      job.status = 'completed';\n      job.outputPath = url;\n      return job;\n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : 'Unknown error';\n      throw error;\n    }\n  }\n\n  // Handle file decryption (browser-based)\n  async decryptFile(file, password) {\n    const jobId = `dec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const job = {\n      id: jobId,\n      fileName: file.name,\n      operation: 'decrypt',\n      status: 'processing',\n      timestamp: new Date().toISOString()\n    };\n    this.jobs.push(job);\n    try {\n      const text = await file.text();\n      const {\n        encrypted,\n        salt,\n        originalName\n      } = JSON.parse(text);\n      const decrypted = await this.decryptData(encrypted, password, salt);\n\n      // Create download blob\n      const decryptedFile = new Blob([decrypted], {\n        type: 'text/plain'\n      });\n      const url = URL.createObjectURL(decryptedFile);\n      job.status = 'completed';\n      job.outputPath = url;\n      job.fileName = originalName || 'decrypted_file.txt';\n      return job;\n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : 'Unknown error';\n      throw error;\n    }\n  }\n\n  // Get all encryption jobs\n  getJobs() {\n    return this.jobs;\n  }\n\n  // Clear completed jobs\n  clearCompletedJobs() {\n    this.jobs = this.jobs.filter(job => job.status === 'processing');\n  }\n\n  // Generate secure random password\n  generateSecurePassword(length = 16) {\n    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n    let password = '';\n    for (let i = 0; i < length; i++) {\n      password += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return password;\n  }\n\n  // Hash data for integrity verification\n  hashData(data) {\n    return CryptoJS.SHA256(data).toString();\n  }\n}\nexport const encryptionService = new EncryptionService();","map":{"version":3,"names":["CryptoJS","EncryptionService","constructor","jobs","deriveKey","password","salt","PBKDF2","keySize","iterations","toString","encryptData","data","lib","WordArray","random","key","encrypted","AES","encrypt","error","Error","decryptData","encryptedData","bytes","decrypt","decrypted","enc","Utf8","encryptFile","file","jobId","Date","now","Math","substr","job","id","fileName","name","operation","status","timestamp","toISOString","push","text","encryptedFile","Blob","JSON","stringify","originalName","type","url","URL","createObjectURL","outputPath","message","decryptFile","parse","decryptedFile","getJobs","clearCompletedJobs","filter","generateSecurePassword","length","charset","i","charAt","floor","hashData","SHA256","encryptionService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/encryptionService.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\nimport { EncryptionJob } from '../types';\r\n\r\nclass EncryptionService {\r\n    private jobs: EncryptionJob[] = [];\r\n\r\n    // Simulate PBKDF2 key derivation (similar to Python version)\r\n    private deriveKey(password: string, salt: string): string {\r\n        return CryptoJS.PBKDF2(password, salt, {\r\n            keySize: 256 / 32,\r\n            iterations: 100000\r\n        }).toString();\r\n    }\r\n\r\n    // Encrypt file content\r\n    async encryptData(data: string, password: string): Promise<{ encrypted: string; salt: string }> {\r\n        try {\r\n            const salt = CryptoJS.lib.WordArray.random(128 / 8).toString();\r\n            const key = this.deriveKey(password, salt);\r\n            const encrypted = CryptoJS.AES.encrypt(data, key).toString();\r\n\r\n            return { encrypted, salt };\r\n        } catch (error) {\r\n            throw new Error(`Encryption failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Decrypt file content\r\n    async decryptData(encryptedData: string, password: string, salt: string): Promise<string> {\r\n        try {\r\n            const key = this.deriveKey(password, salt);\r\n            const bytes = CryptoJS.AES.decrypt(encryptedData, key);\r\n            const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n            if (!decrypted) {\r\n                throw new Error('Invalid password or corrupted data');\r\n            }\r\n\r\n            return decrypted;\r\n        } catch (error) {\r\n            throw new Error(`Decryption failed: ${error}`);\r\n        }\r\n    }\r\n\r\n    // Handle file encryption (browser-based)\r\n    async encryptFile(file: File, password: string): Promise<EncryptionJob> {\r\n        const jobId = `enc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n        const job: EncryptionJob = {\r\n            id: jobId,\r\n            fileName: file.name,\r\n            operation: 'encrypt',\r\n            status: 'processing',\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        this.jobs.push(job);\r\n\r\n        try {\r\n            const text = await file.text();\r\n            const { encrypted, salt } = await this.encryptData(text, password);\r\n\r\n            // Create download blob\r\n            const encryptedFile = new Blob([JSON.stringify({ encrypted, salt, originalName: file.name })], {\r\n                type: 'application/json'\r\n            });\r\n\r\n            const url = URL.createObjectURL(encryptedFile);\r\n\r\n            job.status = 'completed';\r\n            job.outputPath = url;\r\n\r\n            return job;\r\n        } catch (error) {\r\n            job.status = 'failed';\r\n            job.error = error instanceof Error ? error.message : 'Unknown error';\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Handle file decryption (browser-based)\r\n    async decryptFile(file: File, password: string): Promise<EncryptionJob> {\r\n        const jobId = `dec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n        const job: EncryptionJob = {\r\n            id: jobId,\r\n            fileName: file.name,\r\n            operation: 'decrypt',\r\n            status: 'processing',\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        this.jobs.push(job);\r\n\r\n        try {\r\n            const text = await file.text();\r\n            const { encrypted, salt, originalName } = JSON.parse(text);\r\n\r\n            const decrypted = await this.decryptData(encrypted, password, salt);\r\n\r\n            // Create download blob\r\n            const decryptedFile = new Blob([decrypted], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(decryptedFile);\r\n\r\n            job.status = 'completed';\r\n            job.outputPath = url;\r\n            job.fileName = originalName || 'decrypted_file.txt';\r\n\r\n            return job;\r\n        } catch (error) {\r\n            job.status = 'failed';\r\n            job.error = error instanceof Error ? error.message : 'Unknown error';\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Get all encryption jobs\r\n    getJobs(): EncryptionJob[] {\r\n        return this.jobs;\r\n    }\r\n\r\n    // Clear completed jobs\r\n    clearCompletedJobs(): void {\r\n        this.jobs = this.jobs.filter(job => job.status === 'processing');\r\n    }\r\n\r\n    // Generate secure random password\r\n    generateSecurePassword(length: number = 16): string {\r\n        const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r\n        let password = '';\r\n        for (let i = 0; i < length; i++) {\r\n            password += charset.charAt(Math.floor(Math.random() * charset.length));\r\n        }\r\n        return password;\r\n    }\r\n\r\n    // Hash data for integrity verification\r\n    hashData(data: string): string {\r\n        return CryptoJS.SHA256(data).toString();\r\n    }\r\n}\r\n\r\nexport const encryptionService = new EncryptionService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}