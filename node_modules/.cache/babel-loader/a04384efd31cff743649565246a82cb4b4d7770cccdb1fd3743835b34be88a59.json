{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATA\\\\CAREER\\\\INTERNSHIPS\\\\EMRChains Internship NSTP\\\\PROJECTS\\\\HEALTHCARE_SYSTEM\\\\src\\\\components\\\\Auth\\\\VerificationFlow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport EnhancedBiometricVerification from './EnhancedBiometricVerification';\nimport EnhancedTwoFactorAuth from './EnhancedTwoFactorAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificationFlow = ({\n  isOpen,\n  onClose,\n  onComplete,\n  onFailure\n}) => {\n  _s();\n  const [currentStep, setCurrentStep] = useState('biometric');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleBiometricSuccess = () => {\n    console.log('✅ Biometric verification successful, proceeding to 2FA...');\n    setCurrentStep('twofa');\n  };\n  const handleBiometricFailure = error => {\n    console.error('❌ Biometric verification failed:', error);\n    onFailure === null || onFailure === void 0 ? void 0 : onFailure(error);\n  };\n  const handleTwoFactorSuccess = code => {\n    setIsLoading(true);\n\n    // Simulate 2FA verification\n    setTimeout(() => {\n      // Accept any 6-digit code for demo purposes\n      if (code.length === 6 && /^\\d+$/.test(code)) {\n        console.log('✅ Two-factor authentication successful!');\n        setCurrentStep('complete');\n        setIsLoading(false);\n\n        // Complete the verification process\n        setTimeout(() => {\n          onComplete();\n        }, 1000);\n      } else {\n        console.error('❌ Invalid 2FA code format');\n        setIsLoading(false);\n        onFailure === null || onFailure === void 0 ? void 0 : onFailure('Invalid verification code format');\n      }\n    }, 2000);\n  };\n  const handleClose = () => {\n    // Reset the flow when closing\n    setCurrentStep('biometric');\n    setIsLoading(false);\n    onClose();\n  };\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 'biometric':\n        return /*#__PURE__*/_jsxDEV(EnhancedBiometricVerification, {\n          isOpen: isOpen,\n          onClose: handleClose,\n          onSuccess: handleBiometricSuccess,\n          onFailure: handleBiometricFailure,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      case 'twofa':\n        return /*#__PURE__*/_jsxDEV(EnhancedTwoFactorAuth, {\n          isOpen: isOpen,\n          onClose: handleClose,\n          onVerify: handleTwoFactorSuccess,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this);\n      case 'complete':\n        return null;\n      // The flow is complete, component will close\n\n      default:\n        return null;\n    }\n  };\n  return renderCurrentStep();\n};\n_s(VerificationFlow, \"WfVP0NIs8oDzY5QpR8ndB0/hZUo=\");\n_c = VerificationFlow;\nexport default VerificationFlow;\nvar _c;\n$RefreshReg$(_c, \"VerificationFlow\");","map":{"version":3,"names":["React","useState","EnhancedBiometricVerification","EnhancedTwoFactorAuth","jsxDEV","_jsxDEV","VerificationFlow","isOpen","onClose","onComplete","onFailure","_s","currentStep","setCurrentStep","isLoading","setIsLoading","handleBiometricSuccess","console","log","handleBiometricFailure","error","handleTwoFactorSuccess","code","setTimeout","length","test","handleClose","renderCurrentStep","onSuccess","fileName","_jsxFileName","lineNumber","columnNumber","onVerify","_c","$RefreshReg$"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/components/Auth/VerificationFlow.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport EnhancedBiometricVerification from './EnhancedBiometricVerification';\r\nimport EnhancedTwoFactorAuth from './EnhancedTwoFactorAuth';\r\n\r\ninterface VerificationFlowProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    onComplete: () => void;\r\n    onFailure?: (error: string) => void;\r\n}\r\n\r\nconst VerificationFlow: React.FC<VerificationFlowProps> = ({\r\n    isOpen,\r\n    onClose,\r\n    onComplete,\r\n    onFailure\r\n}) => {\r\n    const [currentStep, setCurrentStep] = useState<'biometric' | 'twofa' | 'complete'>('biometric');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleBiometricSuccess = () => {\r\n        console.log('✅ Biometric verification successful, proceeding to 2FA...');\r\n        setCurrentStep('twofa');\r\n    };\r\n\r\n    const handleBiometricFailure = (error: string) => {\r\n        console.error('❌ Biometric verification failed:', error);\r\n        onFailure?.(error);\r\n    };\r\n\r\n    const handleTwoFactorSuccess = (code: string) => {\r\n        setIsLoading(true);\r\n\r\n        // Simulate 2FA verification\r\n        setTimeout(() => {\r\n            // Accept any 6-digit code for demo purposes\r\n            if (code.length === 6 && /^\\d+$/.test(code)) {\r\n                console.log('✅ Two-factor authentication successful!');\r\n                setCurrentStep('complete');\r\n                setIsLoading(false);\r\n\r\n                // Complete the verification process\r\n                setTimeout(() => {\r\n                    onComplete();\r\n                }, 1000);\r\n            } else {\r\n                console.error('❌ Invalid 2FA code format');\r\n                setIsLoading(false);\r\n                onFailure?.('Invalid verification code format');\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        // Reset the flow when closing\r\n        setCurrentStep('biometric');\r\n        setIsLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    const renderCurrentStep = () => {\r\n        switch (currentStep) {\r\n            case 'biometric':\r\n                return (\r\n                    <EnhancedBiometricVerification\r\n                        isOpen={isOpen}\r\n                        onClose={handleClose}\r\n                        onSuccess={handleBiometricSuccess}\r\n                        onFailure={handleBiometricFailure}\r\n                        isLoading={isLoading}\r\n                    />\r\n                );\r\n\r\n            case 'twofa':\r\n                return (\r\n                    <EnhancedTwoFactorAuth\r\n                        isOpen={isOpen}\r\n                        onClose={handleClose}\r\n                        onVerify={handleTwoFactorSuccess}\r\n                        isLoading={isLoading}\r\n                    />\r\n                );\r\n\r\n            case 'complete':\r\n                return null; // The flow is complete, component will close\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return renderCurrentStep();\r\n};\r\n\r\nexport default VerificationFlow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,6BAA6B,MAAM,iCAAiC;AAC3E,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS5D,MAAMC,gBAAiD,GAAGA,CAAC;EACvDC,MAAM;EACNC,OAAO;EACPC,UAAU;EACVC;AACJ,CAAC,KAAK;EAAAC,EAAA;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAqC,WAAW,CAAC;EAC/F,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMe,sBAAsB,GAAGA,CAAA,KAAM;IACjCC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IACxEL,cAAc,CAAC,OAAO,CAAC;EAC3B,CAAC;EAED,MAAMM,sBAAsB,GAAIC,KAAa,IAAK;IAC9CH,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxDV,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGU,KAAK,CAAC;EACtB,CAAC;EAED,MAAMC,sBAAsB,GAAIC,IAAY,IAAK;IAC7CP,YAAY,CAAC,IAAI,CAAC;;IAElB;IACAQ,UAAU,CAAC,MAAM;MACb;MACA,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,IAAI,OAAO,CAACC,IAAI,CAACH,IAAI,CAAC,EAAE;QACzCL,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtDL,cAAc,CAAC,UAAU,CAAC;QAC1BE,YAAY,CAAC,KAAK,CAAC;;QAEnB;QACAQ,UAAU,CAAC,MAAM;UACbd,UAAU,CAAC,CAAC;QAChB,CAAC,EAAE,IAAI,CAAC;MACZ,CAAC,MAAM;QACHQ,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC;QAC1CL,YAAY,CAAC,KAAK,CAAC;QACnBL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,kCAAkC,CAAC;MACnD;IACJ,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAED,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACtB;IACAb,cAAc,CAAC,WAAW,CAAC;IAC3BE,YAAY,CAAC,KAAK,CAAC;IACnBP,OAAO,CAAC,CAAC;EACb,CAAC;EAED,MAAMmB,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,QAAQf,WAAW;MACf,KAAK,WAAW;QACZ,oBACIP,OAAA,CAACH,6BAA6B;UAC1BK,MAAM,EAAEA,MAAO;UACfC,OAAO,EAAEkB,WAAY;UACrBE,SAAS,EAAEZ,sBAAuB;UAClCN,SAAS,EAAES,sBAAuB;UAClCL,SAAS,EAAEA;QAAU;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAGV,KAAK,OAAO;QACR,oBACI3B,OAAA,CAACF,qBAAqB;UAClBI,MAAM,EAAEA,MAAO;UACfC,OAAO,EAAEkB,WAAY;UACrBO,QAAQ,EAAEZ,sBAAuB;UACjCP,SAAS,EAAEA;QAAU;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAGV,KAAK,UAAU;QACX,OAAO,IAAI;MAAE;;MAEjB;QACI,OAAO,IAAI;IACnB;EACJ,CAAC;EAED,OAAOL,iBAAiB,CAAC,CAAC;AAC9B,CAAC;AAAChB,EAAA,CAjFIL,gBAAiD;AAAA4B,EAAA,GAAjD5B,gBAAiD;AAmFvD,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}