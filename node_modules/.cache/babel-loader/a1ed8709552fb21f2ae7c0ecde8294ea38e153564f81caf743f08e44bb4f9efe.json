{"ast":null,"code":"export class RoleBasedAccessService {\n  constructor() {\n    this.currentUser = null;\n    // Default permissions for each role\n    this.rolePermissions = {\n      admin: [{\n        id: 'admin_all',\n        name: 'Full System Access',\n        description: 'Complete access to all system resources',\n        resource: '*',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'user_management',\n        name: 'User Management',\n        description: 'Manage all users and their roles',\n        resource: 'users',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'system_settings',\n        name: 'System Settings',\n        description: 'Configure system-wide settings',\n        resource: 'settings',\n        actions: ['create', 'read', 'update', 'delete']\n      }],\n      doctor: [{\n        id: 'patient_records_full',\n        name: 'Patient Records Management',\n        description: 'Full access to patient medical records',\n        resource: 'medical_records',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'prescription_management',\n        name: 'Prescription Management',\n        description: 'Create and manage prescriptions',\n        resource: 'prescriptions',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'patient_data_read',\n        name: 'Patient Data Access',\n        description: 'View patient information and history',\n        resource: 'patients',\n        actions: ['read']\n      }, {\n        id: 'insurance_claims',\n        name: 'Insurance Claims',\n        description: 'Submit and manage insurance claims',\n        resource: 'insurance',\n        actions: ['create', 'read', 'update']\n      }, {\n        id: 'blockchain_signing',\n        name: 'Blockchain Signing',\n        description: 'Sign smart contracts and blockchain transactions',\n        resource: 'blockchain',\n        actions: ['create', 'read']\n      }],\n      patient: [{\n        id: 'own_records_read',\n        name: 'Own Medical Records',\n        description: 'View own medical records and history',\n        resource: 'own_medical_records',\n        actions: ['read']\n      }, {\n        id: 'access_control',\n        name: 'Data Access Control',\n        description: 'Grant/revoke access to personal data',\n        resource: 'data_access',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'appointment_management',\n        name: 'Appointment Management',\n        description: 'Schedule and manage appointments',\n        resource: 'appointments',\n        actions: ['create', 'read', 'update', 'delete']\n      }, {\n        id: 'insurance_view',\n        name: 'Insurance Information',\n        description: 'View insurance claims and coverage',\n        resource: 'insurance',\n        actions: ['read']\n      }, {\n        id: 'consent_management',\n        name: 'Consent Management',\n        description: 'Manage consent forms and agreements',\n        resource: 'consent',\n        actions: ['create', 'read', 'update']\n      }]\n    };\n  }\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  getUserRole() {\n    if (!this.currentUser) return null;\n    return {\n      role: this.currentUser.role,\n      permissions: this.rolePermissions[this.currentUser.role] || []\n    };\n  }\n  hasPermission(resource, action) {\n    const userRole = this.getUserRole();\n    if (!userRole) return false;\n\n    // Admin has access to everything\n    if (userRole.role === 'admin') return true;\n\n    // Check specific permissions\n    return userRole.permissions.some(permission => (permission.resource === resource || permission.resource === '*') && permission.actions.includes(action));\n  }\n  canAccessResource(resource) {\n    const userRole = this.getUserRole();\n    if (!userRole) return false;\n    if (userRole.role === 'admin') return true;\n    return userRole.permissions.some(permission => permission.resource === resource || permission.resource === '*');\n  }\n  getAccessibleFeatures() {\n    const userRole = this.getUserRole();\n    if (!userRole) return [];\n    if (userRole.role === 'admin') {\n      return ['dashboard', 'patients', 'doctors', 'records', 'prescriptions', 'insurance', 'blockchain', 'settings', 'users', 'analytics', 'audit'];\n    }\n    if (userRole.role === 'doctor') {\n      return ['dashboard', 'patients', 'records', 'prescriptions', 'insurance', 'blockchain', 'analytics'];\n    }\n    if (userRole.role === 'patient') {\n      return ['dashboard', 'my-records', 'appointments', 'insurance', 'consent', 'access-control'];\n    }\n    return [];\n  }\n  getDashboardConfig() {\n    const userRole = this.getUserRole();\n    if (!userRole) return null;\n    const baseConfig = {\n      role: userRole.role,\n      features: this.getAccessibleFeatures(),\n      permissions: userRole.permissions\n    };\n    switch (userRole.role) {\n      case 'admin':\n        return {\n          ...baseConfig,\n          title: 'System Administrator Dashboard',\n          primaryActions: ['Manage Users', 'System Settings', 'View Analytics', 'Audit Logs'],\n          widgets: ['system-stats', 'user-activity', 'security-alerts', 'blockchain-status']\n        };\n      case 'doctor':\n        return {\n          ...baseConfig,\n          title: 'Doctor Dashboard',\n          primaryActions: ['View Patients', 'Create Records', 'Write Prescriptions', 'Review Claims'],\n          widgets: ['patient-list', 'recent-records', 'pending-prescriptions', 'insurance-claims']\n        };\n      case 'patient':\n        return {\n          ...baseConfig,\n          title: 'Patient Portal',\n          primaryActions: ['View My Records', 'Book Appointment', 'Manage Access', 'Insurance Status'],\n          widgets: ['my-health-summary', 'upcoming-appointments', 'recent-prescriptions', 'insurance-coverage']\n        };\n      default:\n        return baseConfig;\n    }\n  }\n\n  // Audit logging for access control\n  logAccess(resource, action, success, metadata) {\n    var _this$currentUser, _this$currentUser2;\n    const logEntry = {\n      userId: ((_this$currentUser = this.currentUser) === null || _this$currentUser === void 0 ? void 0 : _this$currentUser.id) || 'anonymous',\n      userRole: ((_this$currentUser2 = this.currentUser) === null || _this$currentUser2 === void 0 ? void 0 : _this$currentUser2.role) || 'unknown',\n      resource,\n      action,\n      success,\n      timestamp: new Date().toISOString(),\n      metadata\n    };\n    console.log('Access Log:', logEntry);\n\n    // In a real application, this would be sent to a logging service\n    // You could integrate with your Firebase service or another logging solution\n  }\n  getRolePermissions(role) {\n    return this.rolePermissions[role] || [];\n  }\n  initializeDemoUsers() {\n    // Initialize demo users for testing\n    console.log('Demo users initialized');\n  }\n  logout() {\n    this.currentUser = null;\n    console.log('User logged out');\n  }\n\n  // Demo user creation for testing\n  createDemoUsers() {\n    return [{\n      id: 'admin_001',\n      email: 'admin@healthcare.com',\n      name: 'System Administrator',\n      role: 'admin',\n      isActive: true,\n      lastLogin: new Date().toISOString(),\n      permissions: this.getRolePermissions('admin'),\n      isVerified: true,\n      twoFactorEnabled: true,\n      walletAddress: '0x742d35Cc6551C0532a0fD0f7a7e2f1B987B5e9c4'\n    }, {\n      id: 'doctor_001',\n      email: 'dr.smith@healthcare.com',\n      name: 'Dr. Sarah Smith',\n      role: 'doctor',\n      isActive: true,\n      lastLogin: new Date().toISOString(),\n      permissions: this.getRolePermissions('doctor'),\n      isVerified: true,\n      twoFactorEnabled: true,\n      walletAddress: '0x8Ba1f109551bD432803012645Hac136c22ABB49d'\n    }, {\n      id: 'patient_001',\n      email: 'john.doe@email.com',\n      name: 'John Doe',\n      role: 'patient',\n      isActive: true,\n      lastLogin: new Date().toISOString(),\n      permissions: this.getRolePermissions('patient'),\n      isVerified: true,\n      twoFactorEnabled: false,\n      walletAddress: '0x1234567890abcdef1234567890abcdef12345678'\n    }];\n  }\n}\n\n// Create and export singleton instance\nexport const rbacService = new RoleBasedAccessService();","map":{"version":3,"names":["RoleBasedAccessService","constructor","currentUser","rolePermissions","admin","id","name","description","resource","actions","doctor","patient","setCurrentUser","user","getCurrentUser","getUserRole","role","permissions","hasPermission","action","userRole","some","permission","includes","canAccessResource","getAccessibleFeatures","getDashboardConfig","baseConfig","features","title","primaryActions","widgets","logAccess","success","metadata","_this$currentUser","_this$currentUser2","logEntry","userId","timestamp","Date","toISOString","console","log","getRolePermissions","initializeDemoUsers","logout","createDemoUsers","email","isActive","lastLogin","isVerified","twoFactorEnabled","walletAddress","rbacService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/rbacService.ts"],"sourcesContent":["import { User, UserRole, Permission } from '../types';\r\n\r\nexport class RoleBasedAccessService {\r\n    private currentUser: User | null = null;\r\n\r\n    // Default permissions for each role\r\n    private rolePermissions: Record<string, Permission[]> = {\r\n        admin: [\r\n            {\r\n                id: 'admin_all',\r\n                name: 'Full System Access',\r\n                description: 'Complete access to all system resources',\r\n                resource: '*',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'user_management',\r\n                name: 'User Management',\r\n                description: 'Manage all users and their roles',\r\n                resource: 'users',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'system_settings',\r\n                name: 'System Settings',\r\n                description: 'Configure system-wide settings',\r\n                resource: 'settings',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            }\r\n        ],\r\n        doctor: [\r\n            {\r\n                id: 'patient_records_full',\r\n                name: 'Patient Records Management',\r\n                description: 'Full access to patient medical records',\r\n                resource: 'medical_records',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'prescription_management',\r\n                name: 'Prescription Management',\r\n                description: 'Create and manage prescriptions',\r\n                resource: 'prescriptions',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'patient_data_read',\r\n                name: 'Patient Data Access',\r\n                description: 'View patient information and history',\r\n                resource: 'patients',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'insurance_claims',\r\n                name: 'Insurance Claims',\r\n                description: 'Submit and manage insurance claims',\r\n                resource: 'insurance',\r\n                actions: ['create', 'read', 'update']\r\n            },\r\n            {\r\n                id: 'blockchain_signing',\r\n                name: 'Blockchain Signing',\r\n                description: 'Sign smart contracts and blockchain transactions',\r\n                resource: 'blockchain',\r\n                actions: ['create', 'read']\r\n            }\r\n        ],\r\n        patient: [\r\n            {\r\n                id: 'own_records_read',\r\n                name: 'Own Medical Records',\r\n                description: 'View own medical records and history',\r\n                resource: 'own_medical_records',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'access_control',\r\n                name: 'Data Access Control',\r\n                description: 'Grant/revoke access to personal data',\r\n                resource: 'data_access',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'appointment_management',\r\n                name: 'Appointment Management',\r\n                description: 'Schedule and manage appointments',\r\n                resource: 'appointments',\r\n                actions: ['create', 'read', 'update', 'delete']\r\n            },\r\n            {\r\n                id: 'insurance_view',\r\n                name: 'Insurance Information',\r\n                description: 'View insurance claims and coverage',\r\n                resource: 'insurance',\r\n                actions: ['read']\r\n            },\r\n            {\r\n                id: 'consent_management',\r\n                name: 'Consent Management',\r\n                description: 'Manage consent forms and agreements',\r\n                resource: 'consent',\r\n                actions: ['create', 'read', 'update']\r\n            }\r\n        ]\r\n    };\r\n\r\n    setCurrentUser(user: User) {\r\n        this.currentUser = user;\r\n    }\r\n\r\n    getCurrentUser(): User | null {\r\n        return this.currentUser;\r\n    }\r\n\r\n    getUserRole(): UserRole | null {\r\n        if (!this.currentUser) return null;\r\n\r\n        return {\r\n            role: this.currentUser.role,\r\n            permissions: this.rolePermissions[this.currentUser.role] || []\r\n        };\r\n    }\r\n\r\n    hasPermission(resource: string, action: 'create' | 'read' | 'update' | 'delete'): boolean {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return false;\r\n\r\n        // Admin has access to everything\r\n        if (userRole.role === 'admin') return true;\r\n\r\n        // Check specific permissions\r\n        return userRole.permissions.some(permission =>\r\n            (permission.resource === resource || permission.resource === '*') &&\r\n            permission.actions.includes(action)\r\n        );\r\n    }\r\n\r\n    canAccessResource(resource: string): boolean {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return false;\r\n\r\n        if (userRole.role === 'admin') return true;\r\n\r\n        return userRole.permissions.some(permission =>\r\n            permission.resource === resource || permission.resource === '*'\r\n        );\r\n    }\r\n\r\n    getAccessibleFeatures(): string[] {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return [];\r\n\r\n        if (userRole.role === 'admin') {\r\n            return ['dashboard', 'patients', 'doctors', 'records', 'prescriptions', 'insurance', 'blockchain', 'settings', 'users', 'analytics', 'audit'];\r\n        }\r\n\r\n        if (userRole.role === 'doctor') {\r\n            return ['dashboard', 'patients', 'records', 'prescriptions', 'insurance', 'blockchain', 'analytics'];\r\n        }\r\n\r\n        if (userRole.role === 'patient') {\r\n            return ['dashboard', 'my-records', 'appointments', 'insurance', 'consent', 'access-control'];\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    getDashboardConfig() {\r\n        const userRole = this.getUserRole();\r\n        if (!userRole) return null;\r\n\r\n        const baseConfig = {\r\n            role: userRole.role,\r\n            features: this.getAccessibleFeatures(),\r\n            permissions: userRole.permissions\r\n        };\r\n\r\n        switch (userRole.role) {\r\n            case 'admin':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'System Administrator Dashboard',\r\n                    primaryActions: [\r\n                        'Manage Users',\r\n                        'System Settings',\r\n                        'View Analytics',\r\n                        'Audit Logs'\r\n                    ],\r\n                    widgets: [\r\n                        'system-stats',\r\n                        'user-activity',\r\n                        'security-alerts',\r\n                        'blockchain-status'\r\n                    ]\r\n                };\r\n\r\n            case 'doctor':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'Doctor Dashboard',\r\n                    primaryActions: [\r\n                        'View Patients',\r\n                        'Create Records',\r\n                        'Write Prescriptions',\r\n                        'Review Claims'\r\n                    ],\r\n                    widgets: [\r\n                        'patient-list',\r\n                        'recent-records',\r\n                        'pending-prescriptions',\r\n                        'insurance-claims'\r\n                    ]\r\n                };\r\n\r\n            case 'patient':\r\n                return {\r\n                    ...baseConfig,\r\n                    title: 'Patient Portal',\r\n                    primaryActions: [\r\n                        'View My Records',\r\n                        'Book Appointment',\r\n                        'Manage Access',\r\n                        'Insurance Status'\r\n                    ],\r\n                    widgets: [\r\n                        'my-health-summary',\r\n                        'upcoming-appointments',\r\n                        'recent-prescriptions',\r\n                        'insurance-coverage'\r\n                    ]\r\n                };\r\n\r\n            default:\r\n                return baseConfig;\r\n        }\r\n    }\r\n\r\n    // Audit logging for access control\r\n    logAccess(resource: string, action: string, success: boolean, metadata?: any) {\r\n        const logEntry = {\r\n            userId: this.currentUser?.id || 'anonymous',\r\n            userRole: this.currentUser?.role || 'unknown',\r\n            resource,\r\n            action,\r\n            success,\r\n            timestamp: new Date().toISOString(),\r\n            metadata\r\n        };\r\n\r\n        console.log('Access Log:', logEntry);\r\n\r\n        // In a real application, this would be sent to a logging service\r\n        // You could integrate with your Firebase service or another logging solution\r\n    }\r\n\r\n    getRolePermissions(role: string): Permission[] {\r\n        return this.rolePermissions[role] || [];\r\n    }\r\n\r\n    initializeDemoUsers(): void {\r\n        // Initialize demo users for testing\r\n        console.log('Demo users initialized');\r\n    }\r\n\r\n    logout(): void {\r\n        this.currentUser = null;\r\n        console.log('User logged out');\r\n    }\r\n\r\n    // Demo user creation for testing\r\n    createDemoUsers(): User[] {\r\n        return [\r\n            {\r\n                id: 'admin_001',\r\n                email: 'admin@healthcare.com',\r\n                name: 'System Administrator',\r\n                role: 'admin',\r\n                isActive: true,\r\n                lastLogin: new Date().toISOString(),\r\n                permissions: this.getRolePermissions('admin'),\r\n                isVerified: true,\r\n                twoFactorEnabled: true,\r\n                walletAddress: '0x742d35Cc6551C0532a0fD0f7a7e2f1B987B5e9c4'\r\n            },\r\n            {\r\n                id: 'doctor_001',\r\n                email: 'dr.smith@healthcare.com',\r\n                name: 'Dr. Sarah Smith',\r\n                role: 'doctor',\r\n                isActive: true,\r\n                lastLogin: new Date().toISOString(),\r\n                permissions: this.getRolePermissions('doctor'),\r\n                isVerified: true,\r\n                twoFactorEnabled: true,\r\n                walletAddress: '0x8Ba1f109551bD432803012645Hac136c22ABB49d'\r\n            },\r\n            {\r\n                id: 'patient_001',\r\n                email: 'john.doe@email.com',\r\n                name: 'John Doe',\r\n                role: 'patient',\r\n                isActive: true,\r\n                lastLogin: new Date().toISOString(),\r\n                permissions: this.getRolePermissions('patient'),\r\n                isVerified: true,\r\n                twoFactorEnabled: false,\r\n                walletAddress: '0x1234567890abcdef1234567890abcdef12345678'\r\n            }\r\n        ];\r\n    }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const rbacService = new RoleBasedAccessService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}