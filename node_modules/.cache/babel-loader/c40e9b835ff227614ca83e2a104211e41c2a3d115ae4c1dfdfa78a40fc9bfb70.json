{"ast":null,"code":"import CryptoJS from'crypto-js';export class EncryptionService{constructor(){this.secretKey=void 0;// In production, this should come from environment variables\nthis.secretKey=process.env.REACT_APP_ENCRYPTION_KEY||'default-secret-key';}encryptData(data){try{const encrypted=CryptoJS.AES.encrypt(data,this.secretKey).toString();return encrypted;}catch(error){console.error('Encryption failed:',error);throw new Error('Failed to encrypt data');}}decryptData(encryptedData){try{const bytes=CryptoJS.AES.decrypt(encryptedData,this.secretKey);const decrypted=bytes.toString(CryptoJS.enc.Utf8);return decrypted;}catch(error){console.error('Decryption failed:',error);throw new Error('Failed to decrypt data');}}hashData(data){return CryptoJS.SHA256(data).toString();}generateSalt(){return CryptoJS.lib.WordArray.random(128/8).toString();}deriveKey(password,salt){return CryptoJS.PBKDF2(password,salt,{keySize:256/32,iterations:100000}).toString();}encryptMedicalRecord(record){const jsonData=JSON.stringify(record);const encryptedData=this.encryptData(jsonData);const hash=this.hashData(jsonData);return{encryptedData,hash};}decryptMedicalRecord(encryptedData){const decryptedJson=this.decryptData(encryptedData);return JSON.parse(decryptedJson);}verifyRecordIntegrity(record,expectedHash){const currentHash=this.hashData(JSON.stringify(record));return currentHash===expectedHash;}}export const encryptionService=new EncryptionService();","map":{"version":3,"names":["CryptoJS","EncryptionService","constructor","secretKey","process","env","REACT_APP_ENCRYPTION_KEY","encryptData","data","encrypted","AES","encrypt","toString","error","console","Error","decryptData","encryptedData","bytes","decrypt","decrypted","enc","Utf8","hashData","SHA256","generateSalt","lib","WordArray","random","deriveKey","password","salt","PBKDF2","keySize","iterations","encryptMedicalRecord","record","jsonData","JSON","stringify","hash","decryptMedicalRecord","decryptedJson","parse","verifyRecordIntegrity","expectedHash","currentHash","encryptionService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/encryption.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nexport class EncryptionService {\r\n  private secretKey: string;\r\n\r\n  constructor() {\r\n    // In production, this should come from environment variables\r\n    this.secretKey = process.env.REACT_APP_ENCRYPTION_KEY || 'default-secret-key';\r\n  }\r\n\r\n  encryptData(data: string): string {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(data, this.secretKey).toString();\r\n      return encrypted;\r\n    } catch (error) {\r\n      console.error('Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  decryptData(encryptedData: string): string {\r\n    try {\r\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.secretKey);\r\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n      return decrypted;\r\n    } catch (error) {\r\n      console.error('Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data');\r\n    }\r\n  }\r\n\r\n  hashData(data: string): string {\r\n    return CryptoJS.SHA256(data).toString();\r\n  }\r\n\r\n  generateSalt(): string {\r\n    return CryptoJS.lib.WordArray.random(128/8).toString();\r\n  }\r\n\r\n  deriveKey(password: string, salt: string): string {\r\n    return CryptoJS.PBKDF2(password, salt, {\r\n      keySize: 256/32,\r\n      iterations: 100000\r\n    }).toString();\r\n  }\r\n\r\n  encryptMedicalRecord(record: any): {encryptedData: string, hash: string} {\r\n    const jsonData = JSON.stringify(record);\r\n    const encryptedData = this.encryptData(jsonData);\r\n    const hash = this.hashData(jsonData);\r\n    \r\n    return {\r\n      encryptedData,\r\n      hash\r\n    };\r\n  }\r\n\r\n  decryptMedicalRecord(encryptedData: string): any {\r\n    const decryptedJson = this.decryptData(encryptedData);\r\n    return JSON.parse(decryptedJson);\r\n  }\r\n\r\n  verifyRecordIntegrity(record: any, expectedHash: string): boolean {\r\n    const currentHash = this.hashData(JSON.stringify(record));\r\n    return currentHash === expectedHash;\r\n  }\r\n}\r\n\r\nexport const encryptionService = new EncryptionService();\r\n"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,WAAW,CAEhC,MAAO,MAAM,CAAAC,iBAAkB,CAG7BC,WAAWA,CAAA,CAAG,MAFNC,SAAS,QAGf;AACA,IAAI,CAACA,SAAS,CAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAI,oBAAoB,CAC/E,CAEAC,WAAWA,CAACC,IAAY,CAAU,CAChC,GAAI,CACF,KAAM,CAAAC,SAAS,CAAGT,QAAQ,CAACU,GAAG,CAACC,OAAO,CAACH,IAAI,CAAE,IAAI,CAACL,SAAS,CAAC,CAACS,QAAQ,CAAC,CAAC,CACvE,MAAO,CAAAH,SAAS,CAClB,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,KAAM,IAAI,CAAAE,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CACF,CAEAC,WAAWA,CAACC,aAAqB,CAAU,CACzC,GAAI,CACF,KAAM,CAAAC,KAAK,CAAGlB,QAAQ,CAACU,GAAG,CAACS,OAAO,CAACF,aAAa,CAAE,IAAI,CAACd,SAAS,CAAC,CACjE,KAAM,CAAAiB,SAAS,CAAGF,KAAK,CAACN,QAAQ,CAACZ,QAAQ,CAACqB,GAAG,CAACC,IAAI,CAAC,CACnD,MAAO,CAAAF,SAAS,CAClB,CAAE,MAAOP,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,KAAM,IAAI,CAAAE,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CACF,CAEAQ,QAAQA,CAACf,IAAY,CAAU,CAC7B,MAAO,CAAAR,QAAQ,CAACwB,MAAM,CAAChB,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,CACzC,CAEAa,YAAYA,CAAA,CAAW,CACrB,MAAO,CAAAzB,QAAQ,CAAC0B,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAChB,QAAQ,CAAC,CAAC,CACxD,CAEAiB,SAASA,CAACC,QAAgB,CAAEC,IAAY,CAAU,CAChD,MAAO,CAAA/B,QAAQ,CAACgC,MAAM,CAACF,QAAQ,CAAEC,IAAI,CAAE,CACrCE,OAAO,CAAE,GAAG,CAAC,EAAE,CACfC,UAAU,CAAE,MACd,CAAC,CAAC,CAACtB,QAAQ,CAAC,CAAC,CACf,CAEAuB,oBAAoBA,CAACC,MAAW,CAAyC,CACvE,KAAM,CAAAC,QAAQ,CAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CACvC,KAAM,CAAAnB,aAAa,CAAG,IAAI,CAACV,WAAW,CAAC8B,QAAQ,CAAC,CAChD,KAAM,CAAAG,IAAI,CAAG,IAAI,CAACjB,QAAQ,CAACc,QAAQ,CAAC,CAEpC,MAAO,CACLpB,aAAa,CACbuB,IACF,CAAC,CACH,CAEAC,oBAAoBA,CAACxB,aAAqB,CAAO,CAC/C,KAAM,CAAAyB,aAAa,CAAG,IAAI,CAAC1B,WAAW,CAACC,aAAa,CAAC,CACrD,MAAO,CAAAqB,IAAI,CAACK,KAAK,CAACD,aAAa,CAAC,CAClC,CAEAE,qBAAqBA,CAACR,MAAW,CAAES,YAAoB,CAAW,CAChE,KAAM,CAAAC,WAAW,CAAG,IAAI,CAACvB,QAAQ,CAACe,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CAAC,CACzD,MAAO,CAAAU,WAAW,GAAKD,YAAY,CACrC,CACF,CAEA,MAAO,MAAM,CAAAE,iBAAiB,CAAG,GAAI,CAAA9C,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}