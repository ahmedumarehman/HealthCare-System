{"ast":null,"code":"var _SharedStateService;\nclass SharedStateService {\n  constructor() {\n    this.patients = [{\n      id: 'patient-1',\n      name: 'Michael Johnson',\n      email: 'mjohnson@email.com',\n      dateOfBirth: '1985-03-15',\n      phoneNumber: '+1-555-0123',\n      address: '123 Main St, City, State 12345',\n      emergencyContact: 'Jane Johnson - +1-555-0124',\n      insuranceProvider: 'HealthFirst Insurance',\n      insurancePolicyNumber: 'HF-12345-MJ',\n      lastVisit: '2025-06-15',\n      upcomingAppointment: '2025-07-10',\n      isActive: true\n    }, {\n      id: 'patient-2',\n      name: 'Sarah Wilson',\n      email: 'swilson@email.com',\n      dateOfBirth: '1990-08-22',\n      phoneNumber: '+1-555-0125',\n      address: '456 Oak Ave, City, State 12345',\n      emergencyContact: 'Robert Wilson - +1-555-0126',\n      insuranceProvider: 'MediCare Plus',\n      insurancePolicyNumber: 'MP-67890-SW',\n      lastVisit: '2025-06-20',\n      upcomingAppointment: '2025-07-08',\n      isActive: true\n    }, {\n      id: 'patient-3',\n      name: 'Ahmed Umar',\n      email: 'ahmedumar@email.com',\n      dateOfBirth: '1992-11-18',\n      phoneNumber: '+1-555-0126',\n      address: '789 Pine St, City, State 12345',\n      emergencyContact: 'Fatima Umar - +1-555-0127',\n      insuranceProvider: 'Universal Health',\n      insurancePolicyNumber: 'UH-54321-AU',\n      lastVisit: '2025-07-02',\n      upcomingAppointment: '2025-07-15',\n      isActive: true\n    }];\n    this.medicalRecords = [{\n      id: 'record-1',\n      patientId: 'patient-1',\n      doctorId: 'doctor-1',\n      title: 'Annual Physical Examination',\n      description: 'Comprehensive health checkup including blood work and vital signs',\n      date: '2025-07-04',\n      diagnosis: 'Excellent health, all vitals normal',\n      prescription: 'Continue healthy lifestyle, return in 6 months',\n      isEncrypted: true,\n      blockchainHash: '0xabc123def456789abcdef123456789abc',\n      isVerified: true,\n      accessPermissions: ['patient-1', 'doctor-1'],\n      ipfsHash: 'QmX9ZB7tRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0mP',\n      nftTokenId: 'HEALTH-NFT-001'\n    }, {\n      id: 'record-2',\n      patientId: 'patient-2',\n      doctorId: 'doctor-1',\n      title: 'Follow-up Consultation',\n      description: 'Review of previous treatment and medication adjustment',\n      date: '2025-07-03',\n      diagnosis: 'Improvement noted, continue current treatment',\n      prescription: 'Adjust medication dosage, schedule follow-up in 3 weeks',\n      isEncrypted: true,\n      blockchainHash: '0xdef456abc789123def456abc789123def',\n      isVerified: true,\n      accessPermissions: ['patient-2', 'doctor-1'],\n      ipfsHash: 'QmY8AX6sRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0nQ',\n      nftTokenId: 'HEALTH-NFT-002'\n    }];\n    this.insuranceClaims = [];\n    // Listeners for state changes\n    this.patientListeners = [];\n    this.recordListeners = [];\n    this.claimListeners = [];\n  }\n  static getInstance() {\n    if (!SharedStateService.instance) {\n      SharedStateService.instance = new SharedStateService();\n    }\n    return SharedStateService.instance;\n  }\n\n  // Patient management\n  getPatients() {\n    return [...this.patients];\n  }\n  addPatient(patient) {\n    this.patients.push(patient);\n    this.notifyPatientListeners();\n  }\n  updatePatient(patientId, updates) {\n    const index = this.patients.findIndex(p => p.id === patientId);\n    if (index !== -1) {\n      this.patients[index] = {\n        ...this.patients[index],\n        ...updates\n      };\n      this.notifyPatientListeners();\n    }\n  }\n  onPatientsChange(listener) {\n    this.patientListeners.push(listener);\n    return () => {\n      const index = this.patientListeners.indexOf(listener);\n      if (index > -1) {\n        this.patientListeners.splice(index, 1);\n      }\n    };\n  }\n  notifyPatientListeners() {\n    this.patientListeners.forEach(listener => listener(this.patients));\n  }\n\n  // Medical record management\n  getMedicalRecords() {\n    return [...this.medicalRecords];\n  }\n  getMedicalRecordsByPatient(patientId) {\n    return this.medicalRecords.filter(record => record.patientId === patientId);\n  }\n  getMedicalRecordsByDoctor(doctorId) {\n    return this.medicalRecords.filter(record => record.doctorId === doctorId);\n  }\n  addMedicalRecord(record) {\n    this.medicalRecords.push(record);\n    this.notifyRecordListeners();\n  }\n  updateMedicalRecord(recordId, updates) {\n    const index = this.medicalRecords.findIndex(r => r.id === recordId);\n    if (index !== -1) {\n      this.medicalRecords[index] = {\n        ...this.medicalRecords[index],\n        ...updates\n      };\n      this.notifyRecordListeners();\n    }\n  }\n  onMedicalRecordsChange(listener) {\n    this.recordListeners.push(listener);\n    return () => {\n      const index = this.recordListeners.indexOf(listener);\n      if (index > -1) {\n        this.recordListeners.splice(index, 1);\n      }\n    };\n  }\n  notifyRecordListeners() {\n    this.recordListeners.forEach(listener => listener(this.medicalRecords));\n  }\n\n  // Insurance claim management\n  getInsuranceClaims() {\n    return [...this.insuranceClaims];\n  }\n  getInsuranceClaimsByPatient(patientId) {\n    return this.insuranceClaims.filter(claim => claim.patientId === patientId);\n  }\n  addInsuranceClaim(claim) {\n    this.insuranceClaims.push(claim);\n    this.notifyClaimListeners();\n  }\n  updateInsuranceClaim(claimId, updates) {\n    const index = this.insuranceClaims.findIndex(c => c.id === claimId);\n    if (index !== -1) {\n      this.insuranceClaims[index] = {\n        ...this.insuranceClaims[index],\n        ...updates\n      };\n      this.notifyClaimListeners();\n    }\n  }\n  onInsuranceClaimsChange(listener) {\n    this.claimListeners.push(listener);\n    return () => {\n      const index = this.claimListeners.indexOf(listener);\n      if (index > -1) {\n        this.claimListeners.splice(index, 1);\n      }\n    };\n  }\n  notifyClaimListeners() {\n    this.claimListeners.forEach(listener => listener(this.insuranceClaims));\n  }\n\n  // Utility methods\n  generateId(prefix) {\n    return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n_SharedStateService = SharedStateService;\nSharedStateService.instance = void 0;\nexport const sharedStateService = SharedStateService.getInstance();","map":{"version":3,"names":["SharedStateService","constructor","patients","id","name","email","dateOfBirth","phoneNumber","address","emergencyContact","insuranceProvider","insurancePolicyNumber","lastVisit","upcomingAppointment","isActive","medicalRecords","patientId","doctorId","title","description","date","diagnosis","prescription","isEncrypted","blockchainHash","isVerified","accessPermissions","ipfsHash","nftTokenId","insuranceClaims","patientListeners","recordListeners","claimListeners","getInstance","instance","getPatients","addPatient","patient","push","notifyPatientListeners","updatePatient","updates","index","findIndex","p","onPatientsChange","listener","indexOf","splice","forEach","getMedicalRecords","getMedicalRecordsByPatient","filter","record","getMedicalRecordsByDoctor","addMedicalRecord","notifyRecordListeners","updateMedicalRecord","recordId","r","onMedicalRecordsChange","getInsuranceClaims","getInsuranceClaimsByPatient","claim","addInsuranceClaim","notifyClaimListeners","updateInsuranceClaim","claimId","c","onInsuranceClaimsChange","generateId","prefix","Date","now","Math","random","toString","substr","_SharedStateService","sharedStateService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/sharedState.ts"],"sourcesContent":["import { MedicalRecord, Patient, InsuranceClaim } from '../types';\r\n\r\ntype Listener<T> = (data: T[]) => void;\r\n\r\nclass SharedStateService {\r\n    private static instance: SharedStateService;\r\n    private patients: Patient[] = [\r\n        {\r\n            id: 'patient-1',\r\n            name: 'Michael Johnson',\r\n            email: 'mjohnson@email.com',\r\n            dateOfBirth: '1985-03-15',\r\n            phoneNumber: '+1-555-0123',\r\n            address: '123 Main St, City, State 12345',\r\n            emergencyContact: 'Jane Johnson - +1-555-0124',\r\n            insuranceProvider: 'HealthFirst Insurance',\r\n            insurancePolicyNumber: 'HF-12345-MJ',\r\n            lastVisit: '2025-06-15',\r\n            upcomingAppointment: '2025-07-10',\r\n            isActive: true\r\n        },\r\n        {\r\n            id: 'patient-2',\r\n            name: 'Sarah Wilson',\r\n            email: 'swilson@email.com',\r\n            dateOfBirth: '1990-08-22',\r\n            phoneNumber: '+1-555-0125',\r\n            address: '456 Oak Ave, City, State 12345',\r\n            emergencyContact: 'Robert Wilson - +1-555-0126',\r\n            insuranceProvider: 'MediCare Plus',\r\n            insurancePolicyNumber: 'MP-67890-SW',\r\n            lastVisit: '2025-06-20',\r\n            upcomingAppointment: '2025-07-08',\r\n            isActive: true\r\n        },\r\n        {\r\n            id: 'patient-3',\r\n            name: 'Ahmed Umar',\r\n            email: 'ahmedumar@email.com',\r\n            dateOfBirth: '1992-11-18',\r\n            phoneNumber: '+1-555-0126',\r\n            address: '789 Pine St, City, State 12345',\r\n            emergencyContact: 'Fatima Umar - +1-555-0127',\r\n            insuranceProvider: 'Universal Health',\r\n            insurancePolicyNumber: 'UH-54321-AU',\r\n            lastVisit: '2025-07-02',\r\n            upcomingAppointment: '2025-07-15',\r\n            isActive: true\r\n        }\r\n    ];\r\n\r\n    private medicalRecords: MedicalRecord[] = [\r\n        {\r\n            id: 'record-1',\r\n            patientId: 'patient-1',\r\n            doctorId: 'doctor-1',\r\n            title: 'Annual Physical Examination',\r\n            description: 'Comprehensive health checkup including blood work and vital signs',\r\n            date: '2025-07-04',\r\n            diagnosis: 'Excellent health, all vitals normal',\r\n            prescription: 'Continue healthy lifestyle, return in 6 months',\r\n            isEncrypted: true,\r\n            blockchainHash: '0xabc123def456789abcdef123456789abc',\r\n            isVerified: true,\r\n            accessPermissions: ['patient-1', 'doctor-1'],\r\n            ipfsHash: 'QmX9ZB7tRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0mP',\r\n            nftTokenId: 'HEALTH-NFT-001'\r\n        },\r\n        {\r\n            id: 'record-2',\r\n            patientId: 'patient-2',\r\n            doctorId: 'doctor-1',\r\n            title: 'Follow-up Consultation',\r\n            description: 'Review of previous treatment and medication adjustment',\r\n            date: '2025-07-03',\r\n            diagnosis: 'Improvement noted, continue current treatment',\r\n            prescription: 'Adjust medication dosage, schedule follow-up in 3 weeks',\r\n            isEncrypted: true,\r\n            blockchainHash: '0xdef456abc789123def456abc789123def',\r\n            isVerified: true,\r\n            accessPermissions: ['patient-2', 'doctor-1'],\r\n            ipfsHash: 'QmY8AX6sRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0nQ',\r\n            nftTokenId: 'HEALTH-NFT-002'\r\n        }\r\n    ];\r\n\r\n    private insuranceClaims: InsuranceClaim[] = [];\r\n\r\n    // Listeners for state changes\r\n    private patientListeners: Listener<Patient>[] = [];\r\n    private recordListeners: Listener<MedicalRecord>[] = [];\r\n    private claimListeners: Listener<InsuranceClaim>[] = [];\r\n\r\n    private constructor() { }\r\n\r\n    static getInstance(): SharedStateService {\r\n        if (!SharedStateService.instance) {\r\n            SharedStateService.instance = new SharedStateService();\r\n        }\r\n        return SharedStateService.instance;\r\n    }\r\n\r\n    // Patient management\r\n    getPatients(): Patient[] {\r\n        return [...this.patients];\r\n    }\r\n\r\n    addPatient(patient: Patient): void {\r\n        this.patients.push(patient);\r\n        this.notifyPatientListeners();\r\n    }\r\n\r\n    updatePatient(patientId: string, updates: Partial<Patient>): void {\r\n        const index = this.patients.findIndex(p => p.id === patientId);\r\n        if (index !== -1) {\r\n            this.patients[index] = { ...this.patients[index], ...updates };\r\n            this.notifyPatientListeners();\r\n        }\r\n    }\r\n\r\n    onPatientsChange(listener: Listener<Patient>): () => void {\r\n        this.patientListeners.push(listener);\r\n        return () => {\r\n            const index = this.patientListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.patientListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyPatientListeners(): void {\r\n        this.patientListeners.forEach(listener => listener(this.patients));\r\n    }\r\n\r\n    // Medical record management\r\n    getMedicalRecords(): MedicalRecord[] {\r\n        return [...this.medicalRecords];\r\n    }\r\n\r\n    getMedicalRecordsByPatient(patientId: string): MedicalRecord[] {\r\n        return this.medicalRecords.filter(record => record.patientId === patientId);\r\n    }\r\n\r\n    getMedicalRecordsByDoctor(doctorId: string): MedicalRecord[] {\r\n        return this.medicalRecords.filter(record => record.doctorId === doctorId);\r\n    }\r\n\r\n    addMedicalRecord(record: MedicalRecord): void {\r\n        this.medicalRecords.push(record);\r\n        this.notifyRecordListeners();\r\n    }\r\n\r\n    updateMedicalRecord(recordId: string, updates: Partial<MedicalRecord>): void {\r\n        const index = this.medicalRecords.findIndex(r => r.id === recordId);\r\n        if (index !== -1) {\r\n            this.medicalRecords[index] = { ...this.medicalRecords[index], ...updates };\r\n            this.notifyRecordListeners();\r\n        }\r\n    }\r\n\r\n    onMedicalRecordsChange(listener: Listener<MedicalRecord>): () => void {\r\n        this.recordListeners.push(listener);\r\n        return () => {\r\n            const index = this.recordListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.recordListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyRecordListeners(): void {\r\n        this.recordListeners.forEach(listener => listener(this.medicalRecords));\r\n    }\r\n\r\n    // Insurance claim management\r\n    getInsuranceClaims(): InsuranceClaim[] {\r\n        return [...this.insuranceClaims];\r\n    }\r\n\r\n    getInsuranceClaimsByPatient(patientId: string): InsuranceClaim[] {\r\n        return this.insuranceClaims.filter(claim => claim.patientId === patientId);\r\n    }\r\n\r\n    addInsuranceClaim(claim: InsuranceClaim): void {\r\n        this.insuranceClaims.push(claim);\r\n        this.notifyClaimListeners();\r\n    }\r\n\r\n    updateInsuranceClaim(claimId: string, updates: Partial<InsuranceClaim>): void {\r\n        const index = this.insuranceClaims.findIndex(c => c.id === claimId);\r\n        if (index !== -1) {\r\n            this.insuranceClaims[index] = { ...this.insuranceClaims[index], ...updates };\r\n            this.notifyClaimListeners();\r\n        }\r\n    }\r\n\r\n    onInsuranceClaimsChange(listener: Listener<InsuranceClaim>): () => void {\r\n        this.claimListeners.push(listener);\r\n        return () => {\r\n            const index = this.claimListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.claimListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyClaimListeners(): void {\r\n        this.claimListeners.forEach(listener => listener(this.insuranceClaims));\r\n    }\r\n\r\n    // Utility methods\r\n    generateId(prefix: string): string {\r\n        return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n}\r\n\r\nexport const sharedStateService = SharedStateService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}