{"ast":null,"code":"import CryptoJS from 'crypto-js';\nexport class EncryptionService {\n  constructor() {\n    this.secretKey = void 0;\n    // In production, this should come from environment variables\n    this.secretKey = process.env.REACT_APP_ENCRYPTION_KEY || 'default-secret-key';\n  }\n  encryptData(data) {\n    try {\n      const encrypted = CryptoJS.AES.encrypt(data, this.secretKey).toString();\n      return encrypted;\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error('Failed to encrypt data');\n    }\n  }\n  decryptData(encryptedData) {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.secretKey);\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n      return decrypted;\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error('Failed to decrypt data');\n    }\n  }\n  hashData(data) {\n    return CryptoJS.SHA256(data).toString();\n  }\n  generateSalt() {\n    return CryptoJS.lib.WordArray.random(128 / 8).toString();\n  }\n  deriveKey(password, salt) {\n    return CryptoJS.PBKDF2(password, salt, {\n      keySize: 256 / 32,\n      iterations: 100000\n    }).toString();\n  }\n  encryptMedicalRecord(record) {\n    const jsonData = JSON.stringify(record);\n    const encryptedData = this.encryptData(jsonData);\n    const hash = this.hashData(jsonData);\n    return {\n      encryptedData,\n      hash\n    };\n  }\n  decryptMedicalRecord(encryptedData) {\n    const decryptedJson = this.decryptData(encryptedData);\n    return JSON.parse(decryptedJson);\n  }\n  verifyRecordIntegrity(record, expectedHash) {\n    const currentHash = this.hashData(JSON.stringify(record));\n    return currentHash === expectedHash;\n  }\n}\nexport const encryptionService = new EncryptionService();","map":{"version":3,"names":["CryptoJS","EncryptionService","constructor","secretKey","process","env","REACT_APP_ENCRYPTION_KEY","encryptData","data","encrypted","AES","encrypt","toString","error","console","Error","decryptData","encryptedData","bytes","decrypt","decrypted","enc","Utf8","hashData","SHA256","generateSalt","lib","WordArray","random","deriveKey","password","salt","PBKDF2","keySize","iterations","encryptMedicalRecord","record","jsonData","JSON","stringify","hash","decryptMedicalRecord","decryptedJson","parse","verifyRecordIntegrity","expectedHash","currentHash","encryptionService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/encryption.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nexport class EncryptionService {\r\n  private secretKey: string;\r\n\r\n  constructor() {\r\n    // In production, this should come from environment variables\r\n    this.secretKey = process.env.REACT_APP_ENCRYPTION_KEY || 'default-secret-key';\r\n  }\r\n\r\n  encryptData(data: string): string {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(data, this.secretKey).toString();\r\n      return encrypted;\r\n    } catch (error) {\r\n      console.error('Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  decryptData(encryptedData: string): string {\r\n    try {\r\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.secretKey);\r\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n      return decrypted;\r\n    } catch (error) {\r\n      console.error('Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data');\r\n    }\r\n  }\r\n\r\n  hashData(data: string): string {\r\n    return CryptoJS.SHA256(data).toString();\r\n  }\r\n\r\n  generateSalt(): string {\r\n    return CryptoJS.lib.WordArray.random(128/8).toString();\r\n  }\r\n\r\n  deriveKey(password: string, salt: string): string {\r\n    return CryptoJS.PBKDF2(password, salt, {\r\n      keySize: 256/32,\r\n      iterations: 100000\r\n    }).toString();\r\n  }\r\n\r\n  encryptMedicalRecord(record: any): {encryptedData: string, hash: string} {\r\n    const jsonData = JSON.stringify(record);\r\n    const encryptedData = this.encryptData(jsonData);\r\n    const hash = this.hashData(jsonData);\r\n    \r\n    return {\r\n      encryptedData,\r\n      hash\r\n    };\r\n  }\r\n\r\n  decryptMedicalRecord(encryptedData: string): any {\r\n    const decryptedJson = this.decryptData(encryptedData);\r\n    return JSON.parse(decryptedJson);\r\n  }\r\n\r\n  verifyRecordIntegrity(record: any, expectedHash: string): boolean {\r\n    const currentHash = this.hashData(JSON.stringify(record));\r\n    return currentHash === expectedHash;\r\n  }\r\n}\r\n\r\nexport const encryptionService = new EncryptionService();\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,OAAO,MAAMC,iBAAiB,CAAC;EAG7BC,WAAWA,CAAA,EAAG;IAAA,KAFNC,SAAS;IAGf;IACA,IAAI,CAACA,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,oBAAoB;EAC/E;EAEAC,WAAWA,CAACC,IAAY,EAAU;IAChC,IAAI;MACF,MAAMC,SAAS,GAAGT,QAAQ,CAACU,GAAG,CAACC,OAAO,CAACH,IAAI,EAAE,IAAI,CAACL,SAAS,CAAC,CAACS,QAAQ,CAAC,CAAC;MACvE,OAAOH,SAAS;IAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF;EAEAC,WAAWA,CAACC,aAAqB,EAAU;IACzC,IAAI;MACF,MAAMC,KAAK,GAAGlB,QAAQ,CAACU,GAAG,CAACS,OAAO,CAACF,aAAa,EAAE,IAAI,CAACd,SAAS,CAAC;MACjE,MAAMiB,SAAS,GAAGF,KAAK,CAACN,QAAQ,CAACZ,QAAQ,CAACqB,GAAG,CAACC,IAAI,CAAC;MACnD,OAAOF,SAAS;IAClB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;IAC3C;EACF;EAEAQ,QAAQA,CAACf,IAAY,EAAU;IAC7B,OAAOR,QAAQ,CAACwB,MAAM,CAAChB,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC;EACzC;EAEAa,YAAYA,CAAA,EAAW;IACrB,OAAOzB,QAAQ,CAAC0B,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,GAAG,GAAC,CAAC,CAAC,CAAChB,QAAQ,CAAC,CAAC;EACxD;EAEAiB,SAASA,CAACC,QAAgB,EAAEC,IAAY,EAAU;IAChD,OAAO/B,QAAQ,CAACgC,MAAM,CAACF,QAAQ,EAAEC,IAAI,EAAE;MACrCE,OAAO,EAAE,GAAG,GAAC,EAAE;MACfC,UAAU,EAAE;IACd,CAAC,CAAC,CAACtB,QAAQ,CAAC,CAAC;EACf;EAEAuB,oBAAoBA,CAACC,MAAW,EAAyC;IACvE,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;IACvC,MAAMnB,aAAa,GAAG,IAAI,CAACV,WAAW,CAAC8B,QAAQ,CAAC;IAChD,MAAMG,IAAI,GAAG,IAAI,CAACjB,QAAQ,CAACc,QAAQ,CAAC;IAEpC,OAAO;MACLpB,aAAa;MACbuB;IACF,CAAC;EACH;EAEAC,oBAAoBA,CAACxB,aAAqB,EAAO;IAC/C,MAAMyB,aAAa,GAAG,IAAI,CAAC1B,WAAW,CAACC,aAAa,CAAC;IACrD,OAAOqB,IAAI,CAACK,KAAK,CAACD,aAAa,CAAC;EAClC;EAEAE,qBAAqBA,CAACR,MAAW,EAAES,YAAoB,EAAW;IAChE,MAAMC,WAAW,GAAG,IAAI,CAACvB,QAAQ,CAACe,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,CAAC;IACzD,OAAOU,WAAW,KAAKD,YAAY;EACrC;AACF;AAEA,OAAO,MAAME,iBAAiB,GAAG,IAAI9C,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}