{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{ref,push,set,onValue,off,query,orderByChild,equalTo}from'firebase/database';import{database}from'../config/firebase';export class FirebaseService{// Medical Records\nstatic async addMedicalRecord(record){try{const recordsRef=ref(database,'medicalRecords');const newRecordRef=push(recordsRef);const recordWithId=_objectSpread(_objectSpread({},record),{},{id:newRecordRef.key});await set(newRecordRef,recordWithId);return newRecordRef.key;}catch(error){console.error('Error adding medical record:',error);throw error;}}static subscribeMedicalRecords(callback){const recordsRef=ref(database,'medicalRecords');const unsubscribe=onValue(recordsRef,snapshot=>{const data=snapshot.val();const records=data?Object.values(data):[];callback(records);});return()=>off(recordsRef,'value',unsubscribe);}static subscribePatientRecords(patientId,callback){const recordsRef=ref(database,'medicalRecords');const patientRecordsQuery=query(recordsRef,orderByChild('patientId'),equalTo(patientId));const unsubscribe=onValue(patientRecordsQuery,snapshot=>{const data=snapshot.val();const records=data?Object.values(data):[];callback(records);});return()=>off(recordsRef,'value',unsubscribe);}static subscribeDoctorRecords(doctorId,callback){const recordsRef=ref(database,'medicalRecords');const doctorRecordsQuery=query(recordsRef,orderByChild('doctorId'),equalTo(doctorId));const unsubscribe=onValue(doctorRecordsQuery,snapshot=>{const data=snapshot.val();const records=data?Object.values(data):[];callback(records);});return()=>off(recordsRef,'value',unsubscribe);}// Patients\nstatic async addPatient(patient){try{const patientsRef=ref(database,'patients');const newPatientRef=push(patientsRef);const patientWithId=_objectSpread(_objectSpread({},patient),{},{id:newPatientRef.key});await set(newPatientRef,patientWithId);return newPatientRef.key;}catch(error){console.error('Error adding patient:',error);throw error;}}static subscribePatients(callback){const patientsRef=ref(database,'patients');const unsubscribe=onValue(patientsRef,snapshot=>{const data=snapshot.val();const patients=data?Object.values(data):[];callback(patients);});return()=>off(patientsRef,'value',unsubscribe);}// Insurance Claims\nstatic async addInsuranceClaim(claim){try{const claimsRef=ref(database,'insuranceClaims');const newClaimRef=push(claimsRef);const claimWithId=_objectSpread(_objectSpread({},claim),{},{id:newClaimRef.key});await set(newClaimRef,claimWithId);return newClaimRef.key;}catch(error){console.error('Error adding insurance claim:',error);throw error;}}static subscribeInsuranceClaims(callback){const claimsRef=ref(database,'insuranceClaims');const unsubscribe=onValue(claimsRef,snapshot=>{const data=snapshot.val();const claims=data?Object.values(data):[];callback(claims);});return()=>off(claimsRef,'value',unsubscribe);}}","map":{"version":3,"names":["ref","push","set","onValue","off","query","orderByChild","equalTo","database","FirebaseService","addMedicalRecord","record","recordsRef","newRecordRef","recordWithId","_objectSpread","id","key","error","console","subscribeMedicalRecords","callback","unsubscribe","snapshot","data","val","records","Object","values","subscribePatientRecords","patientId","patientRecordsQuery","subscribeDoctorRecords","doctorId","doctorRecordsQuery","addPatient","patient","patientsRef","newPatientRef","patientWithId","subscribePatients","patients","addInsuranceClaim","claim","claimsRef","newClaimRef","claimWithId","subscribeInsuranceClaims","claims"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/firebaseService.ts"],"sourcesContent":["import { ref, push, set, onValue, off, query, orderByChild, equalTo } from 'firebase/database';\r\nimport { MedicalRecord, Patient, InsuranceClaim } from '../types';\r\nimport { database } from '../config/firebase';\r\n\r\nexport class FirebaseService {\r\n    // Medical Records\r\n    static async addMedicalRecord(record: Omit<MedicalRecord, 'id'>): Promise<string> {\r\n        try {\r\n            const recordsRef = ref(database, 'medicalRecords');\r\n            const newRecordRef = push(recordsRef);\r\n            const recordWithId = { ...record, id: newRecordRef.key };\r\n            await set(newRecordRef, recordWithId);\r\n            return newRecordRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding medical record:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribeMedicalRecords(callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const unsubscribe = onValue(recordsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    static subscribePatientRecords(patientId: string, callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const patientRecordsQuery = query(recordsRef, orderByChild('patientId'), equalTo(patientId));\r\n\r\n        const unsubscribe = onValue(patientRecordsQuery, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    static subscribeDoctorRecords(doctorId: string, callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const doctorRecordsQuery = query(recordsRef, orderByChild('doctorId'), equalTo(doctorId));\r\n\r\n        const unsubscribe = onValue(doctorRecordsQuery, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    // Patients\r\n    static async addPatient(patient: Omit<Patient, 'id'>): Promise<string> {\r\n        try {\r\n            const patientsRef = ref(database, 'patients');\r\n            const newPatientRef = push(patientsRef);\r\n            const patientWithId = { ...patient, id: newPatientRef.key };\r\n            await set(newPatientRef, patientWithId);\r\n            return newPatientRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding patient:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribePatients(callback: (patients: Patient[]) => void): () => void {\r\n        const patientsRef = ref(database, 'patients');\r\n        const unsubscribe = onValue(patientsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const patients: Patient[] = data ? Object.values(data) : [];\r\n            callback(patients);\r\n        });\r\n\r\n        return () => off(patientsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    // Insurance Claims\r\n    static async addInsuranceClaim(claim: Omit<InsuranceClaim, 'id'>): Promise<string> {\r\n        try {\r\n            const claimsRef = ref(database, 'insuranceClaims');\r\n            const newClaimRef = push(claimsRef);\r\n            const claimWithId = { ...claim, id: newClaimRef.key };\r\n            await set(newClaimRef, claimWithId);\r\n            return newClaimRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding insurance claim:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribeInsuranceClaims(callback: (claims: InsuranceClaim[]) => void): () => void {\r\n        const claimsRef = ref(database, 'insuranceClaims');\r\n        const unsubscribe = onValue(claimsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const claims: InsuranceClaim[] = data ? Object.values(data) : [];\r\n            callback(claims);\r\n        });\r\n\r\n        return () => off(claimsRef, 'value', unsubscribe);\r\n    }\r\n}\r\n"],"mappings":"oKAAA,OAASA,GAAG,CAAEC,IAAI,CAAEC,GAAG,CAAEC,OAAO,CAAEC,GAAG,CAAEC,KAAK,CAAEC,YAAY,CAAEC,OAAO,KAAQ,mBAAmB,CAE9F,OAASC,QAAQ,KAAQ,oBAAoB,CAE7C,MAAO,MAAM,CAAAC,eAAgB,CACzB;AACA,YAAa,CAAAC,gBAAgBA,CAACC,MAAiC,CAAmB,CAC9E,GAAI,CACA,KAAM,CAAAC,UAAU,CAAGZ,GAAG,CAACQ,QAAQ,CAAE,gBAAgB,CAAC,CAClD,KAAM,CAAAK,YAAY,CAAGZ,IAAI,CAACW,UAAU,CAAC,CACrC,KAAM,CAAAE,YAAY,CAAAC,aAAA,CAAAA,aAAA,IAAQJ,MAAM,MAAEK,EAAE,CAAEH,YAAY,CAACI,GAAG,EAAE,CACxD,KAAM,CAAAf,GAAG,CAACW,YAAY,CAAEC,YAAY,CAAC,CACrC,MAAO,CAAAD,YAAY,CAACI,GAAG,CAC3B,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA,MAAO,CAAAE,uBAAuBA,CAACC,QAA4C,CAAc,CACrF,KAAM,CAAAT,UAAU,CAAGZ,GAAG,CAACQ,QAAQ,CAAE,gBAAgB,CAAC,CAClD,KAAM,CAAAc,WAAW,CAAGnB,OAAO,CAACS,UAAU,CAAGW,QAAQ,EAAK,CAClD,KAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,KAAM,CAAAC,OAAwB,CAAGF,IAAI,CAAGG,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAG,EAAE,CAChEH,QAAQ,CAACK,OAAO,CAAC,CACrB,CAAC,CAAC,CAEF,MAAO,IAAMtB,GAAG,CAACQ,UAAU,CAAE,OAAO,CAAEU,WAAW,CAAC,CACtD,CAEA,MAAO,CAAAO,uBAAuBA,CAACC,SAAiB,CAAET,QAA4C,CAAc,CACxG,KAAM,CAAAT,UAAU,CAAGZ,GAAG,CAACQ,QAAQ,CAAE,gBAAgB,CAAC,CAClD,KAAM,CAAAuB,mBAAmB,CAAG1B,KAAK,CAACO,UAAU,CAAEN,YAAY,CAAC,WAAW,CAAC,CAAEC,OAAO,CAACuB,SAAS,CAAC,CAAC,CAE5F,KAAM,CAAAR,WAAW,CAAGnB,OAAO,CAAC4B,mBAAmB,CAAGR,QAAQ,EAAK,CAC3D,KAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,KAAM,CAAAC,OAAwB,CAAGF,IAAI,CAAGG,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAG,EAAE,CAChEH,QAAQ,CAACK,OAAO,CAAC,CACrB,CAAC,CAAC,CAEF,MAAO,IAAMtB,GAAG,CAACQ,UAAU,CAAE,OAAO,CAAEU,WAAW,CAAC,CACtD,CAEA,MAAO,CAAAU,sBAAsBA,CAACC,QAAgB,CAAEZ,QAA4C,CAAc,CACtG,KAAM,CAAAT,UAAU,CAAGZ,GAAG,CAACQ,QAAQ,CAAE,gBAAgB,CAAC,CAClD,KAAM,CAAA0B,kBAAkB,CAAG7B,KAAK,CAACO,UAAU,CAAEN,YAAY,CAAC,UAAU,CAAC,CAAEC,OAAO,CAAC0B,QAAQ,CAAC,CAAC,CAEzF,KAAM,CAAAX,WAAW,CAAGnB,OAAO,CAAC+B,kBAAkB,CAAGX,QAAQ,EAAK,CAC1D,KAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,KAAM,CAAAC,OAAwB,CAAGF,IAAI,CAAGG,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAG,EAAE,CAChEH,QAAQ,CAACK,OAAO,CAAC,CACrB,CAAC,CAAC,CAEF,MAAO,IAAMtB,GAAG,CAACQ,UAAU,CAAE,OAAO,CAAEU,WAAW,CAAC,CACtD,CAEA;AACA,YAAa,CAAAa,UAAUA,CAACC,OAA4B,CAAmB,CACnE,GAAI,CACA,KAAM,CAAAC,WAAW,CAAGrC,GAAG,CAACQ,QAAQ,CAAE,UAAU,CAAC,CAC7C,KAAM,CAAA8B,aAAa,CAAGrC,IAAI,CAACoC,WAAW,CAAC,CACvC,KAAM,CAAAE,aAAa,CAAAxB,aAAA,CAAAA,aAAA,IAAQqB,OAAO,MAAEpB,EAAE,CAAEsB,aAAa,CAACrB,GAAG,EAAE,CAC3D,KAAM,CAAAf,GAAG,CAACoC,aAAa,CAAEC,aAAa,CAAC,CACvC,MAAO,CAAAD,aAAa,CAACrB,GAAG,CAC5B,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA,MAAO,CAAAsB,iBAAiBA,CAACnB,QAAuC,CAAc,CAC1E,KAAM,CAAAgB,WAAW,CAAGrC,GAAG,CAACQ,QAAQ,CAAE,UAAU,CAAC,CAC7C,KAAM,CAAAc,WAAW,CAAGnB,OAAO,CAACkC,WAAW,CAAGd,QAAQ,EAAK,CACnD,KAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,KAAM,CAAAgB,QAAmB,CAAGjB,IAAI,CAAGG,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAG,EAAE,CAC3DH,QAAQ,CAACoB,QAAQ,CAAC,CACtB,CAAC,CAAC,CAEF,MAAO,IAAMrC,GAAG,CAACiC,WAAW,CAAE,OAAO,CAAEf,WAAW,CAAC,CACvD,CAEA;AACA,YAAa,CAAAoB,iBAAiBA,CAACC,KAAiC,CAAmB,CAC/E,GAAI,CACA,KAAM,CAAAC,SAAS,CAAG5C,GAAG,CAACQ,QAAQ,CAAE,iBAAiB,CAAC,CAClD,KAAM,CAAAqC,WAAW,CAAG5C,IAAI,CAAC2C,SAAS,CAAC,CACnC,KAAM,CAAAE,WAAW,CAAA/B,aAAA,CAAAA,aAAA,IAAQ4B,KAAK,MAAE3B,EAAE,CAAE6B,WAAW,CAAC5B,GAAG,EAAE,CACrD,KAAM,CAAAf,GAAG,CAAC2C,WAAW,CAAEC,WAAW,CAAC,CACnC,MAAO,CAAAD,WAAW,CAAC5B,GAAG,CAC1B,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACf,CACJ,CAEA,MAAO,CAAA6B,wBAAwBA,CAAC1B,QAA4C,CAAc,CACtF,KAAM,CAAAuB,SAAS,CAAG5C,GAAG,CAACQ,QAAQ,CAAE,iBAAiB,CAAC,CAClD,KAAM,CAAAc,WAAW,CAAGnB,OAAO,CAACyC,SAAS,CAAGrB,QAAQ,EAAK,CACjD,KAAM,CAAAC,IAAI,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAC3B,KAAM,CAAAuB,MAAwB,CAAGxB,IAAI,CAAGG,MAAM,CAACC,MAAM,CAACJ,IAAI,CAAC,CAAG,EAAE,CAChEH,QAAQ,CAAC2B,MAAM,CAAC,CACpB,CAAC,CAAC,CAEF,MAAO,IAAM5C,GAAG,CAACwC,SAAS,CAAE,OAAO,CAAEtB,WAAW,CAAC,CACrD,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}