{"ast":null,"code":"class EmailVerificationService {\n  constructor() {\n    this.config = void 0;\n    this.generatedCodes = new Map();\n    this.config = {\n      smtpHost: 'smtp.gmail.com',\n      smtpPort: 587,\n      senderEmail: 'ahmedumar475@gmail.com',\n      appPassword: 'xxzzwqvkgewutobo',\n      senderName: 'Healthcare Security System'\n    };\n  }\n  generateVerificationCode() {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n  async sendVerificationEmail(recipientEmail = 'ahmedumar475@gmail.com') {\n    const verificationCode = this.generateVerificationCode();\n    const expiresAt = Date.now() + 10 * 1000; // 10 seconds\n\n    // Store the code for verification\n    this.generatedCodes.set(recipientEmail, {\n      code: verificationCode,\n      expiresAt\n    });\n    try {\n      // Since we're in a browser environment, we'll use EmailJS or a backend API\n      // For demo purposes, we'll simulate the email sending and show the code\n\n      // In a real implementation, you would call your backend API here\n      // that uses nodemailer with the SMTP configuration and email template\n      // const emailTemplate = this.createEmailTemplate(verificationCode);\n\n      console.log('üìß Email would be sent with config:', {\n        to: recipientEmail,\n        from: this.config.senderEmail,\n        subject: 'üîê Healthcare System - Verification Code',\n        template: 'HTML template with verification code',\n        host: this.config.smtpHost,\n        port: this.config.smtpPort,\n        auth: {\n          user: this.config.senderEmail,\n          pass: this.config.appPassword\n        }\n      });\n\n      // Simulate sending email via backend API\n      console.log('üìß Sending email with configuration:', {\n        to: recipientEmail,\n        from: this.config.senderEmail,\n        host: this.config.smtpHost,\n        port: this.config.smtpPort,\n        code: verificationCode\n      });\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // For demo purposes, show the code in console and alert\n      console.log(`‚úÖ Email sent successfully!`);\n      console.log(`üìß Verification Code: ${verificationCode}`);\n      console.log(`‚è∞ Expires in 5 minutes`);\n\n      // Show alert with the verification code (in real implementation, this would be sent to email)\n      this.showEmailSentNotification(verificationCode, recipientEmail);\n      return verificationCode;\n    } catch (error) {\n      console.error('‚ùå Failed to send verification email:', error);\n      throw new Error('Failed to send verification email. Please try again.');\n    }\n  }\n  createEmailTemplate(verificationCode) {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Healthcare System - Verification Code</title>\n        <style>\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\n          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n          .header { text-align: center; margin-bottom: 30px; }\n          .logo { font-size: 24px; font-weight: bold; color: #2563eb; }\n          .code-container { background-color: #f8fafc; border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; text-align: center; margin: 20px 0; }\n          .verification-code { font-size: 32px; font-weight: bold; color: #1f2937; letter-spacing: 4px; margin: 10px 0; }\n          .info { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <div class=\"logo\">ü©∫ Healthcare Security System</div>\n            <h2>Email Verification Required</h2>\n          </div>\n          \n          <p>Hello,</p>\n          <p>You are attempting to log into the Healthcare Security System. Please use the verification code below to complete your authentication:</p>\n          \n          <div class=\"code-container\">\n            <p>Your verification code is:</p>\n            <div class=\"verification-code\">${verificationCode}</div>\n            <p><strong>This code will expire in 5 minutes</strong></p>\n          </div>\n          \n          <div class=\"info\">\n            <p><strong>Security Notice:</strong></p>\n            <ul>\n              <li>Never share this code with anyone</li>\n              <li>Our support team will never ask for this code</li>\n              <li>If you didn't request this code, please ignore this email</li>\n            </ul>\n          </div>\n          \n          <p>If you have any questions or concerns, please contact our support team.</p>\n          \n          <div class=\"footer\">\n            <p>¬© 2025 Healthcare Security System | This is an automated message</p>\n            <p>Powered by secure SMTP with app-specific authentication</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n  showEmailSentNotification(code, email) {\n    // In a real implementation, this would not show the code\n    // But for demo purposes, we'll show it since we can't actually send emails from the frontend\n    const message = `üìß EMAIL SENT SUCCESSFULLY!\n\n‚úÖ Verification email has been sent to: ${email}\n\nüîê For demo purposes, your verification code is: ${code}\n\n‚è∞ This code will expire in 5 minutes.\n\nüì± In a real implementation:\n‚Ä¢ You would receive this code in your email\n‚Ä¢ The code would not be shown here\n‚Ä¢ You would copy it from your email inbox\n\nüõ°Ô∏è SMTP Configuration:\n‚Ä¢ Server: smtp.gmail.com:587\n‚Ä¢ Authentication: App-specific password\n‚Ä¢ Encryption: TLS/STARTTLS`;\n    alert(message);\n  }\n  verifyCode(email, inputCode) {\n    const stored = this.generatedCodes.get(email);\n    if (!stored) {\n      console.log('‚ùå No verification code found for this email');\n      return false;\n    }\n    if (Date.now() > stored.expiresAt) {\n      console.log('‚ùå Verification code has expired');\n      this.generatedCodes.delete(email);\n      return false;\n    }\n    if (stored.code !== inputCode) {\n      console.log('‚ùå Invalid verification code');\n      return false;\n    }\n\n    // Code is valid, remove it\n    this.generatedCodes.delete(email);\n    console.log('‚úÖ Verification code is valid!');\n    return true;\n  }\n  isCodeExpired(email) {\n    const stored = this.generatedCodes.get(email);\n    return !stored || Date.now() > stored.expiresAt;\n  }\n  getRemainingTime(email) {\n    const stored = this.generatedCodes.get(email);\n    if (!stored) return 0;\n    const remaining = stored.expiresAt - Date.now();\n    return Math.max(0, Math.floor(remaining / 1000));\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationService = new EmailVerificationService();\nexport default EmailVerificationService;","map":{"version":3,"names":["EmailVerificationService","constructor","config","generatedCodes","Map","smtpHost","smtpPort","senderEmail","appPassword","senderName","generateVerificationCode","Math","floor","random","toString","sendVerificationEmail","recipientEmail","verificationCode","expiresAt","Date","now","set","code","console","log","to","from","subject","template","host","port","auth","user","pass","Promise","resolve","setTimeout","showEmailSentNotification","error","Error","createEmailTemplate","email","message","alert","verifyCode","inputCode","stored","get","delete","isCodeExpired","getRemainingTime","remaining","max","emailVerificationService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/emailVerificationService.ts"],"sourcesContent":["interface EmailServiceConfig {\r\n    smtpHost: string;\r\n    smtpPort: number;\r\n    senderEmail: string;\r\n    appPassword: string;\r\n    senderName: string;\r\n}\r\n\r\nclass EmailVerificationService {\r\n    private config: EmailServiceConfig;\r\n    private generatedCodes: Map<string, { code: string; expiresAt: number }> = new Map();\r\n\r\n    constructor() {\r\n        this.config = {\r\n            smtpHost: 'smtp.gmail.com',\r\n            smtpPort: 587,\r\n            senderEmail: 'ahmedumar475@gmail.com',\r\n            appPassword: 'xxzzwqvkgewutobo',\r\n            senderName: 'Healthcare Security System'\r\n        };\r\n    }\r\n\r\n    generateVerificationCode(): string {\r\n        return Math.floor(100000 + Math.random() * 900000).toString();\r\n    }\r\n\r\n    async sendVerificationEmail(recipientEmail: string = 'ahmedumar475@gmail.com'): Promise<string> {\r\n        const verificationCode = this.generateVerificationCode();\r\n        const expiresAt = Date.now() + (10 * 1000); // 10 seconds\r\n\r\n        // Store the code for verification\r\n        this.generatedCodes.set(recipientEmail, {\r\n            code: verificationCode,\r\n            expiresAt\r\n        });\r\n\r\n        try {\r\n            // Since we're in a browser environment, we'll use EmailJS or a backend API\r\n            // For demo purposes, we'll simulate the email sending and show the code\r\n\r\n            // In a real implementation, you would call your backend API here\r\n            // that uses nodemailer with the SMTP configuration and email template\r\n            // const emailTemplate = this.createEmailTemplate(verificationCode);\r\n\r\n            console.log('üìß Email would be sent with config:', {\r\n                to: recipientEmail,\r\n                from: this.config.senderEmail,\r\n                subject: 'üîê Healthcare System - Verification Code',\r\n                template: 'HTML template with verification code',\r\n                host: this.config.smtpHost,\r\n                port: this.config.smtpPort,\r\n                auth: {\r\n                    user: this.config.senderEmail,\r\n                    pass: this.config.appPassword\r\n                }\r\n            });\r\n\r\n            // Simulate sending email via backend API\r\n            console.log('üìß Sending email with configuration:', {\r\n                to: recipientEmail,\r\n                from: this.config.senderEmail,\r\n                host: this.config.smtpHost,\r\n                port: this.config.smtpPort,\r\n                code: verificationCode\r\n            });\r\n\r\n            // Simulate API call delay\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n            // For demo purposes, show the code in console and alert\r\n            console.log(`‚úÖ Email sent successfully!`);\r\n            console.log(`üìß Verification Code: ${verificationCode}`);\r\n            console.log(`‚è∞ Expires in 5 minutes`);\r\n\r\n            // Show alert with the verification code (in real implementation, this would be sent to email)\r\n            this.showEmailSentNotification(verificationCode, recipientEmail);\r\n\r\n            return verificationCode;\r\n\r\n        } catch (error) {\r\n            console.error('‚ùå Failed to send verification email:', error);\r\n            throw new Error('Failed to send verification email. Please try again.');\r\n        }\r\n    }\r\n\r\n    private createEmailTemplate(verificationCode: string): string {\r\n        return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>Healthcare System - Verification Code</title>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\r\n          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\r\n          .header { text-align: center; margin-bottom: 30px; }\r\n          .logo { font-size: 24px; font-weight: bold; color: #2563eb; }\r\n          .code-container { background-color: #f8fafc; border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; text-align: center; margin: 20px 0; }\r\n          .verification-code { font-size: 32px; font-weight: bold; color: #1f2937; letter-spacing: 4px; margin: 10px 0; }\r\n          .info { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; }\r\n          .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #6b7280; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"container\">\r\n          <div class=\"header\">\r\n            <div class=\"logo\">ü©∫ Healthcare Security System</div>\r\n            <h2>Email Verification Required</h2>\r\n          </div>\r\n          \r\n          <p>Hello,</p>\r\n          <p>You are attempting to log into the Healthcare Security System. Please use the verification code below to complete your authentication:</p>\r\n          \r\n          <div class=\"code-container\">\r\n            <p>Your verification code is:</p>\r\n            <div class=\"verification-code\">${verificationCode}</div>\r\n            <p><strong>This code will expire in 5 minutes</strong></p>\r\n          </div>\r\n          \r\n          <div class=\"info\">\r\n            <p><strong>Security Notice:</strong></p>\r\n            <ul>\r\n              <li>Never share this code with anyone</li>\r\n              <li>Our support team will never ask for this code</li>\r\n              <li>If you didn't request this code, please ignore this email</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <p>If you have any questions or concerns, please contact our support team.</p>\r\n          \r\n          <div class=\"footer\">\r\n            <p>¬© 2025 Healthcare Security System | This is an automated message</p>\r\n            <p>Powered by secure SMTP with app-specific authentication</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n      </html>\r\n    `;\r\n    }\r\n\r\n    private showEmailSentNotification(code: string, email: string): void {\r\n        // In a real implementation, this would not show the code\r\n        // But for demo purposes, we'll show it since we can't actually send emails from the frontend\r\n        const message = `üìß EMAIL SENT SUCCESSFULLY!\r\n\r\n‚úÖ Verification email has been sent to: ${email}\r\n\r\nüîê For demo purposes, your verification code is: ${code}\r\n\r\n‚è∞ This code will expire in 5 minutes.\r\n\r\nüì± In a real implementation:\r\n‚Ä¢ You would receive this code in your email\r\n‚Ä¢ The code would not be shown here\r\n‚Ä¢ You would copy it from your email inbox\r\n\r\nüõ°Ô∏è SMTP Configuration:\r\n‚Ä¢ Server: smtp.gmail.com:587\r\n‚Ä¢ Authentication: App-specific password\r\n‚Ä¢ Encryption: TLS/STARTTLS`;\r\n\r\n        alert(message);\r\n    }\r\n\r\n    verifyCode(email: string, inputCode: string): boolean {\r\n        const stored = this.generatedCodes.get(email);\r\n\r\n        if (!stored) {\r\n            console.log('‚ùå No verification code found for this email');\r\n            return false;\r\n        }\r\n\r\n        if (Date.now() > stored.expiresAt) {\r\n            console.log('‚ùå Verification code has expired');\r\n            this.generatedCodes.delete(email);\r\n            return false;\r\n        }\r\n\r\n        if (stored.code !== inputCode) {\r\n            console.log('‚ùå Invalid verification code');\r\n            return false;\r\n        }\r\n\r\n        // Code is valid, remove it\r\n        this.generatedCodes.delete(email);\r\n        console.log('‚úÖ Verification code is valid!');\r\n        return true;\r\n    }\r\n\r\n    isCodeExpired(email: string): boolean {\r\n        const stored = this.generatedCodes.get(email);\r\n        return !stored || Date.now() > stored.expiresAt;\r\n    }\r\n\r\n    getRemainingTime(email: string): number {\r\n        const stored = this.generatedCodes.get(email);\r\n        if (!stored) return 0;\r\n\r\n        const remaining = stored.expiresAt - Date.now();\r\n        return Math.max(0, Math.floor(remaining / 1000));\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const emailVerificationService = new EmailVerificationService();\r\nexport default EmailVerificationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}