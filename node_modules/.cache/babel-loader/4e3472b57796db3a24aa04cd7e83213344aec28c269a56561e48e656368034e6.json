{"ast":null,"code":"import _objectSpread from\"D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _SharedStateService;class SharedStateService{constructor(){this.patients=[{id:'patient-1',name:'Michael Johnson',email:'mjohnson@email.com',dateOfBirth:'1985-03-15',phoneNumber:'+1-555-0123',address:'123 Main St, City, State 12345',emergencyContact:'Jane Johnson - +1-555-0124',insuranceProvider:'HealthFirst Insurance',insurancePolicyNumber:'HF-12345-MJ',lastVisit:'2025-06-15',upcomingAppointment:'2025-07-10',isActive:true},{id:'patient-2',name:'Sarah Wilson',email:'swilson@email.com',dateOfBirth:'1990-08-22',phoneNumber:'+1-555-0125',address:'456 Oak Ave, City, State 12345',emergencyContact:'Robert Wilson - +1-555-0126',insuranceProvider:'MediCare Plus',insurancePolicyNumber:'MP-67890-SW',lastVisit:'2025-06-20',upcomingAppointment:'2025-07-08',isActive:true},{id:'patient-3',name:'Ahmed Umar',email:'ahmedumar@email.com',dateOfBirth:'1992-11-18',phoneNumber:'+1-555-0126',address:'789 Pine St, City, State 12345',emergencyContact:'Fatima Umar - +1-555-0127',insuranceProvider:'Universal Health',insurancePolicyNumber:'UH-54321-AU',lastVisit:'2025-07-02',upcomingAppointment:'2025-07-15',isActive:true}];this.medicalRecords=[{id:'record-1',patientId:'patient-1',doctorId:'doctor-1',title:'Annual Physical Examination',description:'Comprehensive health checkup including blood work and vital signs',date:'2025-07-04',diagnosis:'Excellent health, all vitals normal',prescription:'Continue healthy lifestyle, return in 6 months',isEncrypted:true,blockchainHash:'0xabc123def456789abcdef123456789abc',isVerified:true,accessPermissions:['patient-1','doctor-1'],ipfsHash:'QmX9ZB7tRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0mP',nftTokenId:'HEALTH-NFT-001'},{id:'record-2',patientId:'patient-2',doctorId:'doctor-1',title:'Follow-up Consultation',description:'Review of previous treatment and medication adjustment',date:'2025-07-03',diagnosis:'Improvement noted, continue current treatment',prescription:'Adjust medication dosage, schedule follow-up in 3 weeks',isEncrypted:true,blockchainHash:'0xdef456abc789123def456abc789123def',isVerified:true,accessPermissions:['patient-2','doctor-1'],ipfsHash:'QmY8AX6sRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0nQ',nftTokenId:'HEALTH-NFT-002'}];this.insuranceClaims=[];// Listeners for state changes\nthis.patientListeners=[];this.recordListeners=[];this.claimListeners=[];}static getInstance(){if(!SharedStateService.instance){SharedStateService.instance=new SharedStateService();}return SharedStateService.instance;}// Patient management\ngetPatients(){return[...this.patients];}addPatient(patient){this.patients.push(patient);this.notifyPatientListeners();}updatePatient(patientId,updates){const index=this.patients.findIndex(p=>p.id===patientId);if(index!==-1){this.patients[index]=_objectSpread(_objectSpread({},this.patients[index]),updates);this.notifyPatientListeners();}}onPatientsChange(listener){this.patientListeners.push(listener);return()=>{const index=this.patientListeners.indexOf(listener);if(index>-1){this.patientListeners.splice(index,1);}};}notifyPatientListeners(){this.patientListeners.forEach(listener=>listener(this.patients));}// Medical record management\ngetMedicalRecords(){return[...this.medicalRecords];}getMedicalRecordsByPatient(patientId){return this.medicalRecords.filter(record=>record.patientId===patientId);}getMedicalRecordsByDoctor(doctorId){return this.medicalRecords.filter(record=>record.doctorId===doctorId);}addMedicalRecord(record){this.medicalRecords.push(record);this.notifyRecordListeners();}updateMedicalRecord(recordId,updates){const index=this.medicalRecords.findIndex(r=>r.id===recordId);if(index!==-1){this.medicalRecords[index]=_objectSpread(_objectSpread({},this.medicalRecords[index]),updates);this.notifyRecordListeners();}}onMedicalRecordsChange(listener){this.recordListeners.push(listener);return()=>{const index=this.recordListeners.indexOf(listener);if(index>-1){this.recordListeners.splice(index,1);}};}notifyRecordListeners(){this.recordListeners.forEach(listener=>listener(this.medicalRecords));}// Insurance claim management\ngetInsuranceClaims(){return[...this.insuranceClaims];}getInsuranceClaimsByPatient(patientId){return this.insuranceClaims.filter(claim=>claim.patientId===patientId);}addInsuranceClaim(claim){this.insuranceClaims.push(claim);this.notifyClaimListeners();}updateInsuranceClaim(claimId,updates){const index=this.insuranceClaims.findIndex(c=>c.id===claimId);if(index!==-1){this.insuranceClaims[index]=_objectSpread(_objectSpread({},this.insuranceClaims[index]),updates);this.notifyClaimListeners();}}onInsuranceClaimsChange(listener){this.claimListeners.push(listener);return()=>{const index=this.claimListeners.indexOf(listener);if(index>-1){this.claimListeners.splice(index,1);}};}notifyClaimListeners(){this.claimListeners.forEach(listener=>listener(this.insuranceClaims));}// Utility methods\ngenerateId(prefix){return\"\".concat(prefix,\"-\").concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9));}}_SharedStateService=SharedStateService;SharedStateService.instance=void 0;export const sharedStateService=SharedStateService.getInstance();","map":{"version":3,"names":["SharedStateService","constructor","patients","id","name","email","dateOfBirth","phoneNumber","address","emergencyContact","insuranceProvider","insurancePolicyNumber","lastVisit","upcomingAppointment","isActive","medicalRecords","patientId","doctorId","title","description","date","diagnosis","prescription","isEncrypted","blockchainHash","isVerified","accessPermissions","ipfsHash","nftTokenId","insuranceClaims","patientListeners","recordListeners","claimListeners","getInstance","instance","getPatients","addPatient","patient","push","notifyPatientListeners","updatePatient","updates","index","findIndex","p","_objectSpread","onPatientsChange","listener","indexOf","splice","forEach","getMedicalRecords","getMedicalRecordsByPatient","filter","record","getMedicalRecordsByDoctor","addMedicalRecord","notifyRecordListeners","updateMedicalRecord","recordId","r","onMedicalRecordsChange","getInsuranceClaims","getInsuranceClaimsByPatient","claim","addInsuranceClaim","notifyClaimListeners","updateInsuranceClaim","claimId","c","onInsuranceClaimsChange","generateId","prefix","concat","Date","now","Math","random","toString","substr","_SharedStateService","sharedStateService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/sharedState.ts"],"sourcesContent":["import { MedicalRecord, Patient, InsuranceClaim } from '../types';\r\n\r\ntype Listener<T> = (data: T[]) => void;\r\n\r\nclass SharedStateService {\r\n    private static instance: SharedStateService;\r\n    private patients: Patient[] = [\r\n        {\r\n            id: 'patient-1',\r\n            name: 'Michael Johnson',\r\n            email: 'mjohnson@email.com',\r\n            dateOfBirth: '1985-03-15',\r\n            phoneNumber: '+1-555-0123',\r\n            address: '123 Main St, City, State 12345',\r\n            emergencyContact: 'Jane Johnson - +1-555-0124',\r\n            insuranceProvider: 'HealthFirst Insurance',\r\n            insurancePolicyNumber: 'HF-12345-MJ',\r\n            lastVisit: '2025-06-15',\r\n            upcomingAppointment: '2025-07-10',\r\n            isActive: true\r\n        },\r\n        {\r\n            id: 'patient-2',\r\n            name: 'Sarah Wilson',\r\n            email: 'swilson@email.com',\r\n            dateOfBirth: '1990-08-22',\r\n            phoneNumber: '+1-555-0125',\r\n            address: '456 Oak Ave, City, State 12345',\r\n            emergencyContact: 'Robert Wilson - +1-555-0126',\r\n            insuranceProvider: 'MediCare Plus',\r\n            insurancePolicyNumber: 'MP-67890-SW',\r\n            lastVisit: '2025-06-20',\r\n            upcomingAppointment: '2025-07-08',\r\n            isActive: true\r\n        },\r\n        {\r\n            id: 'patient-3',\r\n            name: 'Ahmed Umar',\r\n            email: 'ahmedumar@email.com',\r\n            dateOfBirth: '1992-11-18',\r\n            phoneNumber: '+1-555-0126',\r\n            address: '789 Pine St, City, State 12345',\r\n            emergencyContact: 'Fatima Umar - +1-555-0127',\r\n            insuranceProvider: 'Universal Health',\r\n            insurancePolicyNumber: 'UH-54321-AU',\r\n            lastVisit: '2025-07-02',\r\n            upcomingAppointment: '2025-07-15',\r\n            isActive: true\r\n        }\r\n    ];\r\n\r\n    private medicalRecords: MedicalRecord[] = [\r\n        {\r\n            id: 'record-1',\r\n            patientId: 'patient-1',\r\n            doctorId: 'doctor-1',\r\n            title: 'Annual Physical Examination',\r\n            description: 'Comprehensive health checkup including blood work and vital signs',\r\n            date: '2025-07-04',\r\n            diagnosis: 'Excellent health, all vitals normal',\r\n            prescription: 'Continue healthy lifestyle, return in 6 months',\r\n            isEncrypted: true,\r\n            blockchainHash: '0xabc123def456789abcdef123456789abc',\r\n            isVerified: true,\r\n            accessPermissions: ['patient-1', 'doctor-1'],\r\n            ipfsHash: 'QmX9ZB7tRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0mP',\r\n            nftTokenId: 'HEALTH-NFT-001'\r\n        },\r\n        {\r\n            id: 'record-2',\r\n            patientId: 'patient-2',\r\n            doctorId: 'doctor-1',\r\n            title: 'Follow-up Consultation',\r\n            description: 'Review of previous treatment and medication adjustment',\r\n            date: '2025-07-03',\r\n            diagnosis: 'Improvement noted, continue current treatment',\r\n            prescription: 'Adjust medication dosage, schedule follow-up in 3 weeks',\r\n            isEncrypted: true,\r\n            blockchainHash: '0xdef456abc789123def456abc789123def',\r\n            isVerified: true,\r\n            accessPermissions: ['patient-2', 'doctor-1'],\r\n            ipfsHash: 'QmY8AX6sRvWKHGK8P2mNv3qL5rA9wS6cF4dE2gH1jK0nQ',\r\n            nftTokenId: 'HEALTH-NFT-002'\r\n        }\r\n    ];\r\n\r\n    private insuranceClaims: InsuranceClaim[] = [];\r\n\r\n    // Listeners for state changes\r\n    private patientListeners: Listener<Patient>[] = [];\r\n    private recordListeners: Listener<MedicalRecord>[] = [];\r\n    private claimListeners: Listener<InsuranceClaim>[] = [];\r\n\r\n    private constructor() {}\r\n\r\n    static getInstance(): SharedStateService {\r\n        if (!SharedStateService.instance) {\r\n            SharedStateService.instance = new SharedStateService();\r\n        }\r\n        return SharedStateService.instance;\r\n    }\r\n\r\n    // Patient management\r\n    getPatients(): Patient[] {\r\n        return [...this.patients];\r\n    }\r\n\r\n    addPatient(patient: Patient): void {\r\n        this.patients.push(patient);\r\n        this.notifyPatientListeners();\r\n    }\r\n\r\n    updatePatient(patientId: string, updates: Partial<Patient>): void {\r\n        const index = this.patients.findIndex(p => p.id === patientId);\r\n        if (index !== -1) {\r\n            this.patients[index] = { ...this.patients[index], ...updates };\r\n            this.notifyPatientListeners();\r\n        }\r\n    }\r\n\r\n    onPatientsChange(listener: Listener<Patient>): () => void {\r\n        this.patientListeners.push(listener);\r\n        return () => {\r\n            const index = this.patientListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.patientListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyPatientListeners(): void {\r\n        this.patientListeners.forEach(listener => listener(this.patients));\r\n    }\r\n\r\n    // Medical record management\r\n    getMedicalRecords(): MedicalRecord[] {\r\n        return [...this.medicalRecords];\r\n    }\r\n\r\n    getMedicalRecordsByPatient(patientId: string): MedicalRecord[] {\r\n        return this.medicalRecords.filter(record => record.patientId === patientId);\r\n    }\r\n\r\n    getMedicalRecordsByDoctor(doctorId: string): MedicalRecord[] {\r\n        return this.medicalRecords.filter(record => record.doctorId === doctorId);\r\n    }\r\n\r\n    addMedicalRecord(record: MedicalRecord): void {\r\n        this.medicalRecords.push(record);\r\n        this.notifyRecordListeners();\r\n    }\r\n\r\n    updateMedicalRecord(recordId: string, updates: Partial<MedicalRecord>): void {\r\n        const index = this.medicalRecords.findIndex(r => r.id === recordId);\r\n        if (index !== -1) {\r\n            this.medicalRecords[index] = { ...this.medicalRecords[index], ...updates };\r\n            this.notifyRecordListeners();\r\n        }\r\n    }\r\n\r\n    onMedicalRecordsChange(listener: Listener<MedicalRecord>): () => void {\r\n        this.recordListeners.push(listener);\r\n        return () => {\r\n            const index = this.recordListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.recordListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyRecordListeners(): void {\r\n        this.recordListeners.forEach(listener => listener(this.medicalRecords));\r\n    }\r\n\r\n    // Insurance claim management\r\n    getInsuranceClaims(): InsuranceClaim[] {\r\n        return [...this.insuranceClaims];\r\n    }\r\n\r\n    getInsuranceClaimsByPatient(patientId: string): InsuranceClaim[] {\r\n        return this.insuranceClaims.filter(claim => claim.patientId === patientId);\r\n    }\r\n\r\n    addInsuranceClaim(claim: InsuranceClaim): void {\r\n        this.insuranceClaims.push(claim);\r\n        this.notifyClaimListeners();\r\n    }\r\n\r\n    updateInsuranceClaim(claimId: string, updates: Partial<InsuranceClaim>): void {\r\n        const index = this.insuranceClaims.findIndex(c => c.id === claimId);\r\n        if (index !== -1) {\r\n            this.insuranceClaims[index] = { ...this.insuranceClaims[index], ...updates };\r\n            this.notifyClaimListeners();\r\n        }\r\n    }\r\n\r\n    onInsuranceClaimsChange(listener: Listener<InsuranceClaim>): () => void {\r\n        this.claimListeners.push(listener);\r\n        return () => {\r\n            const index = this.claimListeners.indexOf(listener);\r\n            if (index > -1) {\r\n                this.claimListeners.splice(index, 1);\r\n            }\r\n        };\r\n    }\r\n\r\n    private notifyClaimListeners(): void {\r\n        this.claimListeners.forEach(listener => listener(this.insuranceClaims));\r\n    }\r\n\r\n    // Utility methods\r\n    generateId(prefix: string): string {\r\n        return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n}\r\n\r\nexport const sharedStateService = SharedStateService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}