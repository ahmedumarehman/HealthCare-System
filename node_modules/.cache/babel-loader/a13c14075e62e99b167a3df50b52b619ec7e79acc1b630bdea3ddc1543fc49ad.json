{"ast":null,"code":"class EmailVerificationService{constructor(){this.config=void 0;this.generatedCodes=new Map();this.config={smtpHost:'smtp.gmail.com',smtpPort:587,senderEmail:'ahmedumar475@gmail.com',appPassword:'xxzzwqvkgewutobo',senderName:'Healthcare Security System'};}generateVerificationCode(){return Math.floor(100000+Math.random()*900000).toString();}async sendVerificationEmail(){let recipientEmail=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'ahmedumar475@gmail.com';const verificationCode=this.generateVerificationCode();const expiresAt=Date.now()+10*1000;// 10 seconds\n// Store the code for verification\nthis.generatedCodes.set(recipientEmail,{code:verificationCode,expiresAt});try{// Since we're in a browser environment, we'll use EmailJS or a backend API\n// For demo purposes, we'll simulate the email sending and show the code\n// In a real implementation, you would call your backend API here\n// that uses nodemailer with the SMTP configuration and email template\n// const emailTemplate = this.createEmailTemplate(verificationCode);\nconsole.log('üìß Email would be sent with config:',{to:recipientEmail,from:this.config.senderEmail,subject:'üîê Healthcare System - Verification Code',template:'HTML template with verification code',host:this.config.smtpHost,port:this.config.smtpPort,auth:{user:this.config.senderEmail,pass:this.config.appPassword}});// Simulate sending email via backend API\nconsole.log('üìß Sending email with configuration:',{to:recipientEmail,from:this.config.senderEmail,host:this.config.smtpHost,port:this.config.smtpPort,code:verificationCode});// Simulate API call delay\nawait new Promise(resolve=>setTimeout(resolve,2000));// For demo purposes, show the code in console and alert\nconsole.log(\"\\u2705 Email sent successfully!\");console.log(\"\\uD83D\\uDCE7 Verification Code: \".concat(verificationCode));console.log(\"\\u23F0 Expires in 5 minutes\");// Show alert with the verification code (in real implementation, this would be sent to email)\nthis.showEmailSentNotification(verificationCode,recipientEmail);return verificationCode;}catch(error){console.error('‚ùå Failed to send verification email:',error);throw new Error('Failed to send verification email. Please try again.');}}createEmailTemplate(verificationCode){return\"\\n      <!DOCTYPE html>\\n      <html>\\n      <head>\\n        <meta charset=\\\"utf-8\\\">\\n        <title>Healthcare System - Verification Code</title>\\n        <style>\\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\\n          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\\n          .header { text-align: center; margin-bottom: 30px; }\\n          .logo { font-size: 24px; font-weight: bold; color: #2563eb; }\\n          .code-container { background-color: #f8fafc; border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; text-align: center; margin: 20px 0; }\\n          .verification-code { font-size: 32px; font-weight: bold; color: #1f2937; letter-spacing: 4px; margin: 10px 0; }\\n          .info { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; }\\n          .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #6b7280; }\\n        </style>\\n      </head>\\n      <body>\\n        <div class=\\\"container\\\">\\n          <div class=\\\"header\\\">\\n            <div class=\\\"logo\\\">\\uD83E\\uDE7A Healthcare Security System</div>\\n            <h2>Email Verification Required</h2>\\n          </div>\\n          \\n          <p>Hello,</p>\\n          <p>You are attempting to log into the Healthcare Security System. Please use the verification code below to complete your authentication:</p>\\n          \\n          <div class=\\\"code-container\\\">\\n            <p>Your verification code is:</p>\\n            <div class=\\\"verification-code\\\">\".concat(verificationCode,\"</div>\\n            <p><strong>This code will expire in 5 minutes</strong></p>\\n          </div>\\n          \\n          <div class=\\\"info\\\">\\n            <p><strong>Security Notice:</strong></p>\\n            <ul>\\n              <li>Never share this code with anyone</li>\\n              <li>Our support team will never ask for this code</li>\\n              <li>If you didn't request this code, please ignore this email</li>\\n            </ul>\\n          </div>\\n          \\n          <p>If you have any questions or concerns, please contact our support team.</p>\\n          \\n          <div class=\\\"footer\\\">\\n            <p>\\xA9 2025 Healthcare Security System | This is an automated message</p>\\n            <p>Powered by secure SMTP with app-specific authentication</p>\\n          </div>\\n        </div>\\n      </body>\\n      </html>\\n    \");}showEmailSentNotification(code,email){// In a real implementation, this would not show the code\n// But for demo purposes, we'll show it since we can't actually send emails from the frontend\nconst message=\"\\uD83D\\uDCE7 EMAIL SENT SUCCESSFULLY!\\n\\n\\u2705 Verification email has been sent to: \".concat(email,\"\\n\\n\\uD83D\\uDD10 For demo purposes, your verification code is: \").concat(code,\"\\n\\n\\u23F0 This code will expire in 5 minutes.\\n\\n\\uD83D\\uDCF1 In a real implementation:\\n\\u2022 You would receive this code in your email\\n\\u2022 The code would not be shown here\\n\\u2022 You would copy it from your email inbox\\n\\n\\uD83D\\uDEE1\\uFE0F SMTP Configuration:\\n\\u2022 Server: smtp.gmail.com:587\\n\\u2022 Authentication: App-specific password\\n\\u2022 Encryption: TLS/STARTTLS\");alert(message);}verifyCode(email,inputCode){const stored=this.generatedCodes.get(email);if(!stored){console.log('‚ùå No verification code found for this email');return false;}if(Date.now()>stored.expiresAt){console.log('‚ùå Verification code has expired');this.generatedCodes.delete(email);return false;}if(stored.code!==inputCode){console.log('‚ùå Invalid verification code');return false;}// Code is valid, remove it\nthis.generatedCodes.delete(email);console.log('‚úÖ Verification code is valid!');return true;}isCodeExpired(email){const stored=this.generatedCodes.get(email);return!stored||Date.now()>stored.expiresAt;}getRemainingTime(email){const stored=this.generatedCodes.get(email);if(!stored)return 0;const remaining=stored.expiresAt-Date.now();return Math.max(0,Math.floor(remaining/1000));}}// Export singleton instance\nexport const emailVerificationService=new EmailVerificationService();export default EmailVerificationService;","map":{"version":3,"names":["EmailVerificationService","constructor","config","generatedCodes","Map","smtpHost","smtpPort","senderEmail","appPassword","senderName","generateVerificationCode","Math","floor","random","toString","sendVerificationEmail","recipientEmail","arguments","length","undefined","verificationCode","expiresAt","Date","now","set","code","console","log","to","from","subject","template","host","port","auth","user","pass","Promise","resolve","setTimeout","concat","showEmailSentNotification","error","Error","createEmailTemplate","email","message","alert","verifyCode","inputCode","stored","get","delete","isCodeExpired","getRemainingTime","remaining","max","emailVerificationService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/emailVerificationService.ts"],"sourcesContent":["interface EmailServiceConfig {\r\n    smtpHost: string;\r\n    smtpPort: number;\r\n    senderEmail: string;\r\n    appPassword: string;\r\n    senderName: string;\r\n}\r\n\r\nclass EmailVerificationService {\r\n    private config: EmailServiceConfig;\r\n    private generatedCodes: Map<string, { code: string; expiresAt: number }> = new Map();\r\n\r\n    constructor() {\r\n        this.config = {\r\n            smtpHost: 'smtp.gmail.com',\r\n            smtpPort: 587,\r\n            senderEmail: 'ahmedumar475@gmail.com',\r\n            appPassword: 'xxzzwqvkgewutobo',\r\n            senderName: 'Healthcare Security System'\r\n        };\r\n    }\r\n\r\n    generateVerificationCode(): string {\r\n        return Math.floor(100000 + Math.random() * 900000).toString();\r\n    }\r\n\r\n    async sendVerificationEmail(recipientEmail: string = 'ahmedumar475@gmail.com'): Promise<string> {\r\n        const verificationCode = this.generateVerificationCode();\r\n        const expiresAt = Date.now() + (10 * 1000); // 10 seconds\r\n\r\n        // Store the code for verification\r\n        this.generatedCodes.set(recipientEmail, {\r\n            code: verificationCode,\r\n            expiresAt\r\n        });\r\n\r\n        try {\r\n            // Since we're in a browser environment, we'll use EmailJS or a backend API\r\n            // For demo purposes, we'll simulate the email sending and show the code\r\n\r\n            // In a real implementation, you would call your backend API here\r\n            // that uses nodemailer with the SMTP configuration and email template\r\n            // const emailTemplate = this.createEmailTemplate(verificationCode);\r\n\r\n            console.log('üìß Email would be sent with config:', {\r\n                to: recipientEmail,\r\n                from: this.config.senderEmail,\r\n                subject: 'üîê Healthcare System - Verification Code',\r\n                template: 'HTML template with verification code',\r\n                host: this.config.smtpHost,\r\n                port: this.config.smtpPort,\r\n                auth: {\r\n                    user: this.config.senderEmail,\r\n                    pass: this.config.appPassword\r\n                }\r\n            });\r\n\r\n            // Simulate sending email via backend API\r\n            console.log('üìß Sending email with configuration:', {\r\n                to: recipientEmail,\r\n                from: this.config.senderEmail,\r\n                host: this.config.smtpHost,\r\n                port: this.config.smtpPort,\r\n                code: verificationCode\r\n            });\r\n\r\n            // Simulate API call delay\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n            // For demo purposes, show the code in console and alert\r\n            console.log(`‚úÖ Email sent successfully!`);\r\n            console.log(`üìß Verification Code: ${verificationCode}`);\r\n            console.log(`‚è∞ Expires in 5 minutes`);\r\n\r\n            // Show alert with the verification code (in real implementation, this would be sent to email)\r\n            this.showEmailSentNotification(verificationCode, recipientEmail);\r\n\r\n            return verificationCode;\r\n\r\n        } catch (error) {\r\n            console.error('‚ùå Failed to send verification email:', error);\r\n            throw new Error('Failed to send verification email. Please try again.');\r\n        }\r\n    }\r\n\r\n    private createEmailTemplate(verificationCode: string): string {\r\n        return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>Healthcare System - Verification Code</title>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\r\n          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 10px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\r\n          .header { text-align: center; margin-bottom: 30px; }\r\n          .logo { font-size: 24px; font-weight: bold; color: #2563eb; }\r\n          .code-container { background-color: #f8fafc; border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; text-align: center; margin: 20px 0; }\r\n          .verification-code { font-size: 32px; font-weight: bold; color: #1f2937; letter-spacing: 4px; margin: 10px 0; }\r\n          .info { background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; }\r\n          .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #6b7280; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"container\">\r\n          <div class=\"header\">\r\n            <div class=\"logo\">ü©∫ Healthcare Security System</div>\r\n            <h2>Email Verification Required</h2>\r\n          </div>\r\n          \r\n          <p>Hello,</p>\r\n          <p>You are attempting to log into the Healthcare Security System. Please use the verification code below to complete your authentication:</p>\r\n          \r\n          <div class=\"code-container\">\r\n            <p>Your verification code is:</p>\r\n            <div class=\"verification-code\">${verificationCode}</div>\r\n            <p><strong>This code will expire in 5 minutes</strong></p>\r\n          </div>\r\n          \r\n          <div class=\"info\">\r\n            <p><strong>Security Notice:</strong></p>\r\n            <ul>\r\n              <li>Never share this code with anyone</li>\r\n              <li>Our support team will never ask for this code</li>\r\n              <li>If you didn't request this code, please ignore this email</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <p>If you have any questions or concerns, please contact our support team.</p>\r\n          \r\n          <div class=\"footer\">\r\n            <p>¬© 2025 Healthcare Security System | This is an automated message</p>\r\n            <p>Powered by secure SMTP with app-specific authentication</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n      </html>\r\n    `;\r\n    }\r\n\r\n    private showEmailSentNotification(code: string, email: string): void {\r\n        // In a real implementation, this would not show the code\r\n        // But for demo purposes, we'll show it since we can't actually send emails from the frontend\r\n        const message = `üìß EMAIL SENT SUCCESSFULLY!\r\n\r\n‚úÖ Verification email has been sent to: ${email}\r\n\r\nüîê For demo purposes, your verification code is: ${code}\r\n\r\n‚è∞ This code will expire in 5 minutes.\r\n\r\nüì± In a real implementation:\r\n‚Ä¢ You would receive this code in your email\r\n‚Ä¢ The code would not be shown here\r\n‚Ä¢ You would copy it from your email inbox\r\n\r\nüõ°Ô∏è SMTP Configuration:\r\n‚Ä¢ Server: smtp.gmail.com:587\r\n‚Ä¢ Authentication: App-specific password\r\n‚Ä¢ Encryption: TLS/STARTTLS`;\r\n\r\n        alert(message);\r\n    }\r\n\r\n    verifyCode(email: string, inputCode: string): boolean {\r\n        const stored = this.generatedCodes.get(email);\r\n\r\n        if (!stored) {\r\n            console.log('‚ùå No verification code found for this email');\r\n            return false;\r\n        }\r\n\r\n        if (Date.now() > stored.expiresAt) {\r\n            console.log('‚ùå Verification code has expired');\r\n            this.generatedCodes.delete(email);\r\n            return false;\r\n        }\r\n\r\n        if (stored.code !== inputCode) {\r\n            console.log('‚ùå Invalid verification code');\r\n            return false;\r\n        }\r\n\r\n        // Code is valid, remove it\r\n        this.generatedCodes.delete(email);\r\n        console.log('‚úÖ Verification code is valid!');\r\n        return true;\r\n    }\r\n\r\n    isCodeExpired(email: string): boolean {\r\n        const stored = this.generatedCodes.get(email);\r\n        return !stored || Date.now() > stored.expiresAt;\r\n    }\r\n\r\n    getRemainingTime(email: string): number {\r\n        const stored = this.generatedCodes.get(email);\r\n        if (!stored) return 0;\r\n\r\n        const remaining = stored.expiresAt - Date.now();\r\n        return Math.max(0, Math.floor(remaining / 1000));\r\n    }\r\n}\r\n\r\n// Export singleton instance\r\nexport const emailVerificationService = new EmailVerificationService();\r\nexport default EmailVerificationService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}