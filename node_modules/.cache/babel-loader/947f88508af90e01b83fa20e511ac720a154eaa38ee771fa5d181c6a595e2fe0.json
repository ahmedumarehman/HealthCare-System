{"ast":null,"code":"import React,{useState}from'react';import QuickCameraVerification from'./QuickCameraVerification';import EnhancedTwoFactorAuth from'./EnhancedTwoFactorAuth';import{jsx as _jsx}from\"react/jsx-runtime\";const VerificationFlow=_ref=>{let{isOpen,onClose,onComplete,onFailure}=_ref;const[currentStep,setCurrentStep]=useState('biometric');const[isLoading,setIsLoading]=useState(false);const handleBiometricSuccess=()=>{console.log('✅ Biometric verification successful, proceeding to 2FA...');setCurrentStep('twofa');};const handleBiometricFailure=error=>{console.error('❌ Biometric verification failed:',error);onFailure===null||onFailure===void 0?void 0:onFailure(error);};const handleTwoFactorSuccess=code=>{setIsLoading(true);// Simulate 2FA verification\nsetTimeout(()=>{// Accept any 6-digit code for demo purposes\nif(code.length===6&&/^\\d+$/.test(code)){console.log('✅ Two-factor authentication successful!');setCurrentStep('complete');setIsLoading(false);// Complete the verification process\nsetTimeout(()=>{onComplete();},1000);}else{console.error('❌ Invalid 2FA code format');setIsLoading(false);onFailure===null||onFailure===void 0?void 0:onFailure('Invalid verification code format');}},2000);};const handleClose=()=>{// Reset the flow when closing\nsetCurrentStep('biometric');setIsLoading(false);onClose();};const renderCurrentStep=()=>{switch(currentStep){case'biometric':return/*#__PURE__*/_jsx(QuickCameraVerification,{isOpen:isOpen,onClose:handleClose,onSuccess:handleBiometricSuccess,onFailure:handleBiometricFailure});case'twofa':return/*#__PURE__*/_jsx(EnhancedTwoFactorAuth,{isOpen:isOpen,onClose:handleClose,onVerify:handleTwoFactorSuccess,isLoading:isLoading});case'complete':return null;// The flow is complete, component will close\ndefault:return null;}};return renderCurrentStep();};export default VerificationFlow;","map":{"version":3,"names":["React","useState","QuickCameraVerification","EnhancedTwoFactorAuth","jsx","_jsx","VerificationFlow","_ref","isOpen","onClose","onComplete","onFailure","currentStep","setCurrentStep","isLoading","setIsLoading","handleBiometricSuccess","console","log","handleBiometricFailure","error","handleTwoFactorSuccess","code","setTimeout","length","test","handleClose","renderCurrentStep","onSuccess","onVerify"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/components/Auth/VerificationFlow.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QuickCameraVerification from './QuickCameraVerification';\r\nimport EnhancedTwoFactorAuth from './EnhancedTwoFactorAuth';\r\n\r\ninterface VerificationFlowProps {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    onComplete: () => void;\r\n    onFailure?: (error: string) => void;\r\n}\r\n\r\nconst VerificationFlow: React.FC<VerificationFlowProps> = ({\r\n    isOpen,\r\n    onClose,\r\n    onComplete,\r\n    onFailure\r\n}) => {\r\n    const [currentStep, setCurrentStep] = useState<'biometric' | 'twofa' | 'complete'>('biometric');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleBiometricSuccess = () => {\r\n        console.log('✅ Biometric verification successful, proceeding to 2FA...');\r\n        setCurrentStep('twofa');\r\n    };\r\n\r\n    const handleBiometricFailure = (error: string) => {\r\n        console.error('❌ Biometric verification failed:', error);\r\n        onFailure?.(error);\r\n    };\r\n\r\n    const handleTwoFactorSuccess = (code: string) => {\r\n        setIsLoading(true);\r\n\r\n        // Simulate 2FA verification\r\n        setTimeout(() => {\r\n            // Accept any 6-digit code for demo purposes\r\n            if (code.length === 6 && /^\\d+$/.test(code)) {\r\n                console.log('✅ Two-factor authentication successful!');\r\n                setCurrentStep('complete');\r\n                setIsLoading(false);\r\n\r\n                // Complete the verification process\r\n                setTimeout(() => {\r\n                    onComplete();\r\n                }, 1000);\r\n            } else {\r\n                console.error('❌ Invalid 2FA code format');\r\n                setIsLoading(false);\r\n                onFailure?.('Invalid verification code format');\r\n            }\r\n        }, 2000);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        // Reset the flow when closing\r\n        setCurrentStep('biometric');\r\n        setIsLoading(false);\r\n        onClose();\r\n    };\r\n\r\n    const renderCurrentStep = () => {\r\n        switch (currentStep) {\r\n            case 'biometric':\r\n                return (\r\n                    <QuickCameraVerification\r\n                        isOpen={isOpen}\r\n                        onClose={handleClose}\r\n                        onSuccess={handleBiometricSuccess}\r\n                        onFailure={handleBiometricFailure}\r\n                    />\r\n                );\r\n\r\n            case 'twofa':\r\n                return (\r\n                    <EnhancedTwoFactorAuth\r\n                        isOpen={isOpen}\r\n                        onClose={handleClose}\r\n                        onVerify={handleTwoFactorSuccess}\r\n                        isLoading={isLoading}\r\n                    />\r\n                );\r\n\r\n            case 'complete':\r\n                return null; // The flow is complete, component will close\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return renderCurrentStep();\r\n};\r\n\r\nexport default VerificationFlow;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,uBAAuB,KAAM,2BAA2B,CAC/D,MAAO,CAAAC,qBAAqB,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS5D,KAAM,CAAAC,gBAAiD,CAAGC,IAAA,EAKpD,IALqD,CACvDC,MAAM,CACNC,OAAO,CACPC,UAAU,CACVC,SACJ,CAAC,CAAAJ,IAAA,CACG,KAAM,CAACK,WAAW,CAAEC,cAAc,CAAC,CAAGZ,QAAQ,CAAqC,WAAW,CAAC,CAC/F,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAEjD,KAAM,CAAAe,sBAAsB,CAAGA,CAAA,GAAM,CACjCC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC,CACxEL,cAAc,CAAC,OAAO,CAAC,CAC3B,CAAC,CAED,KAAM,CAAAM,sBAAsB,CAAIC,KAAa,EAAK,CAC9CH,OAAO,CAACG,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxDT,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAGS,KAAK,CAAC,CACtB,CAAC,CAED,KAAM,CAAAC,sBAAsB,CAAIC,IAAY,EAAK,CAC7CP,YAAY,CAAC,IAAI,CAAC,CAElB;AACAQ,UAAU,CAAC,IAAM,CACb;AACA,GAAID,IAAI,CAACE,MAAM,GAAK,CAAC,EAAI,OAAO,CAACC,IAAI,CAACH,IAAI,CAAC,CAAE,CACzCL,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CACtDL,cAAc,CAAC,UAAU,CAAC,CAC1BE,YAAY,CAAC,KAAK,CAAC,CAEnB;AACAQ,UAAU,CAAC,IAAM,CACbb,UAAU,CAAC,CAAC,CAChB,CAAC,CAAE,IAAI,CAAC,CACZ,CAAC,IAAM,CACHO,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC,CAC1CL,YAAY,CAAC,KAAK,CAAC,CACnBJ,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAG,kCAAkC,CAAC,CACnD,CACJ,CAAC,CAAE,IAAI,CAAC,CACZ,CAAC,CAED,KAAM,CAAAe,WAAW,CAAGA,CAAA,GAAM,CACtB;AACAb,cAAc,CAAC,WAAW,CAAC,CAC3BE,YAAY,CAAC,KAAK,CAAC,CACnBN,OAAO,CAAC,CAAC,CACb,CAAC,CAED,KAAM,CAAAkB,iBAAiB,CAAGA,CAAA,GAAM,CAC5B,OAAQf,WAAW,EACf,IAAK,WAAW,CACZ,mBACIP,IAAA,CAACH,uBAAuB,EACpBM,MAAM,CAAEA,MAAO,CACfC,OAAO,CAAEiB,WAAY,CACrBE,SAAS,CAAEZ,sBAAuB,CAClCL,SAAS,CAAEQ,sBAAuB,CACrC,CAAC,CAGV,IAAK,OAAO,CACR,mBACId,IAAA,CAACF,qBAAqB,EAClBK,MAAM,CAAEA,MAAO,CACfC,OAAO,CAAEiB,WAAY,CACrBG,QAAQ,CAAER,sBAAuB,CACjCP,SAAS,CAAEA,SAAU,CACxB,CAAC,CAGV,IAAK,UAAU,CACX,MAAO,KAAI,CAAE;AAEjB,QACI,MAAO,KAAI,CACnB,CACJ,CAAC,CAED,MAAO,CAAAa,iBAAiB,CAAC,CAAC,CAC9B,CAAC,CAED,cAAe,CAAArB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}