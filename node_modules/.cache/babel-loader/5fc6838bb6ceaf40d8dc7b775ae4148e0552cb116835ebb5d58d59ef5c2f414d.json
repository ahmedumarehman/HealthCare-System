{"ast":null,"code":"import CryptoJS from'crypto-js';export class EncryptionService{constructor(){this.secretKey=void 0;// In production, this should come from environment variables\nthis.secretKey=process.env.REACT_APP_ENCRYPTION_KEY||'default-secret-key';}encryptData(data){try{const encrypted=CryptoJS.AES.encrypt(data,this.secretKey).toString();return encrypted;}catch(error){console.error('Encryption failed:',error);throw new Error('Failed to encrypt data');}}decryptData(encryptedData){try{const bytes=CryptoJS.AES.decrypt(encryptedData,this.secretKey);const decrypted=bytes.toString(CryptoJS.enc.Utf8);if(!decrypted){throw new Error('Failed to decrypt data - invalid key or corrupted data');}return decrypted;}catch(error){console.error('Decryption failed:',error);throw new Error('Failed to decrypt data');}}// Enhanced encryption with password and verification\nencryptWithPassword(data,password){try{const salt=CryptoJS.lib.WordArray.random(128/8).toString();const key=this.deriveKey(password,salt);const verification=CryptoJS.SHA256(password+salt).toString();const dataWithVerification=JSON.stringify({verification:verification,originalData:data});const encryptedData=CryptoJS.AES.encrypt(dataWithVerification,key).toString();return{encryptedData,salt,verification};}catch(error){console.error('Password encryption failed:',error);throw new Error('Failed to encrypt data with password');}}// Enhanced decryption with password verification\ndecryptWithPassword(encryptedData,password,salt,expectedVerification){try{const key=this.deriveKey(password,salt);const passwordVerification=CryptoJS.SHA256(password+salt).toString();const bytes=CryptoJS.AES.decrypt(encryptedData,key);const decryptedString=bytes.toString(CryptoJS.enc.Utf8);if(!decryptedString){throw new Error('Invalid password - decryption resulted in empty data');}let decryptedData;try{decryptedData=JSON.parse(decryptedString);}catch(error){throw new Error('Invalid password or corrupted data - unable to parse decrypted content');}// Verify the password using the embedded verification hash\nif(decryptedData.verification){if(decryptedData.verification!==passwordVerification){throw new Error('Invalid password - verification failed');}return decryptedData.originalData;}else if(expectedVerification){if(expectedVerification!==passwordVerification){throw new Error('Invalid password - verification failed');}return decryptedString;}else{console.warn('Decryption performed without password verification');return decryptedString;}}catch(error){console.error('Password decryption failed:',error);if(error instanceof Error&&error.message.includes('Invalid password')){throw error;}throw new Error('Failed to decrypt data with password');}}hashData(data){return CryptoJS.SHA256(data).toString();}generateSalt(){return CryptoJS.lib.WordArray.random(128/8).toString();}deriveKey(password,salt){return CryptoJS.PBKDF2(password,salt,{keySize:256/32,iterations:100000}).toString();}encryptMedicalRecord(record){const jsonData=JSON.stringify(record);const encryptedData=this.encryptData(jsonData);const hash=this.hashData(jsonData);return{encryptedData,hash};}decryptMedicalRecord(encryptedData){const decryptedJson=this.decryptData(encryptedData);return JSON.parse(decryptedJson);}verifyRecordIntegrity(record,expectedHash){const currentHash=this.hashData(JSON.stringify(record));return currentHash===expectedHash;}}export const encryptionService=new EncryptionService();","map":{"version":3,"names":["CryptoJS","EncryptionService","constructor","secretKey","process","env","REACT_APP_ENCRYPTION_KEY","encryptData","data","encrypted","AES","encrypt","toString","error","console","Error","decryptData","encryptedData","bytes","decrypt","decrypted","enc","Utf8","encryptWithPassword","password","salt","lib","WordArray","random","key","deriveKey","verification","SHA256","dataWithVerification","JSON","stringify","originalData","decryptWithPassword","expectedVerification","passwordVerification","decryptedString","decryptedData","parse","warn","message","includes","hashData","generateSalt","PBKDF2","keySize","iterations","encryptMedicalRecord","record","jsonData","hash","decryptMedicalRecord","decryptedJson","verifyRecordIntegrity","expectedHash","currentHash","encryptionService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/encryption.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nexport class EncryptionService {\r\n  private secretKey: string;\r\n\r\n  constructor() {\r\n    // In production, this should come from environment variables\r\n    this.secretKey = process.env.REACT_APP_ENCRYPTION_KEY || 'default-secret-key';\r\n  }\r\n\r\n  encryptData(data: string): string {\r\n    try {\r\n      const encrypted = CryptoJS.AES.encrypt(data, this.secretKey).toString();\r\n      return encrypted;\r\n    } catch (error) {\r\n      console.error('Encryption failed:', error);\r\n      throw new Error('Failed to encrypt data');\r\n    }\r\n  }\r\n\r\n  decryptData(encryptedData: string): string {\r\n    try {\r\n      const bytes = CryptoJS.AES.decrypt(encryptedData, this.secretKey);\r\n      const decrypted = bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n      if (!decrypted) {\r\n        throw new Error('Failed to decrypt data - invalid key or corrupted data');\r\n      }\r\n\r\n      return decrypted;\r\n    } catch (error) {\r\n      console.error('Decryption failed:', error);\r\n      throw new Error('Failed to decrypt data');\r\n    }\r\n  }\r\n\r\n  // Enhanced encryption with password and verification\r\n  encryptWithPassword(data: string, password: string): { encryptedData: string, salt: string, verification: string } {\r\n    try {\r\n      const salt = CryptoJS.lib.WordArray.random(128 / 8).toString();\r\n      const key = this.deriveKey(password, salt);\r\n      const verification = CryptoJS.SHA256(password + salt).toString();\r\n\r\n      const dataWithVerification = JSON.stringify({\r\n        verification: verification,\r\n        originalData: data\r\n      });\r\n\r\n      const encryptedData = CryptoJS.AES.encrypt(dataWithVerification, key).toString();\r\n\r\n      return {\r\n        encryptedData,\r\n        salt,\r\n        verification\r\n      };\r\n    } catch (error) {\r\n      console.error('Password encryption failed:', error);\r\n      throw new Error('Failed to encrypt data with password');\r\n    }\r\n  }\r\n\r\n  // Enhanced decryption with password verification\r\n  decryptWithPassword(encryptedData: string, password: string, salt: string, expectedVerification?: string): string {\r\n    try {\r\n      const key = this.deriveKey(password, salt);\r\n      const passwordVerification = CryptoJS.SHA256(password + salt).toString();\r\n\r\n      const bytes = CryptoJS.AES.decrypt(encryptedData, key);\r\n      const decryptedString = bytes.toString(CryptoJS.enc.Utf8);\r\n\r\n      if (!decryptedString) {\r\n        throw new Error('Invalid password - decryption resulted in empty data');\r\n      }\r\n\r\n      let decryptedData;\r\n      try {\r\n        decryptedData = JSON.parse(decryptedString);\r\n      } catch (error) {\r\n        throw new Error('Invalid password or corrupted data - unable to parse decrypted content');\r\n      }\r\n\r\n      // Verify the password using the embedded verification hash\r\n      if (decryptedData.verification) {\r\n        if (decryptedData.verification !== passwordVerification) {\r\n          throw new Error('Invalid password - verification failed');\r\n        }\r\n        return decryptedData.originalData;\r\n      } else if (expectedVerification) {\r\n        if (expectedVerification !== passwordVerification) {\r\n          throw new Error('Invalid password - verification failed');\r\n        }\r\n        return decryptedString;\r\n      } else {\r\n        console.warn('Decryption performed without password verification');\r\n        return decryptedString;\r\n      }\r\n    } catch (error) {\r\n      console.error('Password decryption failed:', error);\r\n      if (error instanceof Error && error.message.includes('Invalid password')) {\r\n        throw error;\r\n      }\r\n      throw new Error('Failed to decrypt data with password');\r\n    }\r\n  }\r\n\r\n  hashData(data: string): string {\r\n    return CryptoJS.SHA256(data).toString();\r\n  }\r\n\r\n  generateSalt(): string {\r\n    return CryptoJS.lib.WordArray.random(128 / 8).toString();\r\n  }\r\n\r\n  deriveKey(password: string, salt: string): string {\r\n    return CryptoJS.PBKDF2(password, salt, {\r\n      keySize: 256 / 32,\r\n      iterations: 100000\r\n    }).toString();\r\n  }\r\n\r\n  encryptMedicalRecord(record: any): { encryptedData: string, hash: string } {\r\n    const jsonData = JSON.stringify(record);\r\n    const encryptedData = this.encryptData(jsonData);\r\n    const hash = this.hashData(jsonData);\r\n\r\n    return {\r\n      encryptedData,\r\n      hash\r\n    };\r\n  }\r\n\r\n  decryptMedicalRecord(encryptedData: string): any {\r\n    const decryptedJson = this.decryptData(encryptedData);\r\n    return JSON.parse(decryptedJson);\r\n  }\r\n\r\n  verifyRecordIntegrity(record: any, expectedHash: string): boolean {\r\n    const currentHash = this.hashData(JSON.stringify(record));\r\n    return currentHash === expectedHash;\r\n  }\r\n}\r\n\r\nexport const encryptionService = new EncryptionService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}