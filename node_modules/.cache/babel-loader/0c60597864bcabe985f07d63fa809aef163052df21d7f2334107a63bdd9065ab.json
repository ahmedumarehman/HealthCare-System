{"ast":null,"code":"class ClipboardSecurityService{constructor(){this.isMonitoring=false;this.monitoringInterval=null;this.lastClipboardContent='';this.audioContext=null;this.callbacks=[];// Known fake/hacked wallet addresses (in real app, this would come from a security API)\nthis.KNOWN_FAKE_ADDRESSES=new Set(['0x1234567890123456789012345678901234567890','0xabcdefabcdefabcdefabcdefabcdefabcdefabcd','0x0000000000000000000000000000000000000000','0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef','0x1111111111111111111111111111111111111111','0x2222222222222222222222222222222222222222','0xffffffffffffffffffffffffffffffffffff','0xbaddcafebaddcafebaddcafebaddcafebaddcafe'// Add more known fake addresses here\n]);// Patterns for suspicious addresses\nthis.SUSPICIOUS_PATTERNS=[/^0x0+$/,// All zeros\n/^0x1+$/,// All ones  \n/^0x(12345)+/,// Repeating 12345\n/^0x(abcdef)+/,// Repeating abcdef\n/^0x(deadbeef)+/,// Repeating deadbeef\n/^0x(baddcafe)+/,// Repeating baddcafe\n/^0x(cafebabe)+/// Repeating cafebabe\n];this.initializeAudioContext();}initializeAudioContext(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext)();}catch(error){console.warn('Audio context not supported:',error);}}async playAlertSound(){let isFake=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!this.audioContext)return;try{// Resume audio context if suspended\nif(this.audioContext.state==='suspended'){await this.audioContext.resume();}const oscillator=this.audioContext.createOscillator();const gainNode=this.audioContext.createGain();oscillator.connect(gainNode);gainNode.connect(this.audioContext.destination);// Different tones for different alert types\nif(isFake){// Dangerous/fake address - urgent warning sound\noscillator.frequency.setValueAtTime(800,this.audioContext.currentTime);oscillator.frequency.setValueAtTime(400,this.audioContext.currentTime+0.1);oscillator.frequency.setValueAtTime(800,this.audioContext.currentTime+0.2);oscillator.frequency.setValueAtTime(400,this.audioContext.currentTime+0.3);gainNode.gain.setValueAtTime(0.3,this.audioContext.currentTime);}else{// Normal clipboard change - gentle notification\noscillator.frequency.setValueAtTime(600,this.audioContext.currentTime);gainNode.gain.setValueAtTime(0.1,this.audioContext.currentTime);}oscillator.type='sine';oscillator.start(this.audioContext.currentTime);oscillator.stop(this.audioContext.currentTime+(isFake?0.4:0.2));}catch(error){console.warn('Failed to play alert sound:',error);}}isWalletAddress(text){// Ethereum address pattern\nconst ethPattern=/^0x[a-fA-F0-9]{40}$/;// Bitcoin address patterns\nconst btcPattern=/^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/;return ethPattern.test(text)||btcPattern.test(text);}isFakeOrSuspiciousAddress(address){// Check against known fake addresses\nif(this.KNOWN_FAKE_ADDRESSES.has(address.toLowerCase())){return true;}// Check against suspicious patterns\nreturn this.SUSPICIOUS_PATTERNS.some(pattern=>pattern.test(address.toLowerCase()));}async checkClipboard(){try{if(!navigator.clipboard||!navigator.clipboard.readText){console.warn('Clipboard API not supported');return;}const clipboardText=await navigator.clipboard.readText();// Only process if clipboard content changed\nif(clipboardText!==this.lastClipboardContent){this.lastClipboardContent=clipboardText;// Check if it's a wallet address\nif(this.isWalletAddress(clipboardText.trim())){const isFake=this.isFakeOrSuspiciousAddress(clipboardText.trim());// Play alert sound\nawait this.playAlertSound(isFake);// Notify callbacks\nthis.callbacks.forEach(callback=>{try{callback(clipboardText.trim(),isFake);}catch(error){console.error('Error in clipboard callback:',error);}});console.log(\"Wallet address detected: \".concat(clipboardText.trim()).concat(isFake?' (SUSPICIOUS!)':''));}}}catch(error){// Permission denied or other error - fail silently\nif(error instanceof Error&&!error.message.includes('permission')){console.warn('Clipboard monitoring error:',error);}}}startMonitoring(onAddressDetected){if(this.isMonitoring){console.warn('Clipboard monitoring already active');return;}if(onAddressDetected){this.callbacks.push(onAddressDetected);}this.isMonitoring=true;// Check clipboard every 500ms\nthis.monitoringInterval=setInterval(()=>{this.checkClipboard();},500);console.log('Clipboard monitoring started');}stopMonitoring(){if(!this.isMonitoring){return;}this.isMonitoring=false;if(this.monitoringInterval){clearInterval(this.monitoringInterval);this.monitoringInterval=null;}this.callbacks=[];this.lastClipboardContent='';console.log('Clipboard monitoring stopped');}isActive(){return this.isMonitoring;}addKnownFakeAddress(address){this.KNOWN_FAKE_ADDRESSES.add(address.toLowerCase());}removeKnownFakeAddress(address){this.KNOWN_FAKE_ADDRESSES.delete(address.toLowerCase());}getKnownFakeAddresses(){return Array.from(this.KNOWN_FAKE_ADDRESSES);}// Request clipboard permission upfront\nasync requestClipboardPermission(){try{if(!navigator.clipboard){throw new Error('Clipboard API not supported');}// Try to read clipboard to trigger permission request\nawait navigator.clipboard.readText();return true;}catch(error){console.warn('Clipboard permission denied or not supported:',error);return false;}}// Test the alert system\nasync testAlert(){let isFake=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;await this.playAlertSound(isFake);// Simulate address detection\nconst testAddress=isFake?'0x1234567890123456789012345678901234567890':'0x742f35Cc4B80A5b81E6E51B9aC02D74C8Bb5f8D1';this.callbacks.forEach(callback=>{callback(testAddress,isFake);});}}export const clipboardSecurityService=new ClipboardSecurityService();","map":{"version":3,"names":["ClipboardSecurityService","constructor","isMonitoring","monitoringInterval","lastClipboardContent","audioContext","callbacks","KNOWN_FAKE_ADDRESSES","Set","SUSPICIOUS_PATTERNS","initializeAudioContext","window","AudioContext","webkitAudioContext","error","console","warn","playAlertSound","isFake","arguments","length","undefined","state","resume","oscillator","createOscillator","gainNode","createGain","connect","destination","frequency","setValueAtTime","currentTime","gain","type","start","stop","isWalletAddress","text","ethPattern","btcPattern","test","isFakeOrSuspiciousAddress","address","has","toLowerCase","some","pattern","checkClipboard","navigator","clipboard","readText","clipboardText","trim","forEach","callback","log","concat","Error","message","includes","startMonitoring","onAddressDetected","push","setInterval","stopMonitoring","clearInterval","isActive","addKnownFakeAddress","add","removeKnownFakeAddress","delete","getKnownFakeAddresses","Array","from","requestClipboardPermission","testAlert","testAddress","clipboardSecurityService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/clipboardSecurityService.ts"],"sourcesContent":["class ClipboardSecurityService {\r\n  private isMonitoring = false;\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  private lastClipboardContent = '';\r\n  private audioContext: AudioContext | null = null;\r\n  private callbacks: Array<(address: string, isFake: boolean) => void> = [];\r\n\r\n  // Known fake/hacked wallet addresses (in real app, this would come from a security API)\r\n  private readonly KNOWN_FAKE_ADDRESSES = new Set([\r\n    '0x1234567890123456789012345678901234567890',\r\n    '0xabcdefabcdefabcdefabcdefabcdefabcdefabcd',\r\n    '0x0000000000000000000000000000000000000000',\r\n    '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',\r\n    '0x1111111111111111111111111111111111111111',\r\n    '0x2222222222222222222222222222222222222222',\r\n    '0xffffffffffffffffffffffffffffffffffff',\r\n    '0xbaddcafebaddcafebaddcafebaddcafebaddcafe',\r\n    // Add more known fake addresses here\r\n  ]);\r\n\r\n  // Patterns for suspicious addresses\r\n  private readonly SUSPICIOUS_PATTERNS = [\r\n    /^0x0+$/, // All zeros\r\n    /^0x1+$/, // All ones  \r\n    /^0x(12345)+/, // Repeating 12345\r\n    /^0x(abcdef)+/, // Repeating abcdef\r\n    /^0x(deadbeef)+/, // Repeating deadbeef\r\n    /^0x(baddcafe)+/, // Repeating baddcafe\r\n    /^0x(cafebabe)+/, // Repeating cafebabe\r\n  ];\r\n\r\n  constructor() {\r\n    this.initializeAudioContext();\r\n  }\r\n\r\n  private initializeAudioContext() {\r\n    try {\r\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n    } catch (error) {\r\n      console.warn('Audio context not supported:', error);\r\n    }\r\n  }\r\n\r\n  private async playAlertSound(isFake: boolean = false) {\r\n    if (!this.audioContext) return;\r\n\r\n    try {\r\n      // Resume audio context if suspended\r\n      if (this.audioContext.state === 'suspended') {\r\n        await this.audioContext.resume();\r\n      }\r\n\r\n      const oscillator = this.audioContext.createOscillator();\r\n      const gainNode = this.audioContext.createGain();\r\n\r\n      oscillator.connect(gainNode);\r\n      gainNode.connect(this.audioContext.destination);\r\n\r\n      // Different tones for different alert types\r\n      if (isFake) {\r\n        // Dangerous/fake address - urgent warning sound\r\n        oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);\r\n        oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime + 0.1);\r\n        oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime + 0.2);\r\n        oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime + 0.3);\r\n        gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);\r\n      } else {\r\n        // Normal clipboard change - gentle notification\r\n        oscillator.frequency.setValueAtTime(600, this.audioContext.currentTime);\r\n        gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);\r\n      }\r\n\r\n      oscillator.type = 'sine';\r\n      oscillator.start(this.audioContext.currentTime);\r\n      oscillator.stop(this.audioContext.currentTime + (isFake ? 0.4 : 0.2));\r\n\r\n    } catch (error) {\r\n      console.warn('Failed to play alert sound:', error);\r\n    }\r\n  }\r\n\r\n  private isWalletAddress(text: string): boolean {\r\n    // Ethereum address pattern\r\n    const ethPattern = /^0x[a-fA-F0-9]{40}$/;\r\n    // Bitcoin address patterns\r\n    const btcPattern = /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/;\r\n    \r\n    return ethPattern.test(text) || btcPattern.test(text);\r\n  }\r\n\r\n  private isFakeOrSuspiciousAddress(address: string): boolean {\r\n    // Check against known fake addresses\r\n    if (this.KNOWN_FAKE_ADDRESSES.has(address.toLowerCase())) {\r\n      return true;\r\n    }\r\n\r\n    // Check against suspicious patterns\r\n    return this.SUSPICIOUS_PATTERNS.some(pattern => pattern.test(address.toLowerCase()));\r\n  }\r\n\r\n  private async checkClipboard() {\r\n    try {\r\n      if (!navigator.clipboard || !navigator.clipboard.readText) {\r\n        console.warn('Clipboard API not supported');\r\n        return;\r\n      }\r\n\r\n      const clipboardText = await navigator.clipboard.readText();\r\n      \r\n      // Only process if clipboard content changed\r\n      if (clipboardText !== this.lastClipboardContent) {\r\n        this.lastClipboardContent = clipboardText;\r\n        \r\n        // Check if it's a wallet address\r\n        if (this.isWalletAddress(clipboardText.trim())) {\r\n          const isFake = this.isFakeOrSuspiciousAddress(clipboardText.trim());\r\n          \r\n          // Play alert sound\r\n          await this.playAlertSound(isFake);\r\n          \r\n          // Notify callbacks\r\n          this.callbacks.forEach(callback => {\r\n            try {\r\n              callback(clipboardText.trim(), isFake);\r\n            } catch (error) {\r\n              console.error('Error in clipboard callback:', error);\r\n            }\r\n          });\r\n\r\n          console.log(`Wallet address detected: ${clipboardText.trim()}${isFake ? ' (SUSPICIOUS!)' : ''}`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Permission denied or other error - fail silently\r\n      if (error instanceof Error && !error.message.includes('permission')) {\r\n        console.warn('Clipboard monitoring error:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  public startMonitoring(onAddressDetected?: (address: string, isFake: boolean) => void) {\r\n    if (this.isMonitoring) {\r\n      console.warn('Clipboard monitoring already active');\r\n      return;\r\n    }\r\n\r\n    if (onAddressDetected) {\r\n      this.callbacks.push(onAddressDetected);\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    \r\n    // Check clipboard every 500ms\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.checkClipboard();\r\n    }, 500);\r\n\r\n    console.log('Clipboard monitoring started');\r\n  }\r\n\r\n  public stopMonitoring() {\r\n    if (!this.isMonitoring) {\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n    \r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n\r\n    this.callbacks = [];\r\n    this.lastClipboardContent = '';\r\n\r\n    console.log('Clipboard monitoring stopped');\r\n  }\r\n\r\n  public isActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n\r\n  public addKnownFakeAddress(address: string) {\r\n    this.KNOWN_FAKE_ADDRESSES.add(address.toLowerCase());\r\n  }\r\n\r\n  public removeKnownFakeAddress(address: string) {\r\n    this.KNOWN_FAKE_ADDRESSES.delete(address.toLowerCase());\r\n  }\r\n\r\n  public getKnownFakeAddresses(): string[] {\r\n    return Array.from(this.KNOWN_FAKE_ADDRESSES);\r\n  }\r\n\r\n  // Request clipboard permission upfront\r\n  public async requestClipboardPermission(): Promise<boolean> {\r\n    try {\r\n      if (!navigator.clipboard) {\r\n        throw new Error('Clipboard API not supported');\r\n      }\r\n\r\n      // Try to read clipboard to trigger permission request\r\n      await navigator.clipboard.readText();\r\n      return true;\r\n    } catch (error) {\r\n      console.warn('Clipboard permission denied or not supported:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Test the alert system\r\n  public async testAlert(isFake: boolean = false) {\r\n    await this.playAlertSound(isFake);\r\n    \r\n    // Simulate address detection\r\n    const testAddress = isFake \r\n      ? '0x1234567890123456789012345678901234567890'\r\n      : '0x742f35Cc4B80A5b81E6E51B9aC02D74C8Bb5f8D1';\r\n    \r\n    this.callbacks.forEach(callback => {\r\n      callback(testAddress, isFake);\r\n    });\r\n  }\r\n}\r\n\r\nexport const clipboardSecurityService = new ClipboardSecurityService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}