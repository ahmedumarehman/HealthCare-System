{"ast":null,"code":"import { ref, push, set, onValue, off, query, orderByChild, equalTo } from 'firebase/database';\nimport { database } from '../config/firebase';\nexport class FirebaseService {\n  // Medical Records\n  static async addMedicalRecord(record) {\n    try {\n      const recordsRef = ref(database, 'medicalRecords');\n      const newRecordRef = push(recordsRef);\n      const recordWithId = {\n        ...record,\n        id: newRecordRef.key\n      };\n      await set(newRecordRef, recordWithId);\n      return newRecordRef.key;\n    } catch (error) {\n      console.error('Error adding medical record:', error);\n      throw error;\n    }\n  }\n  static subscribeMedicalRecords(callback) {\n    const recordsRef = ref(database, 'medicalRecords');\n    const unsubscribe = onValue(recordsRef, snapshot => {\n      const data = snapshot.val();\n      const records = data ? Object.values(data) : [];\n      callback(records);\n    });\n    return () => off(recordsRef, 'value', unsubscribe);\n  }\n  static subscribePatientRecords(patientId, callback) {\n    const recordsRef = ref(database, 'medicalRecords');\n    const patientRecordsQuery = query(recordsRef, orderByChild('patientId'), equalTo(patientId));\n    const unsubscribe = onValue(patientRecordsQuery, snapshot => {\n      const data = snapshot.val();\n      const records = data ? Object.values(data) : [];\n      callback(records);\n    });\n    return () => off(recordsRef, 'value', unsubscribe);\n  }\n  static subscribeDoctorRecords(doctorId, callback) {\n    const recordsRef = ref(database, 'medicalRecords');\n    const doctorRecordsQuery = query(recordsRef, orderByChild('doctorId'), equalTo(doctorId));\n    const unsubscribe = onValue(doctorRecordsQuery, snapshot => {\n      const data = snapshot.val();\n      const records = data ? Object.values(data) : [];\n      callback(records);\n    });\n    return () => off(recordsRef, 'value', unsubscribe);\n  }\n\n  // Patients\n  static async addPatient(patient) {\n    try {\n      const patientsRef = ref(database, 'patients');\n      const newPatientRef = push(patientsRef);\n      const patientWithId = {\n        ...patient,\n        id: newPatientRef.key\n      };\n      await set(newPatientRef, patientWithId);\n      return newPatientRef.key;\n    } catch (error) {\n      console.error('Error adding patient:', error);\n      throw error;\n    }\n  }\n  static subscribePatients(callback) {\n    const patientsRef = ref(database, 'patients');\n    const unsubscribe = onValue(patientsRef, snapshot => {\n      const data = snapshot.val();\n      const patients = data ? Object.values(data) : [];\n      callback(patients);\n    });\n    return () => off(patientsRef, 'value', unsubscribe);\n  }\n\n  // Insurance Claims\n  static async addInsuranceClaim(claim) {\n    try {\n      const claimsRef = ref(database, 'insuranceClaims');\n      const newClaimRef = push(claimsRef);\n      const claimWithId = {\n        ...claim,\n        id: newClaimRef.key\n      };\n      await set(newClaimRef, claimWithId);\n      return newClaimRef.key;\n    } catch (error) {\n      console.error('Error adding insurance claim:', error);\n      throw error;\n    }\n  }\n  static subscribeInsuranceClaims(callback) {\n    const claimsRef = ref(database, 'insuranceClaims');\n    const unsubscribe = onValue(claimsRef, snapshot => {\n      const data = snapshot.val();\n      const claims = data ? Object.values(data) : [];\n      callback(claims);\n    });\n    return () => off(claimsRef, 'value', unsubscribe);\n  }\n}","map":{"version":3,"names":["ref","push","set","onValue","off","query","orderByChild","equalTo","database","FirebaseService","addMedicalRecord","record","recordsRef","newRecordRef","recordWithId","id","key","error","console","subscribeMedicalRecords","callback","unsubscribe","snapshot","data","val","records","Object","values","subscribePatientRecords","patientId","patientRecordsQuery","subscribeDoctorRecords","doctorId","doctorRecordsQuery","addPatient","patient","patientsRef","newPatientRef","patientWithId","subscribePatients","patients","addInsuranceClaim","claim","claimsRef","newClaimRef","claimWithId","subscribeInsuranceClaims","claims"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/firebaseService.ts"],"sourcesContent":["import { ref, push, set, onValue, off, query, orderByChild, equalTo } from 'firebase/database';\r\nimport { MedicalRecord, Patient, InsuranceClaim } from '../types';\r\nimport { database } from '../config/firebase';\r\n\r\nexport class FirebaseService {\r\n    // Medical Records\r\n    static async addMedicalRecord(record: Omit<MedicalRecord, 'id'>): Promise<string> {\r\n        try {\r\n            const recordsRef = ref(database, 'medicalRecords');\r\n            const newRecordRef = push(recordsRef);\r\n            const recordWithId = { ...record, id: newRecordRef.key };\r\n            await set(newRecordRef, recordWithId);\r\n            return newRecordRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding medical record:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribeMedicalRecords(callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const unsubscribe = onValue(recordsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    static subscribePatientRecords(patientId: string, callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const patientRecordsQuery = query(recordsRef, orderByChild('patientId'), equalTo(patientId));\r\n\r\n        const unsubscribe = onValue(patientRecordsQuery, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    static subscribeDoctorRecords(doctorId: string, callback: (records: MedicalRecord[]) => void): () => void {\r\n        const recordsRef = ref(database, 'medicalRecords');\r\n        const doctorRecordsQuery = query(recordsRef, orderByChild('doctorId'), equalTo(doctorId));\r\n\r\n        const unsubscribe = onValue(doctorRecordsQuery, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const records: MedicalRecord[] = data ? Object.values(data) : [];\r\n            callback(records);\r\n        });\r\n\r\n        return () => off(recordsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    // Patients\r\n    static async addPatient(patient: Omit<Patient, 'id'>): Promise<string> {\r\n        try {\r\n            const patientsRef = ref(database, 'patients');\r\n            const newPatientRef = push(patientsRef);\r\n            const patientWithId = { ...patient, id: newPatientRef.key };\r\n            await set(newPatientRef, patientWithId);\r\n            return newPatientRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding patient:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribePatients(callback: (patients: Patient[]) => void): () => void {\r\n        const patientsRef = ref(database, 'patients');\r\n        const unsubscribe = onValue(patientsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const patients: Patient[] = data ? Object.values(data) : [];\r\n            callback(patients);\r\n        });\r\n\r\n        return () => off(patientsRef, 'value', unsubscribe);\r\n    }\r\n\r\n    // Insurance Claims\r\n    static async addInsuranceClaim(claim: Omit<InsuranceClaim, 'id'>): Promise<string> {\r\n        try {\r\n            const claimsRef = ref(database, 'insuranceClaims');\r\n            const newClaimRef = push(claimsRef);\r\n            const claimWithId = { ...claim, id: newClaimRef.key };\r\n            await set(newClaimRef, claimWithId);\r\n            return newClaimRef.key!;\r\n        } catch (error) {\r\n            console.error('Error adding insurance claim:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static subscribeInsuranceClaims(callback: (claims: InsuranceClaim[]) => void): () => void {\r\n        const claimsRef = ref(database, 'insuranceClaims');\r\n        const unsubscribe = onValue(claimsRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            const claims: InsuranceClaim[] = data ? Object.values(data) : [];\r\n            callback(claims);\r\n        });\r\n\r\n        return () => off(claimsRef, 'value', unsubscribe);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}