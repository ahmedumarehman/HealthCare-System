{"ast":null,"code":"var _PDFService;import jsPDF from'jspdf';import{EncryptionService}from'./encryption';export class PDFService{constructor(){this.encryptionService=void 0;this.encryptionService=new EncryptionService();}static getInstance(){if(!PDFService.instance){PDFService.instance=new PDFService();}return PDFService.instance;}async generateMedicalRecordPDF(record,patient){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const{includeWatermark=true,isEncrypted=false,password}=options;// Create new PDF document\nconst pdf=new jsPDF();const pageWidth=pdf.internal.pageSize.getWidth();const pageHeight=pdf.internal.pageSize.getHeight();// Add CONFIDENTIAL watermark at the top\nif(includeWatermark){pdf.setFontSize(24);pdf.setTextColor(220,53,69);// Red color\npdf.setFont('helvetica','bold');// Center the watermark at the top\nconst watermarkText='CONFIDENTIAL';const textWidth=pdf.getTextWidth(watermarkText);const xPosition=(pageWidth-textWidth)/2;pdf.text(watermarkText,xPosition,20);// Add a line under the watermark\npdf.setDrawColor(220,53,69);pdf.setLineWidth(2);pdf.line(20,25,pageWidth-20,25);}// Reset text color to black for content\npdf.setTextColor(0,0,0);pdf.setFont('helvetica','normal');// Header\nlet yPosition=includeWatermark?40:20;pdf.setFontSize(18);pdf.setFont('helvetica','bold');pdf.text('Medical Record',20,yPosition);yPosition+=15;pdf.setFontSize(12);pdf.setFont('helvetica','normal');// Patient Information\npdf.setFont('helvetica','bold');pdf.text('Patient Information:',20,yPosition);yPosition+=8;pdf.setFont('helvetica','normal');const patientInfo=[\"Name: \".concat(patient.name),\"Email: \".concat(patient.email),\"Date of Birth: \".concat(patient.dateOfBirth),\"Phone: \".concat(patient.phoneNumber),\"Address: \".concat(patient.address),\"Emergency Contact: \".concat(patient.emergencyContact),\"Insurance: \".concat(patient.insuranceProvider),\"Policy Number: \".concat(patient.insurancePolicyNumber)];patientInfo.forEach(info=>{pdf.text(info,20,yPosition);yPosition+=6;});yPosition+=10;// Medical Record Details\npdf.setFont('helvetica','bold');pdf.text('Medical Record Details:',20,yPosition);yPosition+=8;pdf.setFont('helvetica','normal');// Prepare record content (encrypt if needed)\nlet recordContent={title:record.title,description:record.description,diagnosis:record.diagnosis,prescription:record.prescription};if(isEncrypted&&password){try{// Use password-based encryption\nrecordContent={title:this.encryptionService.encryptData(record.title),description:this.encryptionService.encryptData(record.description),diagnosis:this.encryptionService.encryptData(record.diagnosis),prescription:this.encryptionService.encryptData(record.prescription)};}catch(error){console.error('Encryption failed:',error);// Fall back to unencrypted content\n}}const recordDetails=[\"Record ID: \".concat(record.id),\"Date: \".concat(record.date),\"Doctor ID: \".concat(record.doctorId),\"Title: \".concat(recordContent.title),\"\",\"Description:\",recordContent.description,\"\",\"Diagnosis:\",recordContent.diagnosis,\"\",\"Prescription:\",recordContent.prescription];recordDetails.forEach(detail=>{if(detail===''){yPosition+=4;return;}// Handle long text by wrapping\nconst lines=pdf.splitTextToSize(detail,pageWidth-40);lines.forEach(line=>{if(yPosition>pageHeight-20){pdf.addPage();yPosition=20;// Add watermark to new page if enabled\nif(includeWatermark){pdf.setFontSize(24);pdf.setTextColor(220,53,69);pdf.setFont('helvetica','bold');const watermarkText='CONFIDENTIAL';const textWidth=pdf.getTextWidth(watermarkText);const xPosition=(pageWidth-textWidth)/2;pdf.text(watermarkText,xPosition,20);pdf.setDrawColor(220,53,69);pdf.setLineWidth(2);pdf.line(20,25,pageWidth-20,25);pdf.setTextColor(0,0,0);pdf.setFont('helvetica','normal');pdf.setFontSize(12);yPosition=40;}}pdf.text(line,20,yPosition);yPosition+=6;});});yPosition+=15;// Blockchain & Security Information\nif(yPosition>pageHeight-40){pdf.addPage();yPosition=includeWatermark?40:20;}pdf.setFont('helvetica','bold');pdf.text('Blockchain & Security Information:',20,yPosition);yPosition+=8;pdf.setFont('helvetica','normal');const securityInfo=[\"Blockchain Hash: \".concat(record.blockchainHash),\"IPFS Hash: \".concat(record.ipfsHash),\"NFT Token ID: \".concat(record.nftTokenId),\"Verified: \".concat(record.isVerified?'Yes':'No'),\"Encrypted: \".concat(record.isEncrypted?'Yes':'No'),\"Access Permissions: \".concat(record.accessPermissions.join(', '))];securityInfo.forEach(info=>{const lines=pdf.splitTextToSize(info,pageWidth-40);lines.forEach(line=>{pdf.text(line,20,yPosition);yPosition+=6;});});// Footer\nyPosition=pageHeight-30;pdf.setFontSize(10);pdf.setTextColor(128,128,128);pdf.text(\"Generated on: \".concat(new Date().toLocaleString()),20,yPosition);if(isEncrypted){pdf.text('This document contains encrypted medical information.',20,yPosition+6);}// Convert to blob\nconst pdfBlob=pdf.output('blob');return pdfBlob;}async downloadMedicalRecordPDF(record,patient){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const pdfBlob=await this.generateMedicalRecordPDF(record,patient,options);// Create download link\nconst url=URL.createObjectURL(pdfBlob);const link=document.createElement('a');link.href=url;const encryptionSuffix=options.isEncrypted?'_encrypted':'';const filename=\"medical_record_\".concat(record.id,\"_\").concat(patient.name.replace(/\\s+/g,'_')).concat(encryptionSuffix,\".pdf\");link.download=filename;document.body.appendChild(link);link.click();document.body.removeChild(link);// Clean up\nURL.revokeObjectURL(url);}catch(error){console.error('Error generating PDF:',error);throw new Error('Failed to generate PDF document');}}async generateBatchPDF(records,patients){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const pdf=new jsPDF();const pageWidth=pdf.internal.pageSize.getWidth();// Add CONFIDENTIAL watermark at the top\nif(options.includeWatermark!==false){pdf.setFontSize(24);pdf.setTextColor(220,53,69);pdf.setFont('helvetica','bold');const watermarkText='CONFIDENTIAL - BATCH MEDICAL RECORDS';const textWidth=pdf.getTextWidth(watermarkText);const xPosition=Math.max(10,(pageWidth-textWidth)/2);pdf.text(watermarkText,xPosition,20);pdf.setDrawColor(220,53,69);pdf.setLineWidth(2);pdf.line(20,25,pageWidth-20,25);}// Process each record\nfor(let i=0;i<records.length;i++){const record=records[i];const patient=patients.find(p=>p.id===record.patientId);if(!patient)continue;if(i>0){pdf.addPage();}// Generate individual record content\nawait this.addRecordToPDF(pdf,record,patient,options);}return pdf.output('blob');}async addRecordToPDF(pdf,record,patient,options){let yPosition=options.includeWatermark!==false?40:20;// Record header\npdf.setFontSize(16);pdf.setFont('helvetica','bold');pdf.setTextColor(0,0,0);pdf.text(\"Medical Record - \".concat(patient.name),20,yPosition);yPosition+=15;// Add record content similar to the main method\n// (Implementation details similar to generateMedicalRecordPDF)\n}}_PDFService=PDFService;PDFService.instance=void 0;export const pdfService=PDFService.getInstance();","map":{"version":3,"names":["jsPDF","EncryptionService","PDFService","constructor","encryptionService","getInstance","instance","generateMedicalRecordPDF","record","patient","options","arguments","length","undefined","includeWatermark","isEncrypted","password","pdf","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","setFontSize","setTextColor","setFont","watermarkText","textWidth","getTextWidth","xPosition","text","setDrawColor","setLineWidth","line","yPosition","patientInfo","concat","name","email","dateOfBirth","phoneNumber","address","emergencyContact","insuranceProvider","insurancePolicyNumber","forEach","info","recordContent","title","description","diagnosis","prescription","encryptData","error","console","recordDetails","id","date","doctorId","detail","lines","splitTextToSize","addPage","securityInfo","blockchainHash","ipfsHash","nftTokenId","isVerified","accessPermissions","join","Date","toLocaleString","pdfBlob","output","downloadMedicalRecordPDF","url","URL","createObjectURL","link","document","createElement","href","encryptionSuffix","filename","replace","download","body","appendChild","click","removeChild","revokeObjectURL","Error","generateBatchPDF","records","patients","Math","max","i","find","p","patientId","addRecordToPDF","_PDFService","pdfService"],"sources":["D:/DATA/CAREER/INTERNSHIPS/EMRChains Internship NSTP/PROJECTS/HEALTHCARE_SYSTEM/src/services/pdfService.ts"],"sourcesContent":["import jsPDF from 'jspdf';\r\nimport { MedicalRecord, Patient } from '../types';\r\nimport { EncryptionService } from './encryption';\r\n\r\nexport class PDFService {\r\n    private static instance: PDFService;\r\n    private encryptionService: EncryptionService;\r\n\r\n    private constructor() {\r\n        this.encryptionService = new EncryptionService();\r\n    }\r\n\r\n    static getInstance(): PDFService {\r\n        if (!PDFService.instance) {\r\n            PDFService.instance = new PDFService();\r\n        }\r\n        return PDFService.instance;\r\n    }\r\n\r\n    async generateMedicalRecordPDF(\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<Blob> {\r\n        const { includeWatermark = true, isEncrypted = false, password } = options;\r\n\r\n        // Create new PDF document\r\n        const pdf = new jsPDF();\r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n        const pageHeight = pdf.internal.pageSize.getHeight();\r\n\r\n        // Add CONFIDENTIAL watermark at the top\r\n        if (includeWatermark) {\r\n            pdf.setFontSize(24);\r\n            pdf.setTextColor(220, 53, 69); // Red color\r\n            pdf.setFont('helvetica', 'bold');\r\n            \r\n            // Center the watermark at the top\r\n            const watermarkText = 'CONFIDENTIAL';\r\n            const textWidth = pdf.getTextWidth(watermarkText);\r\n            const xPosition = (pageWidth - textWidth) / 2;\r\n            \r\n            pdf.text(watermarkText, xPosition, 20);\r\n            \r\n            // Add a line under the watermark\r\n            pdf.setDrawColor(220, 53, 69);\r\n            pdf.setLineWidth(2);\r\n            pdf.line(20, 25, pageWidth - 20, 25);\r\n        }\r\n\r\n        // Reset text color to black for content\r\n        pdf.setTextColor(0, 0, 0);\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Header\r\n        let yPosition = includeWatermark ? 40 : 20;\r\n        pdf.setFontSize(18);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Medical Record', 20, yPosition);\r\n\r\n        yPosition += 15;\r\n        pdf.setFontSize(12);\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Patient Information\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Patient Information:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n        \r\n        const patientInfo = [\r\n            `Name: ${patient.name}`,\r\n            `Email: ${patient.email}`,\r\n            `Date of Birth: ${patient.dateOfBirth}`,\r\n            `Phone: ${patient.phoneNumber}`,\r\n            `Address: ${patient.address}`,\r\n            `Emergency Contact: ${patient.emergencyContact}`,\r\n            `Insurance: ${patient.insuranceProvider}`,\r\n            `Policy Number: ${patient.insurancePolicyNumber}`\r\n        ];\r\n\r\n        patientInfo.forEach(info => {\r\n            pdf.text(info, 20, yPosition);\r\n            yPosition += 6;\r\n        });\r\n\r\n        yPosition += 10;\r\n\r\n        // Medical Record Details\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Medical Record Details:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        // Prepare record content (encrypt if needed)\r\n        let recordContent = {\r\n            title: record.title,\r\n            description: record.description,\r\n            diagnosis: record.diagnosis,\r\n            prescription: record.prescription\r\n        };\r\n\r\n        if (isEncrypted && password) {\r\n            try {\r\n                // Use password-based encryption\r\n                recordContent = {\r\n                    title: this.encryptionService.encryptData(record.title),\r\n                    description: this.encryptionService.encryptData(record.description),\r\n                    diagnosis: this.encryptionService.encryptData(record.diagnosis),\r\n                    prescription: this.encryptionService.encryptData(record.prescription)\r\n                };\r\n            } catch (error) {\r\n                console.error('Encryption failed:', error);\r\n                // Fall back to unencrypted content\r\n            }\r\n        }\r\n\r\n        const recordDetails = [\r\n            `Record ID: ${record.id}`,\r\n            `Date: ${record.date}`,\r\n            `Doctor ID: ${record.doctorId}`,\r\n            `Title: ${recordContent.title}`,\r\n            ``,\r\n            `Description:`,\r\n            recordContent.description,\r\n            ``,\r\n            `Diagnosis:`,\r\n            recordContent.diagnosis,\r\n            ``,\r\n            `Prescription:`,\r\n            recordContent.prescription\r\n        ];\r\n\r\n        recordDetails.forEach(detail => {\r\n            if (detail === '') {\r\n                yPosition += 4;\r\n                return;\r\n            }\r\n\r\n            // Handle long text by wrapping\r\n            const lines = pdf.splitTextToSize(detail, pageWidth - 40);\r\n            lines.forEach((line: string) => {\r\n                if (yPosition > pageHeight - 20) {\r\n                    pdf.addPage();\r\n                    yPosition = 20;\r\n                    \r\n                    // Add watermark to new page if enabled\r\n                    if (includeWatermark) {\r\n                        pdf.setFontSize(24);\r\n                        pdf.setTextColor(220, 53, 69);\r\n                        pdf.setFont('helvetica', 'bold');\r\n                        const watermarkText = 'CONFIDENTIAL';\r\n                        const textWidth = pdf.getTextWidth(watermarkText);\r\n                        const xPosition = (pageWidth - textWidth) / 2;\r\n                        pdf.text(watermarkText, xPosition, 20);\r\n                        pdf.setDrawColor(220, 53, 69);\r\n                        pdf.setLineWidth(2);\r\n                        pdf.line(20, 25, pageWidth - 20, 25);\r\n                        pdf.setTextColor(0, 0, 0);\r\n                        pdf.setFont('helvetica', 'normal');\r\n                        pdf.setFontSize(12);\r\n                        yPosition = 40;\r\n                    }\r\n                }\r\n                \r\n                pdf.text(line, 20, yPosition);\r\n                yPosition += 6;\r\n            });\r\n        });\r\n\r\n        yPosition += 15;\r\n\r\n        // Blockchain & Security Information\r\n        if (yPosition > pageHeight - 40) {\r\n            pdf.addPage();\r\n            yPosition = includeWatermark ? 40 : 20;\r\n        }\r\n\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Blockchain & Security Information:', 20, yPosition);\r\n        yPosition += 8;\r\n        pdf.setFont('helvetica', 'normal');\r\n\r\n        const securityInfo = [\r\n            `Blockchain Hash: ${record.blockchainHash}`,\r\n            `IPFS Hash: ${record.ipfsHash}`,\r\n            `NFT Token ID: ${record.nftTokenId}`,\r\n            `Verified: ${record.isVerified ? 'Yes' : 'No'}`,\r\n            `Encrypted: ${record.isEncrypted ? 'Yes' : 'No'}`,\r\n            `Access Permissions: ${record.accessPermissions.join(', ')}`\r\n        ];\r\n\r\n        securityInfo.forEach(info => {\r\n            const lines = pdf.splitTextToSize(info, pageWidth - 40);\r\n            lines.forEach((line: string) => {\r\n                pdf.text(line, 20, yPosition);\r\n                yPosition += 6;\r\n            });\r\n        });\r\n\r\n        // Footer\r\n        yPosition = pageHeight - 30;\r\n        pdf.setFontSize(10);\r\n        pdf.setTextColor(128, 128, 128);\r\n        pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, yPosition);\r\n        if (isEncrypted) {\r\n            pdf.text('This document contains encrypted medical information.', 20, yPosition + 6);\r\n        }\r\n\r\n        // Convert to blob\r\n        const pdfBlob = pdf.output('blob');\r\n        return pdfBlob;\r\n    }\r\n\r\n    async downloadMedicalRecordPDF(\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<void> {\r\n        try {\r\n            const pdfBlob = await this.generateMedicalRecordPDF(record, patient, options);\r\n            \r\n            // Create download link\r\n            const url = URL.createObjectURL(pdfBlob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            \r\n            const encryptionSuffix = options.isEncrypted ? '_encrypted' : '';\r\n            const filename = `medical_record_${record.id}_${patient.name.replace(/\\s+/g, '_')}${encryptionSuffix}.pdf`;\r\n            link.download = filename;\r\n            \r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            \r\n            // Clean up\r\n            URL.revokeObjectURL(url);\r\n        } catch (error) {\r\n            console.error('Error generating PDF:', error);\r\n            throw new Error('Failed to generate PDF document');\r\n        }\r\n    }\r\n\r\n    async generateBatchPDF(\r\n        records: MedicalRecord[],\r\n        patients: Patient[],\r\n        options: {\r\n            includeWatermark?: boolean;\r\n            isEncrypted?: boolean;\r\n            password?: string;\r\n        } = {}\r\n    ): Promise<Blob> {\r\n        const pdf = new jsPDF();\r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n\r\n        // Add CONFIDENTIAL watermark at the top\r\n        if (options.includeWatermark !== false) {\r\n            pdf.setFontSize(24);\r\n            pdf.setTextColor(220, 53, 69);\r\n            pdf.setFont('helvetica', 'bold');\r\n            const watermarkText = 'CONFIDENTIAL - BATCH MEDICAL RECORDS';\r\n            const textWidth = pdf.getTextWidth(watermarkText);\r\n            const xPosition = Math.max(10, (pageWidth - textWidth) / 2);\r\n            pdf.text(watermarkText, xPosition, 20);\r\n            pdf.setDrawColor(220, 53, 69);\r\n            pdf.setLineWidth(2);\r\n            pdf.line(20, 25, pageWidth - 20, 25);\r\n        }\r\n\r\n        // Process each record\r\n        for (let i = 0; i < records.length; i++) {\r\n            const record = records[i];\r\n            const patient = patients.find(p => p.id === record.patientId);\r\n            \r\n            if (!patient) continue;\r\n\r\n            if (i > 0) {\r\n                pdf.addPage();\r\n            }\r\n\r\n            // Generate individual record content\r\n            await this.addRecordToPDF(pdf, record, patient, options);\r\n        }\r\n\r\n        return pdf.output('blob');\r\n    }\r\n\r\n    private async addRecordToPDF(\r\n        pdf: jsPDF,\r\n        record: MedicalRecord,\r\n        patient: Patient,\r\n        options: { includeWatermark?: boolean; isEncrypted?: boolean; password?: string }\r\n    ): Promise<void> {\r\n        let yPosition = options.includeWatermark !== false ? 40 : 20;\r\n\r\n        // Record header\r\n        pdf.setFontSize(16);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.setTextColor(0, 0, 0);\r\n        pdf.text(`Medical Record - ${patient.name}`, 20, yPosition);\r\n        yPosition += 15;\r\n\r\n        // Add record content similar to the main method\r\n        // (Implementation details similar to generateMedicalRecordPDF)\r\n    }\r\n}\r\n\r\nexport const pdfService = PDFService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}